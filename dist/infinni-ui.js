!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.editMask=e():t.editMask=e()}(this,function(){return function(t){function e(n){if(r[n])return r[n].exports;var i=r[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var r={};return e.m=t,e.c=r,e.i=function(t){return t},e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=77)}([function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(6),o=r(34),s=r(27),a=function(t){function e(e,r,n,i){var o=t.call(this,e,r,n,i)||this;return o.width=i.width,o}return n(e,t),e.prototype.getIsComplete=function(){return this.getIsValid()},e.prototype.getIsValid=function(){var t=this.getText(),e=t.replace(/[^\d]/g,"");return parseInt(e,10)>=this.min&&e.length===this.width},e.prototype.updateText=function(){var t=this.text||"",e=t.replace(/[^\d]/g,"");t=this.getIsEmpty()?i.padEnd(e,this.width,this.getBlank()):this.isActive?i.padEnd(e,this.width,this.getBlank()):this.formatDecimal(e),this.setText(t)},e.prototype.getInputRegexp=function(){return new RegExp("^[\\d]{1,"+this.width+"}")},e.prototype.finalizeInput=function(){var t=!1;if(this.getIsComplete()){var e=this.getText(),r=e.replace(/[^\d]/g,"");r.length<this.width&&(this.setText(this.formatDecimal(r)),t=!0)}return t},e.prototype.formatDecimal=function(t){return o.padStart(t,this.width,"0")},e}(s.DecimalPattern);e.FixedWidthPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(3),o=function(t){function e(e,r,n){var i=t.call(this,e,r)||this;return i.isRequired=!1,i.isRequired=n,i}return n(e,t),e.prototype.getIsRequired=function(){return this.isRequired},e.prototype.getIsComplete=function(){return!this.getIsEmpty()},e.prototype.getIsEmpty=function(){var t=this.text;return null===t||void 0===t||""===t||0===t.length||0===this.cleanBlank(t).length},e.prototype.cleanBlank=function(e){return t.prototype.cleanBlank.call(this,e).replace(/\s/g,"")},e.prototype.updateText=function(){var t;t=this.getIsEmpty()?this.getBlank():this.cleanBlank(this.text).substr(0,1),this.setText(t)},e.prototype.setInput=function(t,e){var r=null;t=this.trimBlank(t);var n=t.substr(0,1);return this.validateInput(n)?(this.setText(n),r=n,t=t.substr(n.length)):this.getIsRequired()&&0!==n.length||(r="",this.setText(r)),e&&e(t,r),t},e.prototype.applyValue=function(t){var e=t;e===this.getBlank()?this.setText(""):this.validateInput(e)&&this.setText(e)},e.prototype.getIsValid=function(){return!this.getIsRequired()||!this.getIsEmpty()},e}(i.Pattern);e.TemplatePattern=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(27),o=r(6),s=function(t){function e(e,r,n,i){var o=t.call(this,e,r,n,i)||this;return o.minWidth=i.minWidth,o.maxWidth=i.maxWidth,o}return n(e,t),e.prototype.updateText=function(){var t=this.text||"",e=t.replace(/[^\d]/g,"");t=this.getIsEmpty()?o.padEnd("",this.minWidth,this.getBlank()):this.isActive?o.padEnd(e,this.minWidth,this.getBlank()):o.padEnd(e.replace(/^0+/,"0"),this.minWidth,this.getBlank()),this.setText(t)},e.prototype.getInputRegexp=function(){return/^\d+/},e}(i.DecimalPattern);e.FloatWidthPattern=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n="_",i=function(){function t(t,e,r){this.locale=t,this.template=e,this.name=r,this.isActive=!1,this.isEditable=!0,this.blank=n}return t.prototype.setBlank=function(t){this.blank=t||n},t.prototype.getBlank=function(){return this.blank},t.prototype.getName=function(){return this.name},t.prototype.canActivate=function(){return!0},t.prototype.setIsActive=function(t){this.canActivate()||(t=!1),this.isActive=t},t.prototype.getNextInput=function(){return this.getText()},t.prototype.getPrevInput=function(){return this.getText()},t.prototype.getText=function(){return null!==this.text&&void 0!==this.text||this.updateText(),this.text},t.prototype.canInputChar=function(t){return!0},t.prototype.setText=function(t){var e=this.isEqualText(t,this.text);return this.text=t,e},t.prototype.isEqualText=function(t,e){return t===e},t.prototype.trimBlankLeft=function(t){for(var e=this.getBlank();0===t.indexOf(e);)t=t.substring(e.length);return t},t.prototype.trimBlankRight=function(t){for(var e=this.getBlank();t.lastIndexOf(e)===t.length-1;)t=t.substring(0,e.length-1);return t},t.prototype.cleanBlank=function(t){for(var e=this.getBlank();-1!==t.indexOf(e);)t=t.replace(e,"");return t},t.prototype.trimBlank=function(t){for(var e=this.getBlank();t.substr(0,1)===e;)t=t.substr(1);for(;t.substr(t.length-1)===e;)t=t.substr(0,t.length-1);return t},t.prototype.finalizeInput=function(){return!1},t.prototype.getValue=function(){},t}();e.Pattern=i},function(t,e,r){"use strict";function n(t){var e=t.replace(/[^\d]/g,"");return parseInt(e,10)>2}Object.defineProperty(e,"__esModule",{value:!0}),e.isCompleteHours=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(34),i=r(6),o=r(17),s=function(){function t(t){this.locale=t}return t.prototype.getDecimalSeparator=function(){return this.locale.numberDecimalSeparator},t.prototype.getNegativePattern=function(){return this.locale.numberNegativePattern},t.prototype.getPositivePattern=function(){return this.locale.numberPositivePattern},t.prototype.getGroupSeparator=function(){return this.locale.numberGroupSeparator},t.prototype.getGroupSize=function(){return this.locale.numberGroupSize},t.prototype.formatEmpty=function(t){var e=t.blank,r=[n.padStart("",1,e)];t.decimalDigits>0&&r.push(n.padStart("",t.decimalDigits,e));var i=r.join(this.getDecimalSeparator());return this.wrapSignPattern(i,t)},t.prototype.format=function(t,e){var r=[],n=this.splitNumberByParts(t),o=n.integral,s=n.fractional;r.push(this.formatGroup(o)),e.decimalDigits>0&&(s=i.padEnd(s||"",e.decimalDigits,"0"),r.push(s.substr(0,e.decimalDigits)));var a=r.join(this.getDecimalSeparator());return this.wrapSignPattern(a,e)},t.prototype.formatValue=function(t,e){if(o.isEmpty(t))return this.formatEmpty(e);var r=t.toFixed(e.decimalDigits).split(".").join(this.getDecimalSeparator());return this.format(r,e)},t.prototype.formatInput=function(t,e){var r=[],o=this.splitNumberByParts(t),s=o.integral,a=o.fractional,u=e.decimalDigits;s.length>0?r.push(this.formatGroup(s)):r.push(n.padStart("",1,e.blank)),e.decimalDigits>0&&(a=a||"",r.push(i.padEnd(a.substr(0,u),u,"0")));var c=r.join(this.getDecimalSeparator());return this.wrapSignPattern(c,e)},t.prototype.getPattern=function(t){return t?this.getNegativePattern():this.getPositivePattern()},t.prototype.getWrapper=function(t){return this.getPattern(t.isNegative).split(/n/i)},t.prototype.wrapSignPattern=function(t,e){return this.getWrapper(e).join(t)},t.prototype.splitNumberByParts=function(t){var e=t.split(this.getDecimalSeparator()).map(function(t){return t.replace(/[^\d]/g,"")});return{integral:e[0],fractional:e[1]}},t.prototype.formatGroup=function(t){for(var e=[],r=this.getGroupSize(),n=this.getGroupSeparator(),i=t;i.length>0;i=i.substr(0,i.length-r))e.push(i.substr(-r));return e.reverse().join(n)},t}();e.NumberFormatter=s},function(t,e,r){"use strict";function n(t,e,r){return r=r||" ",t.length>e?t:(e-=t.length,e>r.length&&(r+=r.repeat(e/r.length)),t+r.slice(0,e))}Object.defineProperty(e,"__esModule",{value:!0}),e.padEnd=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){this.el=t,this.mask=e,this.subscribeToElementEvents(),this.updateInputElement()}return t.prototype.getValue=function(){return this.mask.getValue()},t.prototype.setValue=function(t){this.mask.setValue(t),this.updateInputElement()},t.prototype.onChangeValue=function(t){this.mask.onChangeValue(t)},t.prototype.onInvalidValue=function(t){this.mask.onInvalidValue(t)},t.prototype.setCursorPosition=function(t,e){var r=this;e=e||t,this.el.setSelectionRange(t,e),setTimeout(function(){r.el&&r.el.setSelectionRange(t,e)},4)},t.prototype.selectAll=function(){this.el.setSelectionRange(0,this.el.value.length)},t.prototype.subscribeToElementEvents=function(){this.el.addEventListener("keydown",this),this.el.addEventListener("input",this),this.el.addEventListener("focus",this),this.el.addEventListener("blur",this)},t.prototype.unsubscribeToElementEvents=function(){this.el.removeEventListener("keydown",this),this.el.removeEventListener("input",this),this.el.removeEventListener("focus",this),this.el.removeEventListener("blur",this)},t.prototype.destroy=function(){this.unsubscribeToElementEvents(),this.mask.dispose(),this.mask=null,this.el=null},t.prototype.handleEvent=function(t){switch(t.type){case"keydown":this.onKeydownHandler(t);break;case"input":this.onInputHandler();break;case"focus":this.onFocusHandler();break;case"blur":this.onBlurHandler()}},t.prototype.onBlurHandler=function(){this.mask.updateDisplay(),this.updateInputElement()},t.prototype.onFocusHandler=function(){if(this.mask.getIsEmpty()){var t=this.el.selectionStart,e=this.mask.getInputPosition(t);this.updateInputElement(e)}},t.prototype.onInputHandler=function(){var t=this.el.selectionStart,e=this.el.value,r=this.mask.setInput(e,t);this.updateInputElement(r)},t.prototype.onKeydownHandler=function(t){if(!(t.altKey||t.ctrlKey||t.shiftKey)){var e,r=this.el.selectionStart;switch(t.key){case"ArrowUp":t.preventDefault(),e=this.mask.setNextPatternValue(r),e&&this.updateInputElement(e.start,e.end);break;case"ArrowDown":t.preventDefault(),e=this.mask.setPrevPatternValue(r),e&&this.updateInputElement(e.start,e.end)}}},t.prototype.updateInputElement=function(t,e){this.el.value=this.mask.getText(),void 0!==t&&null!==t?(e=e||t,this.mask.getInvalid()?this.selectAll():this.setCursorPosition(t,e)):this.mask.getInvalid()&&this.selectAll()},t}();e.Editor=n},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(3),o=function(t){function e(e,r,n){var i=t.call(this,e,r,"number")||this;return i.isNegative=!1,i.decimalDigits=n,i}return n(e,t),e.prototype.setIsNegative=function(t){this.isNegative=t},e.prototype.getIsNegative=function(){return this.isNegative},e.prototype.toggleSign=function(){this.isNegative=!this.isNegative},e.prototype.getIsEmpty=function(){var t;if(null===this.text||void 0===this.text)t=!0;else{t=0===this.text.replace(/[^\d]/g,"").length}return t},e.prototype.getIsComplete=function(){return this.parser.isComplete(this.getText(),this.decimalDigits)},e.prototype.getIsValid=function(){return this.parser.isComplete(this.getText(),this.decimalDigits)},e.prototype.applyValue=function(t){this.setIsNegative(t<0);var e="";null!==t&&void 0!==t&&isFinite(t)&&!isNaN(t)&&(t=Math.abs(t),e=this.formatter.formatValue(t,{decimalDigits:this.decimalDigits,isNegative:this.getIsNegative(),blank:this.getBlank()})),this.setText(e)},e.prototype.getNextInput=function(){var t,e=this.getText(),r=this.parser.parse(e,{decimalDigits:this.decimalDigits,isNegative:this.getIsNegative()},0),n=parseInt(r.integralPart.replace(/[^\d]/g,""),10);return isFinite(n)&&!isNaN(n)?(n++,t=n.toString(10)+r.separatorPart+r.fractionalPart):t="0"+r.separatorPart+r.fractionalPart,t},e.prototype.getPrevInput=function(){var t,e=this.getText(),r=this.parser.parse(e,{decimalDigits:this.decimalDigits,isNegative:this.getIsNegative()},0),n=parseInt(r.integralPart.replace(/[^\d]/g,""),10);return isFinite(n)&&!isNaN(n)?(n--,t=n.toString(10)+r.separatorPart+r.fractionalPart):t="0"+r.separatorPart+r.fractionalPart,t},e.prototype.updateText=function(){var t,e=this.text||"",r={decimalDigits:this.decimalDigits,blank:this.getBlank(),isNegative:this.getIsNegative()};t=this.getIsEmpty()?this.formatter.formatEmpty(r):this.isActive?this.formatter.formatInput(e,r):this.formatter.format(e,r),this.setText(t)},e.prototype.setInput=function(t,e){for(var r=null,n=this.getBlank();0===t.indexOf(n);)t=t.substring(n.length);var i=this.parser.parse(t,{isNegative:this.getIsNegative(),decimalDigits:this.decimalDigits},0);return r=0===i.input.length?"":i.integralPart+i.separatorPart+i.fractionalPart,null!==r&&this.setText(r),e&&e(t,r),t},e.prototype.getValue=function(){var t=this.getText(),e=this.parser.parse(t,{decimalDigits:this.decimalDigits,isNegative:this.getIsNegative()},0),r=e.integralPart.replace(/[^\d]/g,""),n=e.fractionalPart.replace(/[^\d]/g,""),i=[r,n||"0"].join("."),o=+i;return isFinite(o)&&!isNaN(o)&&this.getIsNegative()&&(o=-o),o},e}(i.Pattern);e.BaseNumberPattern=o},function(t,e,r){"use strict";function n(t,e){return new i.StaticPattern(e,t)}Object.defineProperty(e,"__esModule",{value:!0});var i=r(29);e.buildStaticPattern=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(73),i=r(76),o=r(35),s=r(32),a=r(30),u=function(){function t(t){var e=this;this.locale=t,this.patterns=new n.PatternsList,this.invalid=!1,this.value=new i.ValueModel,this.eventEmitter=new s.EventEmitter,this.value.onChange(function(t,r){return e.onChangeValueHandler(r)})}return t.prototype.setPatterns=function(t){this.patterns.setList(t)},t.prototype.getInvalid=function(){return this.invalid},t.prototype.getIsEmpty=function(){return this.patterns.getIsEmpty()},t.prototype.onChangeValue=function(t){return this.value.onChange(function(e,r){return t.call(null,r)})},t.prototype.onInvalidValue=function(t){return this.eventEmitter.on(a.OutOfRangeEvent.eventName,t)},t.prototype.onChangeValueHandler=function(t){this.updateInvalid(),void 0!==t.newValue&&(this.lastValue=t.newValue,t.params.update&&this.applyValue(t.newValue))},t.prototype.applyValue=function(t){this.patterns.getList().map(function(e,r){return e.applyValue(t)}),this.patterns.updateText()},t.prototype.getText=function(){return this.getInvalid()?this.getInvalidText():this.patterns.getText()},t.prototype.setNextPatternValue=function(t){var e=this.patterns.setNextPatternValue(t);return this.updateValue(),e},t.prototype.setPrevPatternValue=function(t){var e=this.patterns.setPrevPatternValue(t);return this.updateValue(),e},t.prototype.setInput=function(t,e){var r=this.patterns.setInput(t,e),n=this.getText();this.patterns.updateText();var i=this.restorePosition(n,r);return this.updateValue(),i},t.prototype.setValue=function(t){this.value.setValue(t,{update:!0})},t.prototype.getValue=function(){return this.value.getValue()},t.prototype.getInputPosition=function(t){return this.patterns.getInputPosition(t)},t.prototype.handleKey=function(t,e){return null},t.prototype.restorePosition=function(t,e){return o.restorePosition(t,this.getText(),e)},t.prototype.updateDisplay=function(){return this.patterns.updateDisplay(),this},t.prototype.updateValue=function(){if(this.patterns.getIsValid()){var t=this.buildValue();this.validate(t)&&this.value.setValue(this.buildValue())}else this.value.setValue(void 0)},t.prototype.updateInvalid=function(){},t.prototype.getInvalidText=function(){return"Error"},t.prototype.setInvalid=function(t){this.invalid=t},t.prototype.validate=function(t){return!0},t.prototype.dispose=function(){this.patterns.dispose(),this.lastValue=null,this.value.dispose(),this.eventEmitter.dispose()},t}();e.Mask=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){this.patternsBuilder=this.initPatternsBuilder()}return t.prototype.build=function(t,e){var r=this.createMask(e),n=this.patternsBuilder.build(t,e);return r.setPatterns(n),r},t}();e.MaskBuilder=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.defaultPatternBuilder=t,this.registeredPatterns=[]}return t.prototype.registerPattern=function(t,e){return this.registeredPatterns.push({patternSelector:t,patternBuilder:e}),this},t.prototype.build=function(t,e){var r=this,n=[t];return this.registeredPatterns.forEach(function(t){var r=0;do{var i=n[r];if("string"==typeof i&&i.length>0){var o=t.patternSelector.match(i);if(null!==o){var s=[i.substring(0,o.start),t.patternBuilder(o.text,e),i.substr(o.end)];n.splice.apply(n,[r,1].concat(s)),r++}}r++}while(r<n.length)}),this.defaultPatternBuilder&&n.forEach(function(t,i){"string"==typeof t&&t.length>0&&(n[i]=r.defaultPatternBuilder(t,e))}),n=n.filter(function(t){return"string"!=typeof t})},t}();e.PatternsBuilder=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.locale=t}return t.prototype.parse=function(t,e,r){void 0===r&&(r=0);var n=t.substr(r);return e.decimalDigits>0?this.parseFloatNumber(n,e):this.parseIntegerNumber(n,e)},t.prototype.isComplete=function(t,e){var r,n=this.getDecimalSeparator();if(0===e){r=t.replace(/[^\d]/g,"").length>0}else{var i=t.split(n).map(function(t){return t.replace(/[^\d]/g,"")}),o=i[0];i[1];r=o.length>0}return r},t.prototype.parseFloatNumber=function(t,e){var r={separatorPart:"",integralPart:"",fractionalPart:"",input:t},n=this.run(t,[this.integralPartParser,this.decimalSeparatorParser,this.fractionalPartParser],e);return r.integralPart=n[0],r.separatorPart=n[1],r.fractionalPart=n[2],r.input=n.join(""),r},t.prototype.parseIntegerNumber=function(t,e){var r={integralPart:"",fractionalPart:"",input:t},n=this.run(t,[this.integralPartParser],e);return r.integralPart=n[0],r.input=n.join(""),r},t.prototype.run=function(t,e,r){for(var n=e.map(function(t){return""}),i=0,o=0;i<e.length;i+=1){var s=e[i].parse(t,o,r);if(null===s)break;o=s.end,n[i]=s.text||""}return n},t}();e.BaseNumberParser=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.decimalSeparator=t}return t.prototype.parse=function(t,e,r){var n=this.decimalSeparator,i=null;return t.indexOf(n,e)===e&&(i={text:n,start:e,end:e+n.length}),i},t}();e.DecimalSeparatorParser=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.prototype.parse=function(t,e,r){var n=new RegExp("[\\d]{1,"+r.decimalDigits+"}"),i=null,o=t.substr(e).match(n);return o&&(i={text:o[0],start:e+o.index,end:e+o.index+o[0].length}),i},t}();e.FractionalPartParser=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){this.groupSeparator=t,this.decimalSeparator=e}return t.prototype.parse=function(t,e,r){for(var n=e,i=/\d/,o="",s=this.groupSeparator;n<t.length;)if(t.indexOf(s,n)===n)o+=s,n+=s.length;else if(t[n].match(i))o+=t[n],n+=1;else{if(t.indexOf(this.decimalSeparator,n)===n)break;n++}return{text:o,start:n-o.length,end:n}},t}();e.IntegralPartParser=n},function(t,e,r){"use strict";function n(t){return void 0===t||null===t}Object.defineProperty(e,"__esModule",{value:!0}),e.isEmpty=n},function(t,e,r){"use strict";function n(t){var e;if(null===t||void 0===t)e="";else{e=new Date(t).getUTCDate().toString()}return e}Object.defineProperty(e,"__esModule",{value:!0}),e.getDay=n},function(t,e,r){"use strict";function n(t){var e;if(null===t||void 0===t)e="";else{e=new Date(t).getUTCHours().toString()}return e}Object.defineProperty(e,"__esModule",{value:!0}),e.getHours=n},function(t,e,r){"use strict";function n(t){var e;if(null===t||void 0===t)e="";else{var r=new Date(t).getUTCHours();e=0===r?"12":r<13?r.toString():(r-12).toString()}return e}Object.defineProperty(e,"__esModule",{value:!0}),e.getHours12=n},function(t,e,r){"use strict";function n(t){var e;if(null===t||void 0===t)e="";else{e=(new Date(t).getUTCMonth()+1).toString()}return e}Object.defineProperty(e,"__esModule",{value:!0}),e.getMonth=n},function(t,e,r){"use strict";function n(t){var e=t.replace(/[^\d]/g,"");return parseInt(e,10)>3}Object.defineProperty(e,"__esModule",{value:!0}),e.isCompleteDay=n},function(t,e,r){"use strict";function n(t){var e=t.replace(/[^\d]/g,"");return parseInt(e,10)>=6}Object.defineProperty(e,"__esModule",{value:!0}),e.isCompleteMinutes=n},function(t,e,r){"use strict";function n(t){var e=t.replace(/[^\d]/g,"");return parseInt(e,10)>=2}Object.defineProperty(e,"__esModule",{value:!0}),e.isCompleteMonth=n},function(t,e,r){"use strict";function n(t){var e=t.replace(/[^\d]/g,"");return parseInt(e,10)>=6}Object.defineProperty(e,"__esModule",{value:!0}),e.isCompleteSeconds=n},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(8),o=r(85),s=r(81),a=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return i.parser=new o.PercentParser(e),i.formatter=new s.PercentFormatter(e),i}return n(e,t),e}(i.BaseNumberPattern);e.PercentPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(3),o=function(t){function e(e,r,n,i){var o=t.call(this,e,r,n)||this;return o.min=i.min,o.max=i.max,o}return n(e,t),e.prototype.getIsEmpty=function(){var t;if(null===this.text||void 0===this.text)t=!0;else{t=0===this.text.replace(/[^\d]/g,"").length}return t},e.prototype.getIsValid=function(){var t=this.getText(),e=t.replace(/[^\d]/g,""),r=parseInt(e,10);return r>=this.min&&r<=this.max},e.prototype.getNextInput=function(){var t;if(this.getIsEmpty())t=this.min.toString(10);else{var e=this.getText(),r=parseInt(e.replace(/[^\d]/g,""),10);t=r<this.max?""+ ++r:e}return t},e.prototype.getPrevInput=function(){var t;if(this.getIsEmpty())t=this.min.toString(10);else{var e=this.getText(),r=parseInt(e.replace(/[^\d]/g,""),10);t=r>this.min?""+--r:e}return t},e.prototype.canInputChar=function(t){return/\d/.test(t)},e.prototype.setInput=function(t,e){var r=this,n=null;t=this.trimBlankLeft(t);var i=t.match(this.getInputRegexp());if(0===t.length)n="";else if(i){var o=i[0],s=o.split("").map(function(t,e,r){return r.slice(0,e+1).join("")}).filter(function(t){return parseInt(t,10)<=r.max}).pop();s.length&&(n=s,t=t.substring(i.index+s.length))}return null!==n&&this.setText(n),e&&e(t,n),t},e.prototype.getValue=function(){var t=this.text||"",e=t.replace(/[^\d]/g,"");return 0===e.length?null:parseInt(e,10)},e}(i.Pattern);e.DecimalPattern=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(3),o=r(6),s=function(t){function e(e,r,n,i){var o=t.call(this,e,r,n)||this;return o.list=i,o.minWidth=i.map(function(t){return t.length}).sort()[0],o}return n(e,t),e.prototype.getIsEmpty=function(){var t,e=this.text;if(null===e||void 0===e)t=!0;else{for(var r=this.getBlank();-1!==e.indexOf(r);)e=e.replace(r,"");t=0===e.length}return t},e.prototype.getNextInput=function(){var t=this.getText(),e=t,r=this.list.map(function(t){return t.toUpperCase()}).indexOf(t.toUpperCase());return-1===r?e=this.list[0]:r+1<this.list.length&&(e=this.list[r+1]),e},e.prototype.getPrevInput=function(){var t=this.getText(),e=t,r=this.list.map(function(t){return t.toUpperCase()}).indexOf(t.toUpperCase());return-1===r?e=this.list[0]:r-1>=0&&(e=this.list[r-1]),e},e.prototype.getIsValid=function(){var t=this.getText().toUpperCase();return this.list.map(function(t){return t.toUpperCase()}).some(function(e){return e===t})},e.prototype.getIsComplete=function(){return this.getIsValid()},e.prototype.updateText=function(){var t=this.text||"",e=this.minWidth;if(!this.getIsEmpty()){var r=t.toUpperCase(),n=this.list.map(function(t){return t.toUpperCase()}).filter(function(t){return-1!==t.indexOf(r)}).sort(function(t,e){return t.length-e.length}).pop();void 0!==n&&(e=n.length)}t=o.padEnd(t,e,this.getBlank()),this.setText(t)},e.prototype.setInput=function(t,e){var r=null;if(0===t.length)r="";else{for(var n=this.list.map(function(t){return t.toUpperCase()}).sort(function(t,e){return t.length-e.length}),i=Math.max.apply(Math,n.map(function(t){return t.length})),o=[],s=1;s<=Math.min(i,t.length);s+=1)!function(e){var r=t.substr(0,e);n.some(function(t){return t.substr(0,e)===r.toUpperCase()})&&o.push(r)}(s);var a=o.sort(function(t,e){return t.length-e.length}).map(function(t){return t.length}).pop();void 0===a?r="":(r=t.substr(0,a),t=t.substr(a+1))}return null!==r&&this.setText(r),e&&e(t,r),t},e.prototype.getValue=function(){var t=this.list.map(function(t){return t.toUpperCase()}).indexOf(this.getText().toUpperCase());return-1===t?null:t},e.prototype.finalizeInput=function(){var t=!1,e=this.getText().toUpperCase(),r=this.list.filter(function(t){return 0===t.toUpperCase().indexOf(e)});return 1===r.length&&(this.setText(r[0]),t=!0),t},e}(i.Pattern);e.ListPattern=s},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(3),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.getIsComplete=function(){return!0},e.prototype.getIsValid=function(){return!0},e.prototype.applyValue=function(t){},e.prototype.getIsEmpty=function(){return!0},e.prototype.setInput=function(t,e){var r=this.getText(),n="",i=t.indexOf(r);return-1!==i&&(n=r,t=t.substring(0,i)+t.substring(i+r.length)),e&&e(t,n),t},e.prototype.updateText=function(){this.text=this.template},e.prototype.canActivate=function(){return!1},e}(i.Pattern);e.StaticPattern=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.value=t}return t}();n.eventName="OutOfRangeEvent",e.OutOfRangeEvent=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.text=t}return t.prototype.match=function(t){var e=null,r=t.indexOf(this.text);return-1!==r&&(e={text:this.text,start:r,end:r+this.text.length}),e},t}();e.StringSelector=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){this.handlers={}}return t.prototype.on=function(t,e){var r=this.handlers[t];return r||(this.handlers[t]=r=[]),-1===r.indexOf(e)&&r.push(e),function(){var t=r.indexOf(e);-1!==t&&r.splice(t,1)}},t.prototype.dispose=function(){var t=this;Object.keys(this.handlers).forEach(function(e){return delete t.handlers[e]})},t.prototype.emit=function(t,e){var r=this.handlers[t];Array.isArray(r)&&r.forEach(function(r){return r.call(null,t,e)})},t}();e.EventEmitter=n},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(13),o=r(16),s=r(14),a=r(15),u=function(t){function e(e){var r=t.call(this,e)||this;return r.locale=e,r.integralPartParser=new o.IntegralPartParser(e.numberGroupSeparator,e.numberDecimalSeparator),r.decimalSeparatorParser=new s.DecimalSeparatorParser(e.numberDecimalSeparator),r.fractionalPartParser=new a.FractionalPartParser,r}return n(e,t),e.prototype.getDecimalSeparator=function(){return this.locale.numberDecimalSeparator},e}(i.BaseNumberParser);e.NumberParser=u},function(t,e,r){"use strict";function n(t,e,r){return r=r||" ",t.length>e?t:(e-=t.length,e>r.length&&(r+=r.repeat(e/r.length)),r.slice(0,e)+t)}Object.defineProperty(e,"__esModule",{value:!0}),e.padStart=n},function(t,e,r){"use strict";function n(t,e,r){return t.substr(0,r).split("").reduce(function(t,r){var n=e.indexOf(r,t);return-1!==n?n+1:t},0)}Object.defineProperty(e,"__esModule",{value:!0}),e.restorePosition=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(74),i=r(78),o=r(41),s=r(58),a=r(67),u="en",c=function(){function t(){this.builder=new n.Builder,this.options={locale:u},this.initialized=!1,this.builder.register("DateTime",new o.DateTimeMaskBuilder),this.builder.register("Number",new s.NumberMaskBuilder),this.builder.register("Template",new a.TemplateMaskBuilder)}return t.prototype.init=function(t){var e=this;this.initialized||(t&&Object.keys(t).forEach(function(r){return e.options[r]=t[r]}),this.locale=new i.Locale(this.options.locale),this.initialized=!0)},t.prototype.getLocale=function(){return this.initialize(),this.locale},t.prototype.createDateTimeMask=function(t,e){this.initialize();var r=this.createMask("DateTime",t);return e=e||{},void 0!==e.timezoneOffset&&r.setTimezoneOffset(e.timezoneOffset),r},t.prototype.createNumberMask=function(t){return this.initialize(),this.createMask("Number",t)},t.prototype.createTemplateMask=function(t,e){this.initialize(),e=e||{};var r=this.createMask("Template",t,e);return void 0!==e.maskSaveLiteral&&r.setMaskSaveLiteral(e.maskSaveLiteral),r},t.prototype.createMask=function(t,e,r){return this.builder.build(t,e,this.locale)},t.prototype.initialize=function(){this.init()},t}();e.API=c},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(7),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.setTimezoneOffset=function(t){return this.getMask().setTimezoneOffset(t)},e.prototype.getTimezoneOffset=function(){return this.getMask().getTimezoneOffset()},e.prototype.setMinValue=function(t){this.getMask().setMinValue(t)},e.prototype.getMinValue=function(){return this.getMask().getMinValue()},e.prototype.setMaxValue=function(t){this.getMask().setMaxValue(t)},e.prototype.getMaxValue=function(){return this.getMask().getMaxValue()},e.prototype.getMask=function(){return this.mask},e}(i.Editor);e.DateTimeEditor=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(7),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.onKeydownHandler=function(e){if(t.prototype.onKeydownHandler.call(this,e),!(e.altKey||e.ctrlKey||e.shiftKey)){var r=this.el.selectionStart;switch(e.key){case"-":case"Backspace":case"Delete":r=this.mask.handleKey(e.key,r),null!==r&&(e.preventDefault(),this.updateInputElement(r))}}},e}(i.Editor);e.NumberEditor=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(7),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.setMaskSaveLiteral=function(t){this.getMask().setMaskSaveLiteral(t)},e.prototype.getMaskSaveLiteral=function(){return this.getMask().getMaskSaveLiteral()},e.prototype.getMask=function(){return this.mask},e}(i.Editor);e.TemplateEditor=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(10),o=r(17),s=r(30),a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.timezoneOffset=0,e}return n(e,t),e.prototype.setTimezoneOffset=function(t){this.timezoneOffset=t},e.prototype.getTimezoneOffset=function(){return this.timezoneOffset},e.prototype.setMinValue=function(t){this.minValue=t},e.prototype.getMinValue=function(){return this.minValue},e.prototype.setMaxValue=function(t){this.maxValue=t},e.prototype.getMaxValue=function(){return this.maxValue},e.prototype.buildValue=function(){var t,e=this.lastValue||0,r=new Date(e-60*this.getTimezoneOffset()*1e3),n=this.patterns.getPatternsValue(),i=o.isEmpty(n.year)?r.getUTCFullYear():n.year,s=o.isEmpty(n.month)?r.getUTCMonth():n.month,a=o.isEmpty(n.day)?r.getUTCDate():n.day,u=o.isEmpty(n.minutes)?r.getUTCMinutes():n.minutes,c=o.isEmpty(n.seconds)?r.getUTCSeconds():n.seconds,p=o.isEmpty(n.milliseconds)?r.getUTCMilliseconds():n.milliseconds;return t=o.isEmpty(n.hours)?r.getUTCHours():o.isEmpty(n.meridiem)?n.hours:0===n.meridiem&&12===n.hours?0:1===n.meridiem&&12===n.hours?12:1===n.meridiem?n.hours+12:n.hours,Date.UTC(i,s,a,t,u,c,p)+60*this.getTimezoneOffset()*1e3},e.prototype.applyValue=function(e){null!==e&&void 0!==e&&(e-=60*this.getTimezoneOffset()*1e3),t.prototype.applyValue.call(this,e)},e.prototype.validate=function(t){var e,r=this.getMinValue(),n=this.getMaxValue();if(!(e=!!o.isEmpty(t)||(o.isEmpty(r)||o.isEmpty(n)?o.isEmpty(r)?!!o.isEmpty(n)||t<=n:t>=r:t>=r&&t<=n))){var i=new s.OutOfRangeEvent(t);this.eventEmitter.emit(s.OutOfRangeEvent.eventName,i)}return e},e}(i.Mask);e.DateTimeMask=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(11),o=r(40),s=r(12),a=r(9),u=r(31),c=r(56),p=r(42),l=r(48),f=r(45),h=r(47),y=r(49),v=r(50),g=r(54),d=r(43),_=r(46),P=r(44),m=r(53),b=r(51),O=r(52),x=r(55),w=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.initPatternsBuilder=function(){return new s.PatternsBuilder(a.buildStaticPattern).registerPattern(new u.StringSelector("dd"),function(t,e){return new p.DayPattern(e,t)}).registerPattern(new u.StringSelector("d"),function(t,e){return new v.ShortDayPattern(e,t)}).registerPattern(new u.StringSelector("MMMM"),function(t,e){return new d.FullMonthPattern(e,t)}).registerPattern(new u.StringSelector("MM"),function(t,e){return new l.MonthPattern(e,t)}).registerPattern(new u.StringSelector("M"),function(t,e){return new g.ShortMonthPattern(e,t)}).registerPattern(new u.StringSelector("yyyy"),function(t,e){return new c.YearPattern(e,t)}).registerPattern(new u.StringSelector("HH"),function(t,e){return new f.HoursPattern(e,t)}).registerPattern(new u.StringSelector("H"),function(t,e){return new O.ShortHoursPattern(e,t)}).registerPattern(new u.StringSelector("hh"),function(t,e){return new P.Hours12Pattern(e,t)}).registerPattern(new u.StringSelector("h"),function(t,e){return new b.ShortHours12Pattern(e,t)}).registerPattern(new u.StringSelector("mm"),function(t,e){return new h.MinutesPattern(e,t)}).registerPattern(new u.StringSelector("m"),function(t,e){return new m.ShortMinutesPattern(e,t)}).registerPattern(new u.StringSelector("ss"),function(t,e){return new y.SecondsPattern(e,t)}).registerPattern(new u.StringSelector("s"),function(t,e){return new x.ShortSecondsPattern(e,t)}).registerPattern(new u.StringSelector("tt"),function(t,e){return new _.MeridiemPattern(e,t)})},e.prototype.createMask=function(t){return new o.DateTimeMask(t)},e}(i.MaskBuilder);e.DateTimeMaskBuilder=w},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),o=r(22),s=r(18),a=function(t){function e(e,r){return t.call(this,e,r,"day",{min:1,max:31,width:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return o.isCompleteDay(this.getText())},e.prototype.applyValue=function(t){if(null===t||void 0===t)this.setText("");else{var e=s.getDay(t);this.setText(this.formatDecimal(e))}},e}(i.FixedWidthPattern);e.DayPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(28),o=("январь,февраль,март,апрель,май,июнь,июль,август,сентябрь,октябрь,ноябрь,декабрь".split(","),function(t){function e(e,r){return t.call(this,e,r,"month",e.months.full)||this}return n(e,t),e.prototype.applyValue=function(t){var e;if(null===t||void 0===t)e="";else{var r=new Date(t),n=r.getUTCMonth();e=this.locale.months.full[n]}this.setText(e)},e}(i.ListPattern));e.FullMonthPattern=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),o=r(4),s=r(20),a=function(t){function e(e,r){return t.call(this,e,r,"hours",{min:1,max:12,width:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return o.isCompleteHours(this.getText())},e.prototype.applyValue=function(t){var e=s.getHours12(t);this.setText(this.formatDecimal(e))},e}(i.FixedWidthPattern);e.Hours12Pattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),o=r(4),s=r(19),a=function(t){function e(e,r){return t.call(this,e,r,"hours",{min:0,max:23,width:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return o.isCompleteHours(this.getText())},e.prototype.applyValue=function(t){if(null===t||void 0===t)this.setText("");else{var e=s.getHours(t);this.setText(this.formatDecimal(e))}},e}(i.FixedWidthPattern);e.HoursPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(28),o="AM",s="PM",a=function(t){function e(e,r){return t.call(this,e,r,"meridiem",[o,s])||this}return n(e,t),e.prototype.applyValue=function(t){var e;if(null===t||void 0===t)e="";else{e=new Date(t).getUTCHours()>=12?s:o}this.setText(e)},e}(i.ListPattern);e.MeridiemPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),o=r(23),s=function(t){function e(e,r){return t.call(this,e,r,"minutes",{min:0,max:59,width:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return o.isCompleteMinutes(this.getText())},e.prototype.applyValue=function(t){if(null===t||void 0===t)this.setText("");else{var e=new Date(t).getUTCMinutes();this.setText(this.formatDecimal(e.toString()))}},e}(i.FixedWidthPattern);e.MinutesPattern=s},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),o=r(24),s=r(21),a=function(t){function e(e,r){return t.call(this,e,r,"month",{min:1,max:12,width:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return o.isCompleteMonth(this.getText())},e.prototype.applyValue=function(t){if(null===t||void 0===t)this.setText("");else{var e=s.getMonth(t);this.setText(this.formatDecimal(e))}},e.prototype.getValue=function(){var e=t.prototype.getValue.call(this);return null===e?e:e-1},e}(i.FixedWidthPattern);e.MonthPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),o=r(25),s=function(t){function e(e,r){return t.call(this,e,r,"seconds",{min:0,max:59,width:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return o.isCompleteSeconds(this.getText())},e.prototype.applyValue=function(t){if(null===t||void 0===t)this.setText("");else{var e=new Date(t).getUTCSeconds();this.setText(this.formatDecimal(e.toString()))}},e}(i.FixedWidthPattern);e.SecondsPattern=s},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),o=r(22),s=r(18),a=function(t){function e(e,r){return t.call(this,e,r,"day",{min:1,max:31,minWidth:1,maxWidth:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return o.isCompleteDay(this.getText())},e.prototype.applyValue=function(t){this.setText(s.getDay(t))},e}(i.FloatWidthPattern);e.ShortDayPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(4),o=r(2),s=r(20),a=function(t){function e(e,r){return t.call(this,e,r,"hours",{min:1,max:12,minWidth:1,maxWidth:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return i.isCompleteHours(this.getText())},e.prototype.applyValue=function(t){if(null===t||void 0===t)this.setText("");else{var e=s.getHours12(t);this.setText(e)}},e}(o.FloatWidthPattern);e.ShortHours12Pattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(4),o=r(2),s=r(19),a=function(t){function e(e,r){return t.call(this,e,r,"hours",{min:0,max:23,minWidth:1,maxWidth:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return i.isCompleteHours(this.getText())},e.prototype.applyValue=function(t){if(null===t||void 0===t)this.setText("");else{var e=s.getHours(t);this.setText(e)}},e}(o.FloatWidthPattern);e.ShortHoursPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),o=r(23),s=function(t){function e(e,r){return t.call(this,e,r,"minutes",{min:0,max:59,minWidth:1,maxWidth:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return o.isCompleteMinutes(this.getText())},e.prototype.applyValue=function(t){if(null===t||void 0===t)this.setText("");else{var e=new Date(t).getUTCMinutes();this.setText(e.toString())}},e}(i.FloatWidthPattern);e.ShortMinutesPattern=s},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),o=r(24),s=r(21),a=function(t){function e(e,r){return t.call(this,e,r,"month",{min:1,max:12,minWidth:1,maxWidth:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return o.isCompleteMonth(this.getText())},e.prototype.applyValue=function(t){this.setText(s.getMonth(t))},e.prototype.getValue=function(){var e=t.prototype.getValue.call(this);return null===e?e:e-1},e}(i.FloatWidthPattern);e.ShortMonthPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),o=r(25),s=function(t){function e(e,r){return t.call(this,e,r,"seconds",{min:0,max:59,minWidth:1,maxWidth:2})||this}return n(e,t),e.prototype.getIsComplete=function(){return o.isCompleteSeconds(this.getText())},e.prototype.applyValue=function(t){if(null===t||void 0===t)this.setText("");else{var e=new Date(t).getUTCSeconds();this.setText(e.toString())}},e}(i.FloatWidthPattern);e.ShortSecondsPattern=s},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),o=function(t){function e(e,r){return t.call(this,e,r,"year",{min:1,max:9999,width:4})||this}return n(e,t),e.prototype.applyValue=function(t){if(null===t||void 0===t)this.setText("");else{var e=new Date(t).getUTCFullYear();this.setText(this.formatDecimal(e.toString()))}},e}(i.FixedWidthPattern);e.YearPattern=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(10),o=r(86),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.buildValue=function(){return this.patterns.getInputPattern().getValue()},e.prototype.handleKey=function(t,e){var r=null,n=this.getText();switch(t){case"-":r=this.tryToggleSign(e,n);break;case"Backspace":r=1===e&&"-"===n.charAt(0)?this.tryToggleSign(e,n):r;break;case"Delete":r=0===e&&"-"===n.charAt(0)?this.tryToggleSign(e,n):r}return r},e.prototype.restorePosition=function(e,r){for(var n=this.locale.numberGroupSeparator,i=e.substring(0,r),o=e.substr(r),s=r;-1!==i.indexOf(n);)i=i.replace(n,""),s-=n.length;for(;-1!==o.indexOf(n);)o=o.replace(n,"");return t.prototype.restorePosition.call(this,i+o,s)},e.prototype.setNextPatternValue=function(t){if(this.patterns.getIsValid()){var e=this.value.getValue(),r=o.restoreNumberPrecision(e,e+1);this.value.setValue(r,{update:!0})}return this.patterns.getInputPatternSelection()},e.prototype.setPrevPatternValue=function(t){if(this.patterns.getIsValid()){var e=this.value.getValue(),r=o.restoreNumberPrecision(e,e-1);this.value.setValue(r,{update:!0})}return this.patterns.getInputPatternSelection()},e.prototype.getInvalidText=function(){var t=this.value.getValue(),e=void 0!==t&&null!==t,r=null,n=this.locale;return e&&isNaN(t)?r=n.NaNSymbol:e&&!isFinite(t)&&(r=t===Number.POSITIVE_INFINITY?n.positiveInfinitySymbol:n.negativeInfinitySymbol),r},e.prototype.updateInvalid=function(){var t=this.value.getValue(),e=void 0!==t&&null!==t;e&&isNaN(t)?this.setInvalid(!0):e&&!isFinite(t)?this.setInvalid(!0):this.setInvalid(!1)},e.prototype.tryToggleSign=function(t,e){var r=this.patterns.getInputPattern();if(!r)return null;r.toggleSign(),this.patterns.updateText();var n=this.restorePosition(e,t);return this.updateValue(),n},e}(i.Mask);e.NumberMask=s},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(57),o=r(11),s=r(12),a=r(9),u=r(75),c=r(60),p=r(59),l=r(61),f=r(62),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.createMask=function(t){return new i.NumberMask(t)},e.prototype.initPatternsBuilder=function(){return new s.PatternsBuilder(a.buildStaticPattern).registerPattern(new u.RegExpSelector(/n\d*/i),c.buildNumberPattern).registerPattern(new u.RegExpSelector(/c\d*/i),p.buildCurrencyPattern).registerPattern(new u.RegExpSelector(/p\d*/),l.buildPercentPattern).registerPattern(new u.RegExpSelector(/P\d*/),f.buildPercentTransformedPattern)},e}(o.MaskBuilder);e.NumberMaskBuilder=h},function(t,e,r){"use strict";function n(t,e){var r=/c(\d*)/i,n=t.match(r),o=n[1];return new i.CurrencyPattern(e,t,0===o.length?e.currencyDecimalDigits:parseInt(o,10))}Object.defineProperty(e,"__esModule",{value:!0});var i=r(63);e.buildCurrencyPattern=n},function(t,e,r){"use strict";function n(t,e){var r=/n(\d*)/i,n=t.match(r),o=n[1];return new i.NumberPattern(e,t,0===o.length?e.numberDecimalDigits:parseInt(o,10))}Object.defineProperty(e,"__esModule",{value:!0});var i=r(64);e.buildNumberPattern=n},function(t,e,r){"use strict";function n(t,e){var r=/p(\d*)/,n=t.match(r),o=n[1];return new i.PercentPattern(e,t,0===o.length?e.percentDecimalDigits:parseInt(o,10))}Object.defineProperty(e,"__esModule",{value:!0});var i=r(26);e.buildPercentPattern=n},function(t,e,r){"use strict";function n(t,e){var r=/P(\d*)/,n=t.match(r),o=n[1];return new i.PercentTransformedPattern(e,t,0===o.length?e.percentDecimalDigits:parseInt(o,10))}Object.defineProperty(e,"__esModule",{value:!0});var i=r(65);e.buildPercentTransformedPattern=n},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(8),o=r(84),s=r(80),a=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return i.parser=new o.CurrencyParser(e),i.formatter=new s.CurrencyFormatter(e),i}return n(e,t),e}(i.BaseNumberPattern);e.CurrencyPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(8),o=r(33),s=r(5),a=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return i.parser=new o.NumberParser(e),i.formatter=new s.NumberFormatter(e),i}return n(e,t),e}(i.BaseNumberPattern);e.NumberPattern=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(26),o=r(17),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.applyValue=function(e){o.isEmpty(e)||!isFinite(e)||isNaN(e)||(e*=100),t.prototype.applyValue.call(this,e)},e.prototype.getValue=function(){var e=t.prototype.getValue.call(this);return o.isEmpty(e)||!isFinite(e)||isNaN(e)||(e/=100),e},e}(i.PercentPattern);e.PercentTransformedPattern=s},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(10),o=r(29),s=r(1),a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.maskSaveLiteral=!0,e}return n(e,t),e.prototype.setMaskSaveLiteral=function(t){this.maskSaveLiteral=t},e.prototype.applyValue=function(t){t=t||"";var e=this.patterns,r=e.getList();if(this.getMaskSaveLiteral())r.forEach(function(e,r){return e.applyValue(t.substr(r,1))});else{var n=0;r.filter(function(t){return!(t instanceof o.StaticPattern)}).forEach(function(e){return e.applyValue(t.substr(n++,1))})}this.patterns.updateText()},e.prototype.getMaskSaveLiteral=function(){return this.maskSaveLiteral},e.prototype.buildValue=function(){var t=this;return this.patterns.getList().filter(function(e){return!!t.getMaskSaveLiteral()||e instanceof s.TemplatePattern}).map(function(t){return t.getText()}).join("")},e}(i.Mask);e.TemplateMask=a},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(11),o=r(12),s=r(66),a=r(9),u=r(31),c=r(70),p=r(72),l=r(69),f=r(71),h=r(68),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.initPatternsBuilder=function(){return new o.PatternsBuilder(a.buildStaticPattern).registerPattern(new u.StringSelector("#"),function(t,e){return new p.SignTemplatePattern(e,t,!1)}).registerPattern(new u.StringSelector("9"),function(t,e){return new c.DigitTemplatePattern(e,t,!1)}).registerPattern(new u.StringSelector("0"),function(t,e){return new c.DigitTemplatePattern(e,t,!0)}).registerPattern(new u.StringSelector("c"),function(t,e){return new l.CharTemplatePattern(e,t,!1)}).registerPattern(new u.StringSelector("C"),function(t,e){return new l.CharTemplatePattern(e,t,!0)}).registerPattern(new u.StringSelector("l"),function(t,e){return new f.LetterTemplatePattern(e,t,!1)}).registerPattern(new u.StringSelector("L"),function(t,e){return new f.LetterTemplatePattern(e,t,!0)}).registerPattern(new u.StringSelector("a"),function(t,e){return new h.AlphanumericTemplatePattern(e,t,!1)}).registerPattern(new u.StringSelector("A"),function(t,e){return new h.AlphanumericTemplatePattern(e,t,!0)})},e.prototype.createMask=function(t){return new s.TemplateMask(t)},e}(i.MaskBuilder);e.TemplateMaskBuilder=y},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(1),o=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return i.regexpLetter=new RegExp("[0-9"+e.letter+"]"),i}return n(e,t),e.prototype.validateInput=function(t){return this.regexpLetter.test(t)},e}(i.TemplatePattern);e.AlphanumericTemplatePattern=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(1),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.validateInput=function(t){return/^.*$/.test(t)},e}(i.TemplatePattern);e.CharTemplatePattern=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(1),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.validateInput=function(t){return/\d/.test(t)},e}(i.TemplatePattern);e.DigitTemplatePattern=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(1),o=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return i.regexpLetter=new RegExp("["+e.letter+"]"),i}return n(e,t),e.prototype.validateInput=function(t){return this.regexpLetter.test(t)},e}(i.TemplatePattern);e.LetterTemplatePattern=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(1),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.validateInput=function(t){return/^[\d+-]$/.test(t)},e}(i.TemplatePattern);e.SignTemplatePattern=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(87),i=r(35),o=function(){function t(){this.list=[]}return t.prototype.setList=function(t){this.list=t.slice()},t.prototype.getList=function(){return this.list},t.prototype.getIsComplete=function(){return this.list.every(function(t){return t.getIsComplete()})},t.prototype.getIsValid=function(){return this.list.every(function(t){return t.getIsValid()})},t.prototype.getIsEmpty=function(){return this.list.every(function(t){return t.getIsEmpty()})},t.prototype.setInput=function(t,e){var r=this.getText(),i=n.strDiff(r,t,e),o=e||0;switch(i.operation){case n.DiffOperation.Insert:1===i.dst.length&&this.isSeparator(i.dst,i.position)?(o=this.getNextPatternOffset(e),!1):o=this.inputInsert(i.position,i.dst);break;case n.DiffOperation.Change:o=this.inputChange(i.position,i.src,i.dst);break;case n.DiffOperation.Delete:o=this.inputDelete(i.position,i.src)}return o},t.prototype.isSeparator=function(t,e){var r=!1,n=this.getPatternByPositionLeft(e),i=this.list.indexOf(n),o=this.list[i+1];return o&&!1===o.canActivate()&&(r=t===o.getText()),r},t.prototype.getNextPatternOffset=function(t){var e=t,r=this.getPatternByPositionLeft(t),n=this.getNextPattern(r);return n&&(e=this.getPatternOffset(n)),e},t.prototype.getNextPattern=function(t){var e=this.list.indexOf(t);return this.list.slice(e+1).filter(function(t){return t.canActivate()})[0]},t.prototype.inputInsert=function(t,e){var r=this.getInputPatternByPosition(t);if(!r)return t;var n=r.getText(),i=this.getPatternOffset(r),o=n.substring(0,t-i),s=n.substring(t-i),a=o+e+s;if(1===e.length&&t>=i&&t<i+n.length&&!r.canInputChar(e))return t;for(var u,c=a,p="",l=this,f=this.list.indexOf(r);f<this.list.length;f++){if("break"===function(t){var e=l.list[t];return e===r||e.getIsEmpty()?(e.setInput(c,function(t,r){c=t,r&&r.length&&(p+=r,u=e)}),0===c.length?"break":void 0):"break"}(f))break}if(u){this.setActive(u);var h="",y=o+e;u.finalizeInput()&&r===u&&(p=y=u.getText());for(var v=this.list.slice(this.list.indexOf(r),this.list.indexOf(u)+1).map(function(t){return t.getText()}).join(""),f=0,g=0;f<y.length;f++){var d=y.substr(f,1),_=p.indexOf(d,g);-1!==_&&(h+=d,g=_+1)}if(t=i+h.split("").reduce(function(t,e){var r=v.indexOf(e,t);return-1!==r?r+1:t},0),u.getIsComplete()){this.getPatternOffset(u)+u.getText().length===t&&(t=this.forwardPosition(t))}}return t},t.prototype.forwardPosition=function(t){var e=this.getPatternByPositionLeft(t),r=this.getPatternByPositionRight(t),n=t;if(e!==r&&!r.canActivate()){for(var i=this.list.indexOf(r),o=void 0,s=i+1;s<this.list.length;s++)if(this.list[s].canActivate()){o=this.list[s];break}o&&(n=this.getPatternOffset(o))}return n},t.prototype.inputChange=function(t,e,r){var n,i=this.getPatternByPositionRight(t),o=this.getPatternByPositionLeft(t+e.length),s=i.getText(),a=this.getPatternOffset(i),u=s.substring(0,t-a),c=s.substring(t-a+e.length),p=u+r+c,l="";if(i===o)n=i,i.setInput(p,function(t,e){e&&e.length&&(l=e)}),i.getIsEmpty()&&(t=a);else for(var f=this.list.indexOf(i),h=this.list.indexOf(o),y=p,v=this,g=f;g<=h;g++)!function(t){var e=v.list[t];e.setInput(y,function(t,r){y=t,r&&r.length&&(l+=r,n=e)})}(g);if(n){this.setActive(n);for(var d=this.list.slice(this.list.indexOf(i),this.list.indexOf(n)+1).map(function(t){return t.getText()}).join(""),_="",P=u+r,g=0,m=0;g<P.length;g++){var b=P.substr(g,1),O=l.indexOf(b,m);-1!==O&&(_+=b,m=O+1)}t=a+_.split("").reduce(function(t,e){var r=d.indexOf(e,t);return-1!==r?r+1:t},0)}return t},t.prototype.inputDelete=function(t,e){var r=this.getPatternByPositionRight(t),n=this.getPatternByPositionLeft(t+e.length),o=this.list.indexOf(r),s=this.list.indexOf(n);if(r===n){var a=r.getText(),u=this.getPatternOffset(r),c=a.substring(0,t-u),p=a.substring(t-u+e.length);this.setActive(r);var l="";r.setInput(c+p,function(t,e){l=e}),t=r.canActivate()&&r.getIsEmpty()?u:u+i.restorePosition(a,l,t-u)}else{var a=n.getText(),u=this.getPatternOffset(n),f=a.substring(t-u+e.length);n.setInput(f),a=r.getText(),u=this.getPatternOffset(r),f=a.substring(0,t-u),r.setInput(f),this.list.slice(o+1,s).forEach(function(t){return t.setInput("")}),r.canActivate()&&r.getIsEmpty()&&(t=u),this.setActive(r)}return t},t.prototype.setNextPatternValue=function(t){var e=null,r=this.getPatternByPositionRight(t);if(r.canActivate()){var n=r.getNextInput();r.setInput(n),this.clearActive(),this.updateText();var i=this.getPatternOffset(r);e={start:i,end:i+r.getText().length}}return e},t.prototype.setPrevPatternValue=function(t){var e=null,r=this.getPatternByPositionRight(t);if(r.canActivate()){var n=r.getPrevInput();r.setInput(n),this.clearActive(),this.updateText();var i=this.getPatternOffset(r);e={start:i,end:i+r.getText().length}}return e},t.prototype.getInputPosition=function(t){for(var e,r,n=this.getInputPatternByPosition(t),i=this.list.indexOf(n),o=this.list.slice(0,i+1).filter(function(t){return t.canActivate()}).reverse(),s=0;s<o.length;s+=1)if(!o[s].getIsEmpty()){r=o[s];break}if(r){var a=this.getPatternOffset(r),u=r.getText();e=t>a+u.length?a+u.length:t<a?a:t}else r=o.pop(),e=this.getPatternOffset(r);return e},t.prototype.clearActive=function(){this.list.forEach(function(t){return t.setIsActive(!1)})},t.prototype.setActive=function(t){this.list.forEach(function(e){return e.setIsActive(e===t)})},t.prototype.getText=function(){return this.list.map(function(t){return t.getText()}).join("")},t.prototype.getPatternByPosition=function(t){var e=[];return this.list.forEach(function(t){t.getText().split("").forEach(function(r){return e.push(t)})}),e[t]},t.prototype.getPatternsByPosition=function(t){var e=[];return this.list.forEach(function(t){t.getText().split("").forEach(function(r){return e.push(t)})}),[e.slice(0,t).filter(function(t){return null!==t}).pop(),e.slice(t).filter(function(t){return null!==t}).reverse().pop()]},t.prototype.getInputPatternByPosition=function(t){var e,r=[];this.list.forEach(function(t){t.getText().split("").forEach(function(e){return r.push(t)})});var n=r.slice(0,t).filter(function(t){return null!==t}).reverse(),i=r.slice(t).filter(function(t){return null!==t}),o=i[0];if(o&&o.canActivate())e=o;else if(n[0]&&n[0].canActivate())o=n[0],e=o.canActivate()?o:i[0];else for(var s=0;s<i.length;s++)if(i[s].canActivate()){e=i[s];break}return e},t.prototype.getPatternByPositionRight=function(t){var e=this.getPatternsByPosition(t);return e[1]||e[0]},t.prototype.getPatternByPositionLeft=function(t){var e=this.getPatternsByPosition(t);return e[0]||e[1]},t.prototype.getPatternOffset=function(t){for(var e=0,r=0;r<this.list.length&&this.list[r]!==t;r++)e+=this.list[r].getText().length;return e},t.prototype.getInputPatternSelection=function(){var t=this.getInputPattern(),e=this.getPatternOffset(t);return{start:e,end:e+t.getText().length}},t.prototype.getInputPattern=function(){for(var t=null,e=0;e<this.list.length;e+=1){var r=this.list[e];if(r.canActivate()){t=r;break}}return t},t.prototype.getPatternsValue=function(){var t={};return this.list.forEach(function(e){var r=e.getName();r&&(t[r]=e.getValue())}),t},t.prototype.updateText=function(){this.list.forEach(function(t){return t.updateText()})},t.prototype.updateDisplay=function(){this.setActive(null),this.updateText()},t.prototype.dispose=function(){this.list.length=0},t}();e.PatternsList=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){this.builders={}}return t.prototype.build=function(t,e,r){return this.builders[t].build(e,r)},t.prototype.register=function(t,e){this.builders[t]=e},t}();e.Builder=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.regexp=t}return t.prototype.match=function(t){var e,r,n=null,i=t.match(this.regexp);return i&&(e=i[0],r=t.indexOf(e),n={text:e,start:r,end:r+e.length}),n},t}();e.RegExpSelector=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(32),i=function(){function t(){this.eventEmitter=new n.EventEmitter}return t.prototype.setValue=function(t,e){var r=this.value!==t;"number"==typeof t&&"number"==typeof this.value&&isNaN(t)&&isNaN(this.value)&&(r=!1);var n=this.value;if(this.value=t,r){var i={oldValue:n,newValue:t,params:e||{}};this.eventEmitter.emit("change",i)}},t.prototype.getValue=function(){return this.value},t.prototype.onChange=function(t){return this.eventEmitter.on("change",t)},t.prototype.dispose=function(){this.eventEmitter.dispose(),this.value=null},t}();e.ValueModel=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(36),i=r(37),o=r(39),s=r(38),a=function(){function t(){}return t.dateTime=function(e,r,n){var o=t.api.createDateTimeMask(r,n);return new i.DateTimeEditor(e,o)},t.template=function(e,r,n){var i=t.api.createTemplateMask(r,n);return new o.TemplateEditor(e,i)},t.number=function(e,r){var n=t.api.createNumberMask(r);return new s.NumberEditor(e,n)},t}();a.api=new n.API,e.Mask=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(33),i=r(5),o=r(79),s=function(){function t(t){var e=this;this.numberParser=new n.NumberParser(this),this.numberFormatter=new i.NumberFormatter(this);var r=new o.Localization,s=r.getLocalization(t);Object.keys(s).forEach(function(t){return e[t]=s[t]})}return t}();e.Locale=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(83),i=r(82),o=function(){function t(){}return t.prototype.getLocalization=function(t){t=t.toUpperCase();var e;switch(t){case"RU":case"RU-RU":e=new n.Ru;break;case"EN":case"EN-US":e=new i.En;break;default:e=this.getDefaultLocalization()}return e},t.prototype.getDefaultLocalization=function(){return new n.Ru},t}();e.Localization=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(5),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.getDecimalSeparator=function(){return this.locale.currencyDecimalSeparator},e.prototype.getNegativePattern=function(){return this.locale.currencyNegativePattern},e.prototype.getPositivePattern=function(){return this.locale.currencyPositivePattern},e.prototype.getGroupSeparator=function(){return this.locale.currencyGroupSeparator},e.prototype.getCurrencySymbol=function(){return this.locale.currencySymbol},e.prototype.getWrapper=function(t){var e=this;return this.getPattern(t.isNegative).split(/c/i).map(function(t){return t.replace("$",e.getCurrencySymbol())})},e}(i.NumberFormatter);e.CurrencyFormatter=o},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(5),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.getDecimalSeparator=function(){return this.locale.percentDecimalSeparator},e.prototype.getNegativePattern=function(){return this.locale.percentNegativePattern},e.prototype.getPositivePattern=function(){return this.locale.percentPositivePattern},e.prototype.getGroupSeparator=function(){return this.locale.percentGroupSeparator},e.prototype.getPercentSymbol=function(){return this.locale.percentSymbol},e.prototype.getWrapper=function(t){var e=this;return this.getPattern(t.isNegative).split(/p/i).map(function(t){return t.replace("%",e.getPercentSymbol())})},e}(i.NumberFormatter);e.PercentFormatter=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){this.letter="a-zA-Z",this.numberDecimalDigits=2,this.numberDecimalSeparator=".",this.numberGroupSeparator=",",this.numberGroupSize=3,this.numberNegativePattern="-n",this.numberPositivePattern="n",this.percentDecimalDigits=2,this.percentDecimalSeparator=".",this.percentGroupSeparator=",",this.percentSymbol="%",this.percentNegativePattern="-p %",this.percentPositivePattern="p %",this.currencyDecimalDigits=2,this.currencyDecimalSeparator=".",this.currencyGroupSeparator=",",this.currencySymbol="$",this.currencyNegativePattern="($c)",this.currencyPositivePattern="$c",this.negativeInfinitySymbol="-Infinity",this.positiveInfinitySymbol="Infinity",this.NaNSymbol="NaN",this.months={full:"January,February,March,April,May,June,July,August,September,October,November,December".split(",")}}return t}();e.En=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){this.letter="а-яА-Яa-zA-Z",this.numberDecimalDigits=2,this.numberDecimalSeparator=",",this.numberGroupSeparator=" ",this.numberGroupSize=3,this.numberNegativePattern="-n",this.numberPositivePattern="n",this.percentDecimalDigits=2,this.percentDecimalSeparator=",",this.percentGroupSeparator=" ",this.percentSymbol="%",this.percentNegativePattern="-p %",this.percentPositivePattern="p %",this.currencyDecimalDigits=2,this.currencyDecimalSeparator=",",this.currencyGroupSeparator=" ",this.currencySymbol="р.",this.currencyNegativePattern="-c$",this.currencyPositivePattern="c$",this.negativeInfinitySymbol="-бесконечность",this.positiveInfinitySymbol="бесконечность",this.NaNSymbol="NaN",this.months={full:"январь,февраль,март,апрель,май,июнь,июль,август,сентябрь,октябрь,ноябрь,декабрь".split(",")}}return t}();e.Ru=n},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(13),o=r(16),s=r(14),a=r(15),u=function(t){function e(e){var r=t.call(this,e)||this;return r.locale=e,r.integralPartParser=new o.IntegralPartParser(e.currencyGroupSeparator,e.currencyDecimalSeparator),r.decimalSeparatorParser=new s.DecimalSeparatorParser(e.currencyDecimalSeparator),r.fractionalPartParser=new a.FractionalPartParser,r}return n(e,t),e.prototype.getDecimalSeparator=function(){return this.locale.currencyDecimalSeparator},e}(i.BaseNumberParser);e.CurrencyParser=u},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=r(13),o=r(16),s=r(14),a=r(15),u=function(t){function e(e){var r=t.call(this,e)||this;return r.locale=e,r.integralPartParser=new o.IntegralPartParser(e.percentGroupSeparator,e.percentDecimalSeparator),r.decimalSeparatorParser=new s.DecimalSeparatorParser(e.percentDecimalSeparator),r.fractionalPartParser=new a.FractionalPartParser,r}return n(e,t),e.prototype.getDecimalSeparator=function(){return this.locale.percentDecimalSeparator},e}(i.BaseNumberParser);e.PercentParser=u},function(t,e,r){"use strict";function n(t,e){var r=t.toString(10).split("."),n=r[1],i=void 0===n?"":n;return+e.toFixed(i.length)}Object.defineProperty(e,"__esModule",{value:!0}),e.restoreNumberPrecision=n},function(t,e,r){"use strict";function n(t,e,r){var n=c.None,o={operation:n};if(t===e)o={operation:c.None};else if(0===e.length)o={operation:c.Delete,src:t,position:0};else{var s=a(t,e),p=u(t.substr(s),e.substr(s)),l=void 0,f=void 0,h=s;0===s&&0===p?(n=c.Change,l=t,f=e):s+p<t.length?(n=c.Change,l=t.substr(s,t.length-s-p),f=e.substr(s,e.length-s-p),0===f.length&&l.length>0&&(f=void 0,n=c.Delete)):t.length>e.length?(n=c.Delete,l=t.substr(s,t.length-s-p)):t.length<e.length?(n=c.Insert,f=e.substr(s,e.length-s-p)):(n=c.Change,l=t.substr(s,t.length-s-p),f=e.substr(s,e.length-s-p)),o={operation:n,src:l,dst:f,position:h}}return i(t,e,o,r)}function i(t,e,r,n){switch(r.operation){case c.Insert:r=o(t,e,r,n);break;case c.Delete:r=s(t,e,r,n)}return r}function o(t,e,r,n){for(var i=null,o=r.position;o>=0;o-=r.dst.length){var s=o-r.dst.length;if(e.substring(s,o)===r.dst&&s===n-r.dst.length){i=s;break}}return null!==i&&(r.position=i),r}function s(t,e,r,n){for(var i=null,o=r.position;o>=0;o-=r.src.length){var s=o-r.src.length;if(t.substring(s,o)===r.src){if(!(s>=n))break;i=s}}return null!==i&&(r.position=i),r}function a(t,e){for(var r=Math.min(t.length,e.length),n=0,i=0;i<r&&t[i]===e[i];i+=1)n++;return n}function u(t,e){for(var r=t.split("").reverse(),n=e.split("").reverse(),i=0,o=Math.min(r.length,n.length),s=0;s<o&&r[s]===n[s];s+=1)i++;return i}Object.defineProperty(e,"__esModule",{value:!0});var c;!function(t){t[t.Insert=0]="Insert",t[t.Delete=1]="Delete",t[t.Change=2]="Change",t[t.None=3]="None"}(c=e.DiffOperation||(e.DiffOperation={})),e.strDiff=n}])});
;(function(){
window["InfinniUI"] = window["InfinniUI"] || {};
window["InfinniUI"]["Template"] = window["InfinniUI"]["Template"] || {};
window["InfinniUI"]["Template"]["controls/loaderIndicator/template.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div id="loaderIndicator" style="display:none;">\n    <div class="cssload-spin-box"></div>\n</div>';}return __p}
window["InfinniUI"]["Template"]["linkView/template/dialog.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) { function dialogWidthClass(widthValue){    if(widthValue == 'small'){        return 'modal-sm';    }    if(widthValue == 'large'){        return 'modal-lg';    }    return '';}function dialogWidthValue(widthValue){    if(widthValue.search(/\d/) == 0){        return 'width:' + widthValue + ';';    }else{        return '';    }} ;__p += '\n\n<div class="modal container modal-scrollable" id="full-width" tabindex="-1" role="dialog" aria-hidden="false">\n    <div class="modal-dialog ' +((__t = ( dialogWidthClass(dialogWidth) )) == null ? '' : __t) +'" style="' +((__t = ( dialogWidthValue(dialogWidth) )) == null ? '' : __t) +'">\n        <div class="modal-content">\n            <div class="modal-header">\n                <button type="button" class="close firstfocuselementinmodal pl-close-modal">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n                <h4 class="modal-title"></h4>\n            </div>\n            <div class="modal-body"></div>\n        </div>\n    </div>\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/buttonEdit/template/textBoxArea.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<label class="pl-control-label" for="' +__e( guid ) +'"></label>\r\n<textarea class="pl-control pl-control-editor pl-editor form-control pl-text-area-input" id="' +__e( guid ) +'"></textarea>\r\n\r\n<div class="pl-control-hint-text help-block hidden"></div>\r\n<div class="pl-control-error-text help-block hidden"></div>\r\n<div class="pl-control-warning-text help-block hidden"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/buttonEdit/template/textBoxInput.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<label class="pl-control-label" for="' +__e( guid ) +'"></label>\r\n\r\n<div class="input-group pl-button-edit-group">\r\n    <input class="pl-control form-control pl-control-editor pl-editor pl-text-box-input pl-button-edit-group__control" type="text" id="' +__e( guid ) +'">\r\n    <span class="pl-button-edit-button pl-button-edit-button_clear input-group-addon">\r\n        <i class="pl-button-edit-button__icon pl-button-edit-button__icon_clear fa fa-times"></i>\r\n    </span>\r\n    <span class="pl-button-edit-button pl-button-edit-button_action input-group-addon">\r\n        <i class="pl-button-edit-button__icon pl-button-edit-button__icon_action fa"></i>\r\n    </span>\r\n</div>\r\n\r\n<div class="pl-control-hint-text help-block hidden"></div>\r\n<div class="pl-control-error-text help-block hidden"></div>\r\n<div class="pl-control-warning-text help-block hidden"></div>\r\n\r\n\r\n';}return __p}
window["InfinniUI"]["Template"]["controls/checkBox/template/checkBox.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<div class="checkbox">\r\n    <label>\r\n        <input type="checkbox" id="' +__e( guid ) +'">\r\n        <span class="checkbox-custom-body"></span>\r\n        <span class="checkbox-label"></span>\r\n    </label>\r\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/comboBox/template/combobox.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<label class="pl-control-label" for="' +__e( guid ) +'"></label>\n\n<div class="input-group control-wrap">\n    <div class="pl-control form-control" id="' +__e( guid ) +'">\n        <div class="pl-combobox__value"></div>\n    </div>\n    <span class="pl-combobox__clear input-group-addon"><i class="fa fa-times"></i></span>\n    <span class="pl-combobox__grip input-group-addon"><i class="fa fa-chevron-down"></i></span>\n</div>\n';}return __p}
window["InfinniUI"]["Template"]["controls/contextMenu/template/contextMenu.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {__p += '<div class="pl-popup-button__dropdown">\n    <ul class="pl-popup-button__items dropdown-menu">\n        '; items.forEach(function(item, index){;__p += '\n        <li class="pl-popup-button__item"></li>\n        ';});;__p += '\n    </ul>\n</div>\n';}return __p}
window["InfinniUI"]["Template"]["controls/dataGrid/template/dataGrid.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-datagrid__head">\n    <div class="pl-datagrid-container pl-datagrid-container_head">\n        <table class="pl-datagrid-table pl-datagrid-table_head table">\n            <thead>\n            <tr class="pl-datagrid-row pl-datagrid-row_first">\n                <td class="pl-datagrid-row__cell pl-datagrid-row__cell_width pl-datagrid-row__cell_checker" style=""></td>\n            </tr>\n            <tr class="pl-datagrid-row pl-datagrid-row_header">\n                <th class="pl-datagrid-row__cell pl-datagrid-row__cell_toggle">\n                    <div class="pl-datagrid-toggle  pl-datagrid-toggle_all">\n                        <input class="pl-datagrid-toggle__button" type="checkbox"><span></span>\n                    </div>\n                </th>\n            </tr>\n            </thead>\n        </table>\n    </div>\n</div>\n<div class="pl-datagrid__body">\n    <table class="pl-datagrid-table pl-datagrid-table_body table">\n        <tbody>\n        <tr class="pl-datagrid-row pl-datagrid-row_first">\n            <td class="pl-datagrid-row__cell pl-datagrid-row__cell_width pl-datagrid-row__cell_checker" style=""></td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n\n';}return __p}
window["InfinniUI"]["Template"]["controls/dataGrid/template/dataGridWithoutScroll.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-datagrid__body">\n    <table class="pl-datagrid-table pl-datagrid-table_body table">\n        <thead>\n        <tr class="pl-datagrid-row pl-datagrid-row_first">\n            <td class="pl-datagrid-row__cell pl-datagrid-row__cell_width pl-datagrid-row__cell_checker" style=""></td>\n        </tr>\n        <tr class="pl-datagrid-row pl-datagrid-row_header">\n            <th class="pl-datagrid-row__cell pl-datagrid-row__cell_toggle">\n                <div class="pl-datagrid-toggle pl-datagrid-toggle_all">\n                    <input class="pl-datagrid-toggle__button" type="checkbox"><span></span>\n                </div>\n            </th>\n        </tr>\n        </thead>\n        <tbody>\n        </tbody>\n    </table>\n</div>\n';}return __p}
window["InfinniUI"]["Template"]["controls/dataGrid/template/headerCell.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<th class="pl-datagrid-row__cell"></th>';}return __p}
window["InfinniUI"]["Template"]["controls/dataGrid/template/sizeCell.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<td class="pl-datagrid-row__cell pl-datagrid-row__cell_width" style=""></td>';}return __p}
window["InfinniUI"]["Template"]["controls/dataNavigation/template/dataNavigation.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-data-navigation-size">\r\n\r\n    <div class="pl-page-size">\r\n\r\n    </div>\r\n</div>\r\n\r\n<div class="pl-data-navigation-pager">\r\n    <nav>\r\n        <ul class="pagination">\r\n\r\n        </ul>\r\n    </nav>\r\n</div>\r\n\r\n';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/date.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<label class="pl-control-label" for="' +__e( guid ) +'"></label>\r\n\r\n\r\n<div class="input-group">\r\n    <input class="pl-editor pl-control form-control pl-datepicker-input" type="text" id="' +__e( guid ) +'" >\r\n\r\n    <span class="pl-datepicker-calendar input-group-addon"><i class="fa fa-calendar"></i></span>\r\n</div>\r\n\r\n\r\n\r\n<div class="pl-control-hint-text help-block hidden"></div>\r\n<div class="pl-control-error-text help-block hidden"></div>\r\n<div class="pl-control-warning-text help-block hidden"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/dateTime.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<label class="pl-control-label" for="' +__e( guid ) +'"></label>\r\n\r\n<div class="input-group">\r\n    <input class="pl-editor pl-control form-control pl-datepicker-input" type="text" id="' +__e( guid ) +'" >\r\n    <span class="pl-datepicker-calendar input-group-addon"><i class="fa fa-calendar"></i></span>\r\n</div>\r\n\r\n<div class="pl-control-hint-text help-block hidden"></div>\r\n<div class="pl-control-error-text help-block hidden"></div>\r\n<div class="pl-control-warning-text help-block hidden"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/select.date.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="backdrop"></div>\n\n\n<div class="datepicker-date pl-dropdown-content">\n    <div class="days"></div>\n    <div class="months" style="display: none;"></div>\n    <div class="years"  style="display: none;"></div>\n    <div class="pl-datepicker-footer btn-group btn-group-sm" role="group">\n        <a class="today today-date btn btn-default">' +((__t = (InfinniUI.localized.strings.DateTimePicker.today)) == null ? '' : __t) +'</a>\n        <a class="datepicker-clear btn btn-default">' +((__t = (InfinniUI.localized.strings.DateTimePicker.clear)) == null ? '' : __t) +'</a>\n    </div>\n</div>\n\n';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/select.dateTime.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="backdrop"></div>\n\n<div class="datepicker-datetime pl-dropdown-content">\n        <div class="days"></div>\n        <div class="months" style="display: none;"></div>\n        <div class="years"  style="display: none;"></div>\n        <div class="times" style="display: none;"></div>\n        <div class="hours" style="display: none;"></div>\n        <div class="minutes" style="display: none;"></div>\n\n        <div class="pl-datetimepicker-footer btn-group btn-group-sm" role="group">\n            <a class="datepicker-clear btn btn-default">' +((__t = (InfinniUI.localized.strings.DateTimePicker.clear)) == null ? '' : __t) +'</a>\n        </div>\n    </div>\n</div>\n\n';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/select.time.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="backdrop"></div>\n\n<div class="datepicker-time pl-dropdown-content">\n    <div class="times"></div>\n    <div class="hours" style="display: none;"></div>\n    <div class="minutes" style="display: none;"></div>\n    <div class="seconds" style="display: none;"></div>\n    <div class="pl-datetimepicker-footer btn-group btn-group-sm" role="group">\n        <a class="datepicker-clear btn btn-default">' +((__t = (InfinniUI.localized.strings.DateTimePicker.clear)) == null ? '' : __t) +'</a>\n    </div>\n</div>\n\n\n';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/time.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<label class="pl-control-label" for="' +__e( guid ) +'"></label>\r\n\r\n<div class="input-group">\r\n    <input class="pl-editor pl-control form-control pl-datepicker-input" type="text" id="' +__e( guid ) +'" >\r\n    <span class="pl-datepicker-calendar input-group-addon"><i class="fa fa-clock-o"></i></span>\r\n</div>\r\n\r\n<div class="pl-control-hint-text help-block hidden"></div>\r\n<div class="pl-control-error-text help-block hidden"></div>\r\n<div class="pl-control-warning-text help-block hidden"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/fileBox/template/template.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<div class="form-group">\n    <label class="pl-control-label">Прикрепленный файл</label>\n\n    <div class="input-group pl-filebox-edit">\n        <span class="form-control pl-filebox-file-empty">' +((__t = (InfinniUI.localized.strings.FileBox.noFile)) == null ? '' : __t) +'</span><!-- Файла нет -->\n\n        <span class="form-control pl-filebox-file-upload"><span>filename.ext</span></span><!-- Файл выбран на загрузку -->\n\n        <span class="form-control pl-filebox-file-download"><!-- Файл загружен -->\n            <a href="javascript:;" title="Скачать файл" class="pl-filebox-file-download-url" target="_blank">filename.ext</a>\n        </span>\n\n        <span class="input-group-btn">\n            <label class="btn btn-default pl-filebox-btn-pick" for="file' +__e(guid) +'"><!-- Выбор файла на для загрузки -->\n                <span class="fa fa-folder-open"></span>\n            </label>\n\n             <button class="btn btn-default pl-filebox-btn-remove" type="button"><!-- Удаление выбранного или загруженного файла -->\n                 <span class="fa fa-times"></span>\n             </button>\n        </span>\n\n    </div>\n\n    <div class="pl-control-hint-text pl-text-wrapping"></div>\n    <div class="pl-control-error-text pl-text-wrapping"></div>\n    <div class="pl-control-warning-text pl-text-wrapping"></div>\n\n\n    <input type="file" class="hidden" id="file' +__e(guid) +'">\n</div>\n';}return __p}
window["InfinniUI"]["Template"]["controls/form/template/form.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) { items.forEach(function(item, index){;__p += '\n    <div class="pl-form-i pl-clearfix"></div>\n';});;__p += '\n';}return __p}
window["InfinniUI"]["Template"]["controls/frame/template/frame.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<iframe style="width: 100%;border: none;"></iframe>';}return __p}
window["InfinniUI"]["Template"]["controls/gridPanel/template/row.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-clearfix"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/imageBox/template/imageBox.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<div class="pl-image">\n    <div class="pl-image-wrapper">\n      <img src="">\n    </div>\n    <span class="pl-image-remove" type="button" title="Удалить"></span>\n</div>\n\n<div class="pl-image-file">\n    <input type="file" class="pl-image-file-input" id="' +__e( guid ) +'" tabindex="-1">\n    <label class="pl-image-file-upload-button" for="' +__e( guid ) +'">Выберите файл</label>\n</div>\n\n<div class="pl-control-hint-text pl-text-wrapping"></div>\n<div class="pl-control-error-text pl-text-wrapping"></div>\n<div class="pl-control-warning-text pl-text-wrapping"></div>\n\n\n';}return __p}
window["InfinniUI"]["Template"]["controls/indeterminateCheckBox/template/indeterminateCheckBox.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<div class="indeterminateCheckBox">\n	<label>\n		<input type="checkbox" id="' +__e( guid ) +'">\n		<span class="indeterminateCheckBox-custom-body"></span>\n		<span class="indeterminateCheckBox-label"></span>\n	</label>\n</div>\n';}return __p}
window["InfinniUI"]["Template"]["controls/menuBar/template/menuBar.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {__p += '<div class="container-fluid">\n    '; items.forEach(function(item, index){;__p += '\n    <ul class="nav navbar-nav">\n        <li class="pl-menu-bar-item"></li>\n    </ul>\n    ';});;__p += '\n</div>\n\n';}return __p}
window["InfinniUI"]["Template"]["controls/numericBox/template/numericBox.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<label class="pl-control-label" for="' +__e( guid ) +'"></label>\r\n<div class="input-group">\r\n    <span class="pl-numeric-box-min input-group-addon"><i class="fa fa-minus"></i></span>\r\n    <input  class="pl-editor pl-control form-control pl-numeric-box-input" type="text" id="' +__e( guid ) +'" >\r\n    <span class="pl-numeric-box-max input-group-addon"><i class="fa fa-plus"></i></span>\r\n</div>\r\n\r\n<div class="pl-control-hint-text help-block hidden"></div>\r\n<div class="pl-control-error-text help-block hidden"></div>\r\n<div class="pl-control-warning-text help-block hidden"></div>\r\n\r\n\r\n';}return __p}
window["InfinniUI"]["Template"]["controls/panel/template/panel.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {__p += '<div class="pl-panel-header panel-heading">Panel header</div>\n<div class="pl-panel-body panel-body">\n    '; items.forEach(function(item, index){;__p += '\n    <div class="pl-panel-i"></div>\n    ';});;__p += '\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/passwordBox/template/passwordBox.off.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<form autocomplete="off" onsubmit="return false;">\r\n<label class="pl-control-label" for="' +__e( guid ) +'"></label>\r\n<input class="pl-control form-control pl-password-box-input" type="password" id="' +__e( guid ) +'">\r\n<div class="pl-control-hint-text help-block hidden"></div>\r\n<div class="pl-control-error-text help-block hidden"></div>\r\n<div class="pl-control-warning-text help-block hidden"></div>\r\n</form>';}return __p}
window["InfinniUI"]["Template"]["controls/passwordBox/template/passwordBox.on.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<label class="pl-control-label" for="' +__e( guid ) +'"></label>\r\n<input class="pl-control form-control pl-password-box-input" type="password" id="' +__e( guid ) +'">\r\n<div class="pl-control-hint-text help-block hidden"></div>\r\n<div class="pl-control-error-text help-block hidden"></div>\r\n<div class="pl-control-warning-text help-block hidden"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/scrollPanel/template/scrollPanel.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {__p += '<div class="pl-scrollpanel-body">\n    '; items.forEach(function(item, index){;__p += '\n    <div class="pl-scrollpanel-i"></div>\n    ';});;__p += '\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/tabPanel/template/tabPanel.bottom.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-tabpanel-content"></div>\n<ul class="pl-tabpanel-header nav nav-pills"></ul>';}return __p}
window["InfinniUI"]["Template"]["controls/tabPanel/template/tabPanel.left.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="row">\n    <div class="col-sm-3">\n        <ul class="pl-tabpanel-header nav nav-pills nav-stacked"></ul>\n    </div>\n    <div class="col-sm-9">\n        <div class="pl-tabpanel-content"></div>\n    </div>\n</div>\n\n';}return __p}
window["InfinniUI"]["Template"]["controls/tabPanel/template/tabPanel.none.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-tabpanel-content"></div>\n<div class="pl-tabpanel-header hidden"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/tabPanel/template/tabPanel.right.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="row">\n    <div class="col-sm-9">\n        <div class="pl-tabpanel-content"></div>\n    </div>\n    <div class="col-sm-3">\n        <ul class="pl-tabpanel-header nav nav-pills nav-stacked"></ul>\n    </div>\n</div>\n\n';}return __p}
window["InfinniUI"]["Template"]["controls/tabPanel/template/tabPanel.top.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<ul class="pl-tabpanel-header nav nav-pills"></ul>\n<div class="pl-tabpanel-content"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/textBox/template/multiline.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<label class="pl-control-label" for="' +__e( guid ) +'"></label>\r\n\r\n<textarea class="pl-editor pl-control form-control pl-text-area-input" id="' +__e( guid ) +'"></textarea>\r\n\r\n<div class="pl-control-hint-text help-block hidden"></div>\r\n<div class="pl-control-error-text help-block hidden"></div>\r\n<div class="pl-control-warning-text help-block hidden"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/textBox/template/oneline.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<label class="pl-control-label" for="' +__e( guid ) +'"></label>\r\n\r\n<input class="pl-editor pl-control form-control pl-text-box-input pl-control-editor" type="text" id="' +__e( guid ) +'">\r\n\r\n<div class="pl-control-hint-text help-block hidden"></div>\r\n<div class="pl-control-error-text help-block hidden"></div>\r\n<div class="pl-control-warning-text help-block hidden"></div>\r\n\r\n';}return __p}
window["InfinniUI"]["Template"]["controls/toggleButton/template/toggleButton.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="togglebutton-box">\r\n    <div class="togglebutton-container">\r\n        <span class="togglebutton-handle-on"></span>\r\n        <span class="togglebutton-handle-label">&nbsp;</span>\r\n        <span class="togglebutton-handle-off"></span>\r\n    </div>\r\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/toolBar/template/toolBar.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-tool-bar__container"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/toolBar/template/toolBarItem.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div style="display: inline-block;"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/treeView/template/node-checkbox.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-treeview-node__button"><!-- pl-treeview-node__button_collapse -->\r\n    <span class="pl-treeview-node__icon pl-treeview-node__icon_collapsed fa fa-fw fa-plus-square-o"></span>\r\n    <span class="pl-treeview-node__icon pl-treeview-node__icon_expanded fa fa-fw fa-minus-square-o "></span>\r\n    <span class="pl-treeview-node__icon pl-treeview-node__icon_blank fa fa-fw"></span>\r\n    <!-- expand/collapse button -->\r\n</div>\r\n\r\n<div class="pl-treeview-node__item pl-treeview-item"><!-- pl-treeview-item_checked -->\r\n    <div class="pl-treeview-item__checker pl-treeview-item__checker_checkbox">\r\n        <span class="pl-treeview-node__icon pl-treeview-node__icon_checked fa fa-fw fa-check-square-o"></span>\r\n        <span class="pl-treeview-node__icon pl-treeview-node__icon_unchecked fa fa-fw fa-square-o"></span>\r\n    </div>\r\n\r\n    <div class="pl-treeview-item__content"><!-- pl-treeview-item__content_selected -->\r\n        <!-- item content HTML markup -->\r\n    </div>\r\n</div>\r\n\r\n<div class="pl-treeview-node__items"><!-- pl-treeview-node__items_expanded -->\r\n    <!-- subitems list -->\r\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/treeView/template/node-radio.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-treeview-node__button"><!-- pl-treeview-node__button_collapse -->\r\n    <span class="pl-treeview-node__icon pl-treeview-node__icon_collapsed fa fa-fw fa-plus-square-o"></span>\r\n    <span class="pl-treeview-node__icon pl-treeview-node__icon_expanded fa fa-fw fa-minus-square-o "></span>\r\n    <span class="pl-treeview-node__icon pl-treeview-node__icon_blank fa fa-fw"></span>\r\n    <!-- expand/collapse button -->\r\n</div>\r\n\r\n<div class="pl-treeview-node__item pl-treeview-item"><!-- pl-treeview-item_checked -->\r\n    <div class="pl-treeview-item__checker pl-treeview-item__checker_radio"></div>\r\n\r\n    <div class="pl-treeview-item__content"><!-- pl-treeview-item__content_selected -->\r\n        <!-- item content HTML markup -->\r\n    </div>\r\n</div>\r\n\r\n<div class="pl-treeview-node__items"><!-- pl-treeview-node__items_expanded -->\r\n    <!-- subitems list -->\r\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/treeView/template/treeview.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '';}return __p}
window["InfinniUI"]["Template"]["services/ajaxLoaderIndicator/template/template.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-ajaxloader-indicator"></div>';}return __p}
window["InfinniUI"]["Template"]["services/messageBox/template/default.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {__p += '<div class="modal-dialog">\n    <div class="modal-content pl-messagebox pl-messagebox_' +((__t = (type)) == null ? '' : __t) +'">\n        <div class="modal-body pl-messagebox__body">\n            <p class="pl-messagebox-content">\n                <i class="fa-lg fa fa-warning pl-messagebox-content__icon pl-messagebox-content__icon_' +((__t = (type)) == null ? '' : __t) +'"></i>\n                ' +((__t = ( text )) == null ? '' : __t) +'\n            </p>\n        </div>\n\n        <div class="modal-footer pl-messagebox__footer">\n            '; buttons.forEach( function(button, i){ ;__p += '\n\n            '; if (i === 0){ ;__p += '\n            <a href tabindex="0"\n               class="btn firstfocuselementinmodal pl-messagebox-button pl-messagebox-button_' +((__t = ( button.type )) == null ? '' : __t) +'"\n               data-index="' +((__t = ( i )) == null ? '' : __t) +'">' +((__t = ( button.name )) == null ? '' : __t) +'</a>\n            '; }else{ ;__p += '\n            <a href class="btn pl-messagebox-button pl-messagebox-button_' +((__t = ( button.type )) == null ? '' : __t) +'"\n               data-index="' +((__t = ( i )) == null ? '' : __t) +'">' +((__t = ( button.name )) == null ? '' : __t) +'</a>\n            '; }}); ;__p += '\n\n            <div class="lastfocuselementinmodal" tabindex="0"></div>\n        </div>\n\n    </div>\n\n</div>\n';}return __p}
window["InfinniUI"]["Template"]["controls/button/commonView/template/button.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<button class="btntext btn"></button>\n';}return __p}
window["InfinniUI"]["Template"]["controls/comboBox/values/template/value.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-combobox-value-item"></div>\n<a class="pl-combobox-value-remove" tabindex="-1">&times;</a>';}return __p}
window["InfinniUI"]["Template"]["controls/comboBox/values/template/values.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<li class="pl-combobox-search">\n    <input class="pl-combobox-search-text" type="text">\n</li>\n\n\n<style>\n    .pl-combobox-values {\n        margin: 0;\n        padding: 0;\n    }\n\n    .pl-combobox-values:before, .pl-combobox-values:after {\n        content: "";\n        display: table;\n    }\n\n    .pl-combobox-values:after {\n        clear: both;\n    }\n\n    .pl-combobox-value, .pl-combobox-search {\n        display: block;\n        float: left;\n    }\n\n    .pl-combobox-value {\n        border: 1px solid #adadad;\n        border-radius: 4px;\n        margin-right: 4px;\n    }\n\n    .pl-combobox-value-item, .pl-combobox-value-remove {\n        float: left;\n        display: block;\n    }\n\n    .pl-combobox-value-remove {\n        margin: 0 4px;\n        cursor: pointer;\n        outline: none;\n        font-weight: 600;\n    }\n\n    .pl-combobox-value-remove, .pl-combobox-value-remove:hover, .pl-combobox-value-remove:focus {\n        text-decoration: none;\n        outline: none;\n    }\n\n    .pl-combobox-search input {\n        border: none;\n        outline: none;\n    }\n\n</style>';}return __p}
window["InfinniUI"]["Template"]["controls/dataGrid/dataGridRow/template/dataCell.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<td class="pl-datagrid-row__cell"></td>';}return __p}
window["InfinniUI"]["Template"]["controls/dataGrid/dataGridRow/template/multiSelect.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<td class="pl-datagrid-row__cell pl-datagrid-row__cell_toggle">\r\n	<div class="pl-datagrid-toggle">\r\n		<input class="pl-datagrid-toggle__button" type="checkbox"><span></span>\r\n	</div>\r\n</td>';}return __p}
window["InfinniUI"]["Template"]["controls/dataGrid/dataGridRow/template/singleSelect.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<td class="pl-datagrid-row__cell pl-datagrid-row__cell_toggle">\r\n	 <div class="pl-datagrid-toggle">\r\n    	<input class="pl-datagrid-toggle__button" type="radio"><span></span>\r\n    </div>\r\n</td>';}return __p}
window["InfinniUI"]["Template"]["controls/dataNavigation/buttons/template/next.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<a href="javascript:;"><span>&raquo;</span></a>';}return __p}
window["InfinniUI"]["Template"]["controls/dataNavigation/buttons/template/page.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __e = _.escape;with (obj) {__p += '<a href="javascript:;">' +__e(pageNumber + 1) +'</a>';}return __p}
window["InfinniUI"]["Template"]["controls/dataNavigation/buttons/template/prev.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<a href="javascript:;"><span>&laquo;</span></a>';}return __p}
window["InfinniUI"]["Template"]["controls/dataNavigation/pageSizes/template/pageSizes.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {__p += '<button type="button" class="btn btn-default '; if (active) {;__p += 'active';};__p += '" data-size="' +((__t = (size)) == null ? '' : __t) +'">' +((__t = (size)) == null ? '' : __t) +'</button>';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/date/days.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<table>\n    <thead>\n    <tr class="navigation">\n        <th class="navigation-prev">\n            <button class="btn-month-prev btn btn-default"><i class="fa fa-caret-left"></i></button>\n        </th>\n        <th colspan="5" class="years">\n            <span class="years-month"></span>\n            <span class="years-year"></span>\n        </th>\n        <th class="navigation-next">\n            <button class="btn-month-next btn btn-default"><i class="fa fa-caret-right"></i></button>\n        </th>\n    </tr>\n    <tr class="weekdays weekdays-head">\n        <th class="day"></th>\n        <th class="day"></th>\n        <th class="day"></th>\n        <th class="day"></th>\n        <th class="day"></th>\n        <th class="day"></th>\n        <th class="day"></th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr class="weekdays weekdays-calendar">\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n    </tr>\n    <tr class="weekdays weekdays-calendar">\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n    </tr>\n    <tr class="weekdays weekdays-calendar">\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n    </tr>\n    <tr class="weekdays weekdays-calendar">\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n    </tr>\n    <tr class="weekdays weekdays-calendar">\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n    </tr>\n    <tr class="weekdays weekdays-calendar">\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n         <td class="day day-calendar"></td>\n    </tr>\n    </tbody>\n</table>\n<div>\n    <a class="time btn btn-link">' +((__t = (InfinniUI.localized.strings.DateTimePicker.time)) == null ? '' : __t) +'</a>\n</div>\n';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/date/months.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<table>\r\n    <thead>\r\n    <tr class="navigation">\r\n        <th class="navigation-prev">\r\n            <button class="btn-year btn-year-prev btn btn-default"><i class="fa fa-caret-left"></i></button>\r\n        </th>\r\n        <th class="year" colspan="2">Год</th>\r\n        <th class="navigation-next">\r\n            <button class="btn-year btn-year-next btn btn-default"><i class="fa fa-caret-right"></i></button>\r\n        </th>\r\n    </tr>\r\n    </thead>\r\n    <tbody class="month-list">\r\n    <tr>\r\n        <td class="month"></td>\r\n        <td class="month"></td>\r\n        <td class="month"></td>\r\n        <td class="month"></td>\r\n    </tr>\r\n    <tr>\r\n        <td class="month"></td>\r\n        <td class="month"></td>\r\n        <td class="month"></td>\r\n        <td class="month"></td>\r\n    </tr>\r\n    <tr>\r\n        <td class="month"></td>\r\n        <td class="month"></td>\r\n        <td class="month"></td>\r\n        <td class="month"></td>\r\n    </tr>\r\n    </tbody>\r\n</table>';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/date/years.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<table>\r\n    <thead>\r\n    <tr class="navigation">\r\n        <th class="navigation-prev">\r\n            <button class="btn-year btn-year-prev btn btn-default"><i class="fa fa-caret-left"></i></button>\r\n        </th>\r\n        <th colspan="2">\r\n            <span class="year-begin"></span>\r\n            -\r\n            <span class="year-end"></span>\r\n        </th>\r\n        <th class="navigation-next">\r\n            <button class="btn-year btn-year-next btn btn-default"><i class="fa fa-caret-right"></i></button>\r\n        </th>\r\n    </tr>\r\n    </thead>\r\n    <tbody class="year-list">\r\n    <tr class="years">\r\n        <td class="year year-begin">1999</td>\r\n        <td class="year">2000</td>\r\n        <td class="year">2001</td>\r\n        <td class="year">2002</td>\r\n    </tr>\r\n    <tr class="years">\r\n        <td class="year">2003</td>\r\n        <td class="year">2004</td>\r\n        <td class="year">2005</td>\r\n        <td class="year">2006</td>\r\n    </tr>\r\n    <tr class="years">\r\n        <td class="year">2003</td>\r\n        <td class="year">2004</td>\r\n        <td class="year">2005</td>\r\n        <td class="year">2006</td>\r\n    </tr>\r\n    <tr class="years">\r\n        <td class="year">2003</td>\r\n        <td class="year">2004</td>\r\n        <td class="year">2005</td>\r\n        <td class="year">2006</td>\r\n    </tr>\r\n    <tr class="years">\r\n        <td class="year">2007</td>\r\n        <td class="year">2008</td>\r\n        <td class="year">2009</td>\r\n        <td class="year year-end">2010</td>\r\n    </tr>\r\n    </tbody>\r\n</table>';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/time/hours.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<style>\r\n    .timepicker-hours .hour {\r\n        padding: 10px;\r\n    }\r\n\r\n    .hour-unavailable {\r\n        background-color: #dddddd;\r\n        cursor: not-allowed;\r\n        color: #777777;\r\n        opacity: 1;\r\n    }\r\n\r\n    .timepicker-hours {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .hour-today {\r\n        background: #d4e2ee;\r\n    }\r\n\r\n    .hour-selected {\r\n        border: 1px solid #FF0000;\r\n    }\r\n</style>\r\n<div class="timepicker-hours">\r\n    <table>\r\n        <tbody>\r\n        <tr>\r\n            <td class="hour">00</td>\r\n            <td class="hour">01</td>\r\n            <td class="hour">02</td>\r\n            <td class="hour">03</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="hour">04</td>\r\n            <td class="hour">05</td>\r\n            <td class="hour">06</td>\r\n            <td class="hour">07</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="hour">08</td>\r\n            <td class="hour">09</td>\r\n            <td class="hour">10</td>\r\n            <td class="hour">11</td>\r\n        </tr>\r\n\r\n        <tr>\r\n            <td class="hour">12</td>\r\n            <td class="hour">13</td>\r\n            <td class="hour">14</td>\r\n            <td class="hour">15</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="hour">16</td>\r\n            <td class="hour">17</td>\r\n            <td class="hour">18</td>\r\n            <td class="hour">19</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="hour">20</td>\r\n            <td class="hour">21</td>\r\n            <td class="hour">22</td>\r\n            <td class="hour">23</td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/time/minutes.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<style>\r\n    .minute {\r\n        padding: 10px;\r\n    }\r\n\r\n    .minute-unavailable {\r\n        background-color: #dddddd;\r\n        cursor: not-allowed;\r\n        color: #777777;\r\n        opacity: 1;\r\n    }\r\n\r\n    .timepicker-minutes {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .minute-selected {\r\n        border: 1px solid #FF0000;\r\n    }\r\n\r\n</style>\r\n<div class="timepicker-minutes">\r\n    <table>\r\n        <tbody>\r\n        <tr>\r\n            <td class="minute" data-minute="0">00</td>\r\n            <td class="minute" data-minute="5">05</td>\r\n            <td class="minute" data-minute="10">10</td>\r\n            <td class="minute" data-minute="15">15</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="minute" data-minute="20">20</td>\r\n            <td class="minute" data-minute="25">25</td>\r\n            <td class="minute" data-minute="30">30</td>\r\n            <td class="minute" data-minute="35">35</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="minute" data-minute="40">40</td>\r\n            <td class="minute" data-minute="45">45</td>\r\n            <td class="minute" data-minute="50">50</td>\r\n            <td class="minute" data-minute="55">55</td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/time/seconds.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="timepicker-seconds">\r\n    <table>\r\n        <tbody>\r\n        <tr>\r\n            <td class="second" data-second="0">00</td>\r\n            <td class="second" data-second="5">05</td>\r\n            <td class="second" data-second="10">10</td>\r\n            <td class="second" data-second="15">15</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="second" data-second="20">20</td>\r\n            <td class="second" data-second="25">25</td>\r\n            <td class="second" data-second="30">30</td>\r\n            <td class="second" data-second="35">35</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="second" data-second="40">40</td>\r\n            <td class="second" data-second="45">45</td>\r\n            <td class="second" data-second="50">50</td>\r\n            <td class="second" data-second="55">55</td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/dateTimePicker/template/time/time.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<style>\n    /*.time-segment {*/\n        /*font-size: 36px;*/\n        /*font-weight: bold;*/\n        /*padding: 10px;*/\n    /*}*/\n\n    /*.time-spin {*/\n        /*text-align: center;*/\n        /*font-size: 36px;*/\n        /*font-weight: bold;*/\n    /*}*/\n\n    /*.time-spin-up, .time-spin-down {*/\n        /*width: 100%;*/\n        /*text-decoration: none;*/\n\n        /*user-select: none;*/\n        /*-webkit-user-select: none;*/\n        /*-moz-user-select: none;*/\n        /*-ms-user-select: none;*/\n    /*}*/\n\n    /*.time-spin-up:hover, .time-spin-down:hover {*/\n        /*text-decoration: none;*/\n    /*}*/\n\n    /*.times .days {*/\n        /*width: 100%;*/\n        /*text-align: center;*/\n        /*display: inline-block;*/\n    /*}*/\n</style>\n<div><a class="days btn btn-link">' +((__t = (InfinniUI.localized.strings.DateTimePicker.date)) == null ? '' : __t) +'</a></div>\n<table>\n    <tbody>\n    <tr>\n        <td class="time-spin">\n            <a class="time-spin-up time-spin-hour btn btn-link">\n                <i class="fa fa-chevron-up"></i>\n            </a>\n        </td>\n        <td></td>\n        <td class="time-spin">\n            <a class="time-spin-up time-spin-minute btn btn-link">\n                <i class="fa fa-chevron-up"></i>\n            </a>\n        </td>\n        <td></td>\n        <td class="time-spin">\n            <a class="time-spin-up time-spin-second btn btn-link">\n                <i class="fa fa-chevron-up"></i>\n            </a>\n        </td>\n        <td></td>\n    </tr>\n    <tr>\n        <td class="time-segment">\n            <span class="time-segment-hour">12</span>\n        </td>\n        <td class="time-segment">:</td>\n        <td class="time-segment">\n            <span class="time-segment-minute">14</span>\n        </td>\n        <td class="time-segment">:</td>\n        <td class="time-segment">\n            <span class="time-segment-second">00</span>\n        </td>\n        <td class="time-segment">\n            <button class="period" style="display: none;">AM/PM</button>\n        </td>\n    </tr>\n    <tr>\n        <td class="time-spin">\n            <a class="time-spin-down time-spin-hour btn btn-link">\n                <i class="fa fa-chevron-down"></i>\n            </a>\n        </td>\n        <td></td>\n        <td class="time-spin">\n            <a class="time-spin-down time-spin-minute btn btn-link">\n                <i class="fa fa-chevron-down"></i>\n            </a>\n        </td>\n        <td></td>\n        <td class="time-spin">\n            <a class="time-spin-down time-spin-second btn btn-link">\n                <i class="fa fa-chevron-down"></i>\n            </a>\n        </td>\n        <td></td>\n    </tr>\n    </tbody>\n</table>\n';}return __p}
window["InfinniUI"]["Template"]["controls/label/commonView/template/label.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<label class="label-control" title=""></label>\n';}return __p}
window["InfinniUI"]["Template"]["controls/listBox/baseView/template/listBox.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {function buildListboxInput(i, isMultiselect, inputName){    if(isMultiselect){    ;__p += '\n        <input type = "checkbox" name="' +((__t = ( inputName + '-' + i )) == null ? '' : __t) +'" />\n    ';    }else{    ;__p += '\n        <input type = "radio" name="' +((__t = ( inputName )) == null ? '' : __t) +'" />\n    ';    }};__p += '\n\n<ul class="pl-listbox-control list-group">\n    '; items.forEach(function(item, index){;__p += '\n        <li '; if(focusable) {;__p += 'tabindex="0"';};__p += ' class="pl-listbox-i list-group-item">\n            <div class="pl-listbox-input">\n                '; buildListboxInput(index, isMultiselect, inputName); ;__p += '\n                <span></span>\n            </div>\n            <div class="pl-listbox-body"></div>\n        </li>\n    ';});;__p += '\n</ul>';}return __p}
window["InfinniUI"]["Template"]["controls/listBox/baseView/template/listBoxGrouped.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {function buildGroupedListboxInput(i, isMultiselect, inputName){    if(isMultiselect){        ;__p += '\n            <input type = "checkbox" name="' +((__t = ( inputName + '-' + i )) == null ? '' : __t) +'" />\n        ';    }else{        ;__p += '\n            <input type = "radio" name="' +((__t = ( inputName )) == null ? '' : __t) +'" />\n        ';    }};__p += '\n\n<ul class="pl-listbox-control pl-listbox-grouped">\n    ';        var i = 0;        groups.forEach(function(group, gIndex){    ;__p += '\n        <li '; if(focusable) {;__p += 'tabindex="0"';};__p += ' class="pl-listbox-group-i">\n            <div class="pl-listbox-group-title"></div>\n            <ul class="pl-listbox-group-body">\n                '; group.items.forEach(function(item, index){;__p += '\n                    <li '; if(focusable) {;__p += 'tabindex="0"';};__p += ' class="pl-listbox-i">\n                        <div class="pl-listbox-input">\n                            ';                                buildGroupedListboxInput(i, isMultiselect, inputName);                                i++;                            ;__p += '\n                            <span></span>\n                        </div>\n                        <div class="pl-listbox-body"></div>\n                    </li>\n                ';});;__p += '\n            </ul>\n        </li>\n    ';});;__p += '\n</ul>\n';}return __p}
window["InfinniUI"]["Template"]["controls/listBox/checkingView/template/listBox.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {function buildListboxInput(i, isMultiselect, inputName){    if(isMultiselect){    ;__p += '\n        <input type = "checkbox" name="' +((__t = ( inputName + '-' + i )) == null ? '' : __t) +'" />\n    ';    }else{    ;__p += '\n        <input type = "radio" name="' +((__t = ( inputName )) == null ? '' : __t) +'" />\n    ';    }};__p += '\n\n<ul class="pl-listbox-control">\n    '; items.forEach(function(item, index){;__p += '\n    <li '; if(focusable) {;__p += 'tabindex="0"';};__p += ' class="pl-listbox-i '; print( isMultiselect ? 'checkbox' : 'radio' ); ;__p += '">\n        <div class="pl-listbox-input">\n            '; buildListboxInput(index, isMultiselect, inputName); ;__p += '\n            <span></span>\n        </div>\n        <div class="pl-listbox-body"></div>\n    </li>\n    ';});;__p += '\n</ul>\n\n\n';}return __p}
window["InfinniUI"]["Template"]["controls/listBox/checkingView/template/listBoxGrouped.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {function buildGroupedListboxInput(i, isMultiselect, inputName){    if(isMultiselect){        ;__p += '\n            <input type = "checkbox" name="' +((__t = ( inputName + '-' + i )) == null ? '' : __t) +'" />\n        ';    }else{        ;__p += '\n            <input type = "radio" name="' +((__t = ( inputName )) == null ? '' : __t) +'" />\n        ';    }};__p += '\n\n<ul class="pl-listbox-control pl-listbox-grouped">\n    ';        var i = 0;        groups.forEach(function(group, gIndex){    ;__p += '\n        <li '; if(focusable) {;__p += 'tabindex="0"';};__p += ' class="pl-listbox-group-i">\n            <div class="pl-listbox-group-title"></div>\n            <ul class="pl-listbox-group-body">\n                '; group.items.forEach(function(item, index){;__p += '\n                    <li '; if(focusable) {;__p += 'tabindex="0"';};__p += ' class="pl-listbox-i">\n                        <div class="pl-listbox-input">\n                            ';                                buildGroupedListboxInput(i, isMultiselect, inputName);                                i++;                            ;__p += '\n                            <span></span>\n                        </div>\n                        <div class="pl-listbox-body"></div>\n                    </li>\n                ';});;__p += '\n            </ul>\n        </li>\n    ';});;__p += '\n</ul>\n';}return __p}
window["InfinniUI"]["Template"]["controls/popupButton/commonView/template/popupButton.dropdown.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {__p += '<div class="pl-popup-button__dropdown">\n    <div class="backdrop" style="position: fixed; top: 0; left: 0; bottom: 0; right: 0; background: rgba(0, 0, 0, 0);"></div>\n    <ul class="pl-popup-button__items dropdown-menu">\n        '; items.forEach(function(item, index){;__p += '\n        <li class="pl-popup-button__item"></li>\n        ';});;__p += '\n    </ul>\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/popupButton/commonView/template/popupButton.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="btn-group">\n    <button class="pl-popup-button__button btn"></button>\n    <button type="button" class="btn dropdown-toggle pl-popup-button__grip">\n        <span class="caret"></span>\n    </button>\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/popupButton/forMenuView/template/popupButton.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<span class="pl-popup-button__button"></span>\n<span class="caret"></span>';}return __p}
window["InfinniUI"]["Template"]["controls/stackPanel/baseView/template/stackPanel.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) { items.forEach(function(item, index){;__p += '\n    <li class="pl-stack-panel-i pl-clearfix"></li>\n';});;}return __p}
window["InfinniUI"]["Template"]["controls/stackPanel/baseView/template/stackPanelGroup.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {__p += '<div class="pl-stack-panel__content pl-stack-panel-group">\r\n    <div class="pl-stack-panel-group__header"><!-- Group Header here--></div>\r\n    <div class="pl-stack-panel-group__body">\r\n        <div class="pl-stack-panel-list">\r\n            <!-- Group\'s items here -->\r\n            '; for (var i = 0; i < items.length; i = i + 1) { ;__p += '\r\n            <div class="pl-stack-panel-list__item"></div><!--- Item in Group -->\r\n            '; };__p += '\r\n        </div>\r\n    </div>\r\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/stackPanel/baseView/template/stackPanelGrouped.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '';}return __p}
window["InfinniUI"]["Template"]["controls/tabPanel/tabHeader/template/tabHeader.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<a class="pl-tabheader-text"></a>\n<a class="pl-tabheader-close pl-close">&times;</a>\n\n<style>\n    .pl-tabheader {\n        position: relative;\n        cursor: pointer;\n    }\n\n    .pl-tabheader-close.pl-close {\n        position: absolute;\n        right: 0;\n        top:0;\n    }\n</style>';}return __p}
window["InfinniUI"]["Template"]["controls/tabPanel/tabPage/template/tabPage.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '', __j = Array.prototype.join;function print() { __p += __j.call(arguments, '') }with (obj) {__p += '<div class="pl-tabpage-body">\n    '; items.forEach(function(item, index){;__p += '\n    <div class="pl-tabpage-i"></div>\n    ';});;__p += '\n</div>';}return __p}
window["InfinniUI"]["Template"]["controls/comboBox/dropdown/group/template/template.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="pl-combobox-group__header"></div>\n<div class="pl-combobox-group__items"></div>';}return __p}
window["InfinniUI"]["Template"]["controls/comboBox/dropdown/template/group/template.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="backdrop" style="position: fixed; top: 0; left: 0; bottom: 0; right: 0; background: rgba(0, 0, 0, 0);"></div>\n\n<!--<style>-->\n    <!--.pl-combobox-group__items > .pl-combobox-selected {-->\n        <!--border-left: 4px solid #39b3d7;-->\n    <!--}-->\n<!--</style>-->\n<div class="pl-dropdown-content" style="position: relative; background: #FFFFFF; padding: 5px;">\n    <div class="form-group pl-combobox-filter">\n        <input type="text" class="pl-combobox-filter-text form-control">\n    </div>\n    <div class="pl-combobox-items-empty">\n        По запросу "<span></span>" ничего не найдено\n    </div>\n\n    <div class="pl-combobox-items" style="background: rgba(255, 255, 255, 1);">\n        <label>Dropdown items</label>\n    </div>\n</div>\n\n';}return __p}
window["InfinniUI"]["Template"]["controls/comboBox/dropdown/template/plain/template.tpl.html"] = function(obj) {obj || (obj = {});var __t, __p = '';with (obj) {__p += '<div class="backdrop" style="position: fixed; top: 0; left: 0; bottom: 0; right: 0; background: rgba(0, 0, 0, 0);"></div>\n\n<div class="pl-combobox-dropdown pl-dropdown-content">\n    <div class="form-group pl-combobox-filter">\n        <input type="text" class="pl-combobox-filter-text form-control">\n    </div>\n    <div class="pl-combobox-items-empty"></div>\n    <div class="pl-combobox-items" style="background: rgba(255, 255, 255, 1);">\n        <label>Dropdown items</label>\n    </div>\n</div>\n';}return __p}
//####app/utils/strict.js
'use strict';
//####app/utils/namespace.js
var InfinniUI = window.InfinniUI || {};
window.InfinniUI = InfinniUI;

InfinniUI.Utils = InfinniUI.Utils || {};

InfinniUI.Template = InfinniUI.Template || {};

InfinniUI.config = InfinniUI.config || {};

InfinniUI.global = InfinniUI.global || {};

InfinniUI.Mixins = InfinniUI.Mixins || {};

InfinniUI.Metadata = InfinniUI.Metadata || {};

InfinniUI.Theme = InfinniUI.Theme || {};

InfinniUI.localizations = InfinniUI.localizations || {
    'ru-RU': {
        caption: 'Русский',
        name: 'ru-RU'
    },
    'en-US': {
        caption: 'English',
        name: 'en-US'
    }
};

InfinniUI.Providers = {};

//####app/elements/_common/enums/colorStyle.js
InfinniUI.ColorStyle = {
    transparent: 'Transparent',

    primary1: 'Primary1',
    primary2: 'Primary2',
    primary3: 'Primary3',

    accent1: 'Accent1',
    accent2: 'Accent2',
    accent3: 'Accent3',

    background1: 'Background1',
    background2: 'Background2',
    background3: 'Background3',
    background4: 'Background4',

    white: 'White',
    black: 'Black'
};
//####app/elements/_common/enums/elementHorizontalAlignment.js
InfinniUI.ElementHorizontalAlignment = {
    left: 'Left',
    right: 'Right',
    center: 'Center',
    justify: 'Stretch'
};

//####app/elements/_common/enums/textHorizontalAlignment.js
InfinniUI.TextHorizontalAlignment = {
    left: 'Left',
    right: 'Right',
    center: 'Center',
    justify: 'Justify'
};

//####app/elements/_common/enums/textStyle.js
InfinniUI.TextStyle = {
    display4: 'Display4',
    display3: 'Display3',
    display2: 'Display2',
    display1: 'Display1',

    headline: 'Headline',
    title: 'Title',
    subhead: 'Subhead',
    caption: 'Caption',

    body1: 'Body1',
    body2: 'Body2',

    menu: 'Menu',
    button: 'Button'
};
//####app/elements/scrollPanel/enums/scrollVisibility.js
InfinniUI.ScrollVisibility = {
    auto: 'Auto',
    visible: 'Visible',
    hidden: 'Hidden'
};


//####app/elements/stackPanel/enums/stackPanelOrientation.js
InfinniUI.StackPanelOrientation = {
    horizontal: 'Horizontal',
    vertical: 'Vertical'
};



//####app/elements/tabPanel/enums/tabHeaderLocation.js
InfinniUI.TabHeaderLocation = {
    none: 'None',
    left: 'Left',
    top: 'Top',
    right: 'Right',
    bottom: 'Bottom'
};

//####app/elements/tabPanel/enums/tabHeaderOrientation.js
InfinniUI.TabHeaderOrientation = {
    horizontal: 'Horizontal',
    vertical: 'Vertical'
};
//####app/config.js
_.defaults( InfinniUI.config, {
    lang: 'ru-RU',
    cacheMetadata: false, //boolean - enable/disable cache | milliseconds
    serverUrl: 'http://localhost:9900',
    signalRServerUrl: null,
    configName: 'InfinniUI'
} );


InfinniUI.VERSION = '3.0.18';

//####app/localizations/dateTimeFormatInfo.js
InfinniUI.localizations[ 'ru-RU' ].dateTimeFormatInfo = {
    monthNames: [ 'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь' ],
    abbreviatedMonthNames: ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'],
    dayNames: [ 'воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота' ],
    abbreviatedDayNames: [ 'Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб' ],
    dateSeparator: '.',
    timeSeparator: ':',
    amDesignator: '',
    pmDesignator: '',
    firstDayOfWeek: 1
};

InfinniUI.localizations[ 'en-US' ].dateTimeFormatInfo = {
    monthNames: [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ],
    abbreviatedMonthNames: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    abbreviatedDayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    dateSeparator: '/',
    timeSeparator: ':',
    amDesignator: 'AM',
    pmDesignator: 'PM',
    firstDayOfWeek: 0
};
//####app/localizations/localized.js
var localized = InfinniUI.localizations[ InfinniUI.config.lang ];

InfinniUI.localized = localized;
//####app/localizations/numberFormatInfo.js
InfinniUI.localizations[ 'ru-RU' ].numberFormatInfo = {
    numberDecimalDigits: 2,
    numberDecimalSeparator: ',',
    numberGroupSeparator: ' ',
    numberNegativePattern: '-n',
    numberPositivePattern: 'n',

    percentDecimalDigits: 2,
    percentDecimalSeparator: ',',
    percentGroupSeparator: ' ',
    percentSymbol: '%',
    percentNegativePattern: '-p%',
    percentPositivePattern: 'p%',

    currencyDecimalDigits: 2,
    currencyDecimalSeparator: ',',
    currencyGroupSeparator: ' ',
    currencySymbol: 'р.',
    currencyNegativePattern: '-c$',
    currencyPositivePattern: 'c$',

    negativeInfinitySymbol: '-бесконечность',
    positiveInfinitySymbol: 'бесконечность',
    NaNSymbol: 'NaN'
};

InfinniUI.localizations[ 'en-US' ].numberFormatInfo = {
    numberDecimalDigits: 2,
    numberDecimalSeparator: '.',
    numberGroupSeparator: ',',
    numberNegativePattern: '-n',
    numberPositivePattern: 'n',

    percentDecimalDigits: 2,
    percentDecimalSeparator: '.',
    percentGroupSeparator: ',',
    percentSymbol: '%',
    percentNegativePattern: '-p %',
    percentPositivePattern: 'p %',

    currencyDecimalDigits: 2,
    currencyDecimalSeparator: '.',
    currencyGroupSeparator: ',',
    currencySymbol: '$',
    currencyNegativePattern: '($c)',
    currencyPositivePattern: '$c',

    negativeInfinitySymbol: '-Infinity',
    positiveInfinitySymbol: 'Infinity',
    NaNSymbol: 'NaN'
};
//####app/localizations/patternDateFormats.js
InfinniUI.localizations[ 'ru-RU' ].patternDateFormats = {
    f: 'dd MMMM yyyy г. HH:mm',
    F: 'dd MMMM yyyy г. HH:mm:ss',

    g: 'dd.MM.yyyy HH:mm',
    G: 'dd.MM.yyyy HH:mm:ss',

    d: 'dd.MM.yyyy',
    D: 'dd MMMM yyyy г.',

    t: 'H:mm',
    T: 'HH:mm:ss',

    y: 'MMMM yyyy', Y: 'MMMM yyyy',
    m: 'MMMM dd', M: 'MMMM dd',

    s: 'yyyy-MM-ddTHH:mm:ss',
    u: 'yyyy-MM-dd HH:mm:ssZ'
};

InfinniUI.localizations[ 'en-US' ].patternDateFormats = {
    f: 'dddd, MMMM dd, yyyy h:%m tt',
    F: 'dddd, MMMM dd, yyyy h:%m:%s tt',

    // TODO: Изменен формат для корректного отображения в DateTimePicker (UI-2453)
    g: 'M/%d/yyyy h:%m tt',
    G: 'M/%d/yyyy h:%m:%s tt',

    d: 'M/%d/yyyy',
    D: 'dddd, MMMM dd, yyyy',

    t: 'h:%m tt',
    T: 'h:%m:%s tt',

    y: 'MMMM, yyyy', Y: 'MMMM, yyyy',
    m: 'MMMM dd', M: 'MMMM dd',

    s: 'yyyy-MM-ddTHH:mm:ss',
    u: 'yyyy-MM-dd HH:mm:ssZ'
};
//####app/localizations/stringResources.js
InfinniUI.localizations[ 'ru-RU' ].strings = {
    ImageBox: {
        chooseImage: 'Выбрать изображение',
        imageSizeTooBig: 'Размер выбранного файла {chosen-size}Мб больше допустимого размера {permitted-size}Мб',
        incorrectFormat: 'Загрузка данного типа файла не разрешена'
    },
    FileBox: {
        noFile: 'Файл не выбран...',
        fileSizeTooBig: 'Размер выбранного файла {chosen-size}Мб больше допустимого размера {permitted-size}Мб',
        incorrectFormat: 'Загрузка данного типа файла не разрешена'
    },
    DateTimePicker: {
        time: 'Время',
        clear: 'Очистить',
        today: 'Сегодня',
        date: 'Дата'
    },

    DeleteAction: {
        'warnMessage': 'Вы уверены, что хотите удалить?',
        'warnMessageNoItem': 'Вы не выбрали элемент который необходимо удалить',
        'agree': 'Да',
        'disagree': 'Нет',
        'cancel': 'Закрыть'
    },

    ComboBox: {
        'noItemsMessage': 'По запросу "<span class="search-message"></span>" ничего не найдено'
    }
};

InfinniUI.localizations[ 'en-US' ].strings = {
    ImageBox: {
        chooseImage: 'Choose photo',
        imageSizeTooBig: 'Size of the chosen file {chosen-size}MB is more than allowed {permitted-size}MB',
        incorrectFormat: 'Uploading of this file type is forbidden'
    },
    FileBox: {
        noFile: 'Choose file...',
        fileSizeTooBig: 'Size of the chosen file {chosen-size}MB is more than allowed {permitted-size}MB',
        incorrectFormat: 'Uploading of this file type is forbidden'
    },
    DateTimePicker: {
        time: 'Time',
        clear: 'Clear',
        today: 'Today',
        date: 'Date'
    },

    DeleteAction: {
        'warnMessage': 'Are you sure to remove item?',
        'warnMessageNoItem': 'Choose item that you want to remove',
        'agree': 'Yes',
        'disagree': 'No',
        'cancel': 'Close'
    },

    ComboBox: {
        'noItemsMessage': '"<span class="search-message"></span>" not found'
    }
};
//####app/messaging/messageBus.js
/**
 *
 * @param view
 * @constructor
 */
function MessageBus( view ) {
    var subscriptions = {};

    /**
     *
     * @param messageType
     * @param messageBody
     */
    this.send = function( messageType, messageBody ) {
        messageType = patchMessageType( messageType );
        if( subscriptions[ messageType ] ) {
            var context;
            if( view && view.getContext ) {
                context = view.getContext();
            }
            subscriptions[ messageType ].forEach( function( handler ) {
                handler( context, { value: messageBody } );
            } );
        }
    };

    /**
     *
     * @param messageType
     * @param messageHandler
     */
    this.subscribe = function( messageType, messageHandler ) {
        messageType = patchMessageType( messageType );
        if( !subscriptions[ messageType ] ) {
            subscriptions[ messageType ] = [];
        }

        subscriptions[ messageType ].push( messageHandler );
    };

    /**
     *
     * @param messageType
     */
    this.unsubscribeByType = function( messageType ) {
        messageType = patchMessageType( messageType );
        if( subscriptions[ messageType ] ) {
            delete subscriptions[ messageType ];
        }
    };

    /**
     *
     * @returns {*}
     */
    this.getView = function() {
        return view;
    };

    this.dispose = function() {
        subscriptions = {};
    };

    function patchMessageType( messageType ) {
        if( typeof messageType === 'object' && typeof messageType.name !== 'undefined' ) {
            messageType = messageType.name;
        }

        return messageType;
    }
}

InfinniUI.global.messageBus = new MessageBus();

//####app/messaging/messageTypes.js
var messageTypes = {

    onViewBuildError: { name: 'onViewBuildError' },
    onViewCreated: { name: 'onViewCreated' },

    onChangeLayout: { name: 'OnChangeLayout' },
    onNotifyUser: { name: 'onNotifyUser' },
    onToolTip: { name: 'onToolTip' },
    onRemove: { name: 'onRemove' },

    onContextMenu: { name: 'onContextMenu' },
    onOpenContextMenu: { name: 'onOpenContextMenu' },

    onDataLoading: { name: 'onDataLoading' },
    onDataLoaded: { name: 'onDataLoaded' },

    onToolTipDestroy: { name: 'onToolTipDestroy' },
    onToolTipInit: { name: 'onToolTipInit' }

};

InfinniUI.messageTypes = messageTypes;


//####app/controls/_base/_mixins/ajaxRequestMixin.js
/**
 *
 * @mixin
 */
var ajaxRequestMixin = ( function( bus ) {
    function invokeCallback( cb, args ) {
        var result;
        if( typeof cb === 'function' ) {
            result = cb.apply( null, Array.prototype.slice.call( args ) );
        }
        return result;
    }

    return {

        /**
         *
         * @param callback
         * @returns {Function}
         */
        onBeforeRequest: function( callback ) {
            return function() {
                bus.send( messageTypes.onDataLoading, {} );
                return invokeCallback( callback, arguments );
            };
        },

        /**
         *
         * @param callback
         * @returns {Function}
         */
        onSuccessRequest: function( callback ) {
            return function() {
                bus.send( messageTypes.onDataLoaded, { success: true } );
                return invokeCallback( callback, arguments );
            };
        },

        /**
         *
         * @param callback
         * @returns {Function}
         */
        onErrorRequest: function( callback ) {
            return function() {
                bus.send( messageTypes.onDataLoaded, { success: false } );
                return invokeCallback( callback, arguments );
            };
        }
    };

} )( InfinniUI.global.messageBus );

InfinniUI.ajaxRequestMixin = ajaxRequestMixin;

//####app/utils/actionOnLoseFocus.js
/**
 *
 * @param $el
 * @param action
 * @constructor
 */
var ActionOnLoseFocus = function( $el, action ) {
    var that = this;
    this.$el = $el;
    this.action = action;
    this.checkNeedToActionBinded = _.bind( this.checkNeedToAction, this );

    $( document ).on( 'mousedown', that.checkNeedToActionBinded );
};

/**
 *
 * @param e
 */
ActionOnLoseFocus.prototype.checkNeedToAction = function( e ) {
    if ( $( e.target ).closest( this.$el ).length == 0 ) {
        this.action();
        $( document ).off( 'mousedown', this.checkNeedToActionBinded );
    }
};

InfinniUI.ActionOnLoseFocus = ActionOnLoseFocus;

//####app/utils/authenticationProvider.js
/**
 * Провайдер аутентификации.
 * @mixes ajaxRequestMixin
 * @constructor
 */
function AuthenticationProvider( baseAddress ) {
    this.baseAddress = baseAddress;
}

_.extend( AuthenticationProvider.prototype, {

    handlers: {
        onActiveRoleChanged: $.Callbacks(),
        onSignInInternal: $.Callbacks(),
        onSignOut: $.Callbacks()
    },

    /**
     * Возвращает информацию о текущем пользователе.
     * @param resultCallback
     * @param errorCallback
     * @public
     */
    getCurrentUser: function( resultCallback, errorCallback ) {
        this.sendPostRequestForServiceResult( '/Auth/GetCurrentUser', {}, resultCallback, errorCallback );
    },

    /**
     * @public
     * @description Изменяет пароль текущего пользователя.
     * @param oldPassword
     * @param newPassword
     * @param resultCallback
     * @param errorCallback
     */
    changePassword: function( oldPassword, newPassword, resultCallback, errorCallback ) {
        var changePasswordForm = {
            OldPassword: oldPassword,
            NewPassword: newPassword
        };

        this.sendPostRequestForServiceResult( '/Auth/ChangePassword', changePasswordForm, resultCallback, errorCallback );
    },

    /**
     * @public
     * @description Изменяет персональную информацию текущего пользователя.
     * @param displayName
     * @param description
     * @param resultCallback
     * @param errorCallback
     */
    changeProfile: function( displayName, description, resultCallback, errorCallback ) {
        var changeProfileForm = {
            DisplayName: displayName,
            Description: description
        };

        this.sendPostRequestForServiceResult( '/Auth/ChangeProfile', changeProfileForm, resultCallback, errorCallback );
    },

    /**
     * @public
     * @description Осуществляет вход пользователя в систему через внутренний провайдер.
     * @param userName
     * @param password
     * @param remember
     * @param resultCallback
     * @param errorCallback
     */
    signInInternal: function( userName, password, remember, resultCallback, errorCallback ) {
        var signInInternalForm = {
            UserName: userName,
            Password: password,
            Remember: remember
        };

        this.sendPostRequestForServiceResult( '/Auth/SignInInternal', signInInternalForm, resultCallback, errorCallback );
    },

    /**
     * Осуществляет вход пользователя в систему по любому идентификатору
     *
     * @param {string} userKey - идентификатор (id, имя пользователя, email, номер телефона)
     * @param {string} password - пароль
     * @param {string} remember - запомнить
     * @param {function} resultCallback - при успешном результате
     * @param {function} errorCallback - при неудачном результате
     */
    signIn: function( userKey, password, remember, resultCallback, errorCallback ) {
        var signInForm = {
            UserKey: userKey,
            Password: password,
            Remember: remember
        };

        this.sendPostRequest( '/Auth/SignIn', signInForm, resultCallback, errorCallback );
    },

    /**
     * Осуществляет вход пользователя в систему Id
     *
     * @param {string} userId - идентификатор пользователя
     * @param {string} password - пароль
     * @param {string} remember - запомнить
     * @param {function} resultCallback - при успешном результате
     * @param {function} errorCallback - при неудачном результате
     */
    signInById: function( userId, password, remember, resultCallback, errorCallback ) {
        var signInForm = {
            Id: userId,
            Password: password,
            Remember: remember
        };

        this.sendPostRequest( '/Auth/SignInById', signInForm, resultCallback, errorCallback );
    },

    /**
     * Осуществляет вход пользователя в систему по имени
     *
     * @param {string} userName - имя пользователя
     * @param {string} password - пароль
     * @param {string} remember - запомнить
     * @param {function} resultCallback - при успешном результате
     * @param {function} errorCallback - при неудачном результате
     */
    signInByUserName: function( userName, password, remember, resultCallback, errorCallback ) {
        var signInForm = {
            UserName: userName,
            Password: password,
            Remember: remember
        };

        this.sendPostRequest( '/Auth/SignInByUserName', signInForm, resultCallback, errorCallback );
    },

    /**
     * Осуществляет вход пользователя в систему по электронной почте
     *
     * @param {string} email - электронная почта
     * @param {string} password - пароль
     * @param {string} remember - запомнить
     * @param {function} resultCallback - при успешном результате
     * @param {function} errorCallback - при неудачном результате
     */
    signInByEmail: function( email, password, remember, resultCallback, errorCallback ) {
        var signInForm = {
            Email: email,
            Password: password,
            Remember: remember
        };

        this.sendPostRequest( '/Auth/SignInByEmail', signInForm, resultCallback, errorCallback );
    },

    /**
     * Осуществляет вход пользователя в систему по номеру телефона
     *
     * @param {string} phoneNumber - номер телефона
     * @param {string} password - пароль
     * @param {string} remember - запомнить
     * @param {function} resultCallback - при успешном результате
     * @param {function} errorCallback - при неудачном результате
     */
    signInByPhoneNumber: function( phoneNumber, password, remember, resultCallback, errorCallback ) {
        var signInForm = {
            PhoneNumber: phoneNumber,
            Password: password,
            Remember: remember
        };

        this.sendPostRequest( '/Auth/SignInByPhoneNumber', signInForm, resultCallback, errorCallback );
    },

    /**
     * @public
     * @description Возвращает форму входа пользователя в систему через внешний провайдер.
     * @param successUrl
     * @param failureUrl
     * @param resultCallback
     * @param errorCallback
     */
    getSignInExternalForm: function( successUrl, failureUrl, resultCallback, errorCallback ) {
        this.getExternalLoginForm( '/Auth/SignInExternal', successUrl, failureUrl, resultCallback, errorCallback );
    },

    /**
     * @public
     * @description Возвращает форму добавления текущему пользователю имени входа у внешнего провайдера.
     * @param successUrl
     * @param failureUrl
     * @param resultCallback
     * @param errorCallback
     */
    getLinkExternalLoginForm: function( successUrl, failureUrl, resultCallback, errorCallback ) {
        this.getExternalLoginForm( '/Auth/LinkExternalLogin', successUrl, failureUrl, resultCallback, errorCallback );
    },

    /**
     * @public
     * @description Удаляет у текущего пользователя имя входа у внешнего провайдера.
     * @param provider
     * @param providerKey
     * @param resultCallback
     * @param errorCallback
     */
    unlinkExternalLogin: function( provider, providerKey, resultCallback, errorCallback ) {
        var unlinkExternalLoginForm = {
            Provider: provider,
            ProviderKey: providerKey
        };

        this.sendPostRequest( '/Auth/UnlinkExternalLogin', unlinkExternalLoginForm, resultCallback, errorCallback );
    },

    /**
     * @public
     * @description Выход пользователя из системы.
     * @param resultCallback
     * @param errorCallback
     */
    signOut: function( resultCallback, errorCallback ) {
        var signOutInternalForm = {
            'id': null,
            'changesObject': {},
            'replace': false
        };

        this.sendPostRequestForServiceResult( '/Auth/SignOut', null, function() {
            if( typeof InfinniUI.user !== 'undefined' && InfinniUI.user !== null ) {
                InfinniUI.user.onReadyDeferred = $.Deferred();
                InfinniUI.user.onReadyDeferred.resolve( null );
            }

            var args = _.toArray( arguments );
            if( resultCallback ) {
                resultCallback.apply( this, args );
            }

            this.handlers.onSignOut.fire.apply( this.handlers.onSignOut, args );
        }.bind( this ), errorCallback );
    },

    /**
     * @public
     * @param requestUri
     * @param successUrl
     * @param failureUrl
     * @param resultCallback
     * @param errorCallback
     */
    getExternalLoginForm: function( requestUri, successUrl, failureUrl, resultCallback, errorCallback ) {
        var url = this.baseAddress + requestUri;

        this.sendPostRequest( '/Auth/GetExternalProviders', {},
            function( result ) {
                var formElement = $( document.createElement( 'form' ) );
                formElement.attr( 'method', 'POST' );
                formElement.attr( 'action', url );

                var successUrlElement = $( document.createElement( 'input' ) );
                successUrlElement.attr( 'type', 'hidden' );
                successUrlElement.attr( 'name', 'SuccessUrl' );
                successUrlElement.attr( 'value', successUrl );
                formElement.append( successUrlElement );

                var failureUrlElement = $( document.createElement( 'input' ) );
                failureUrlElement.attr( 'type', 'hidden' );
                failureUrlElement.attr( 'name', 'FailureUrl' );
                failureUrlElement.attr( 'value', failureUrl );
                formElement.append( failureUrlElement );

                if( result !== null && typeof result !== 'undefined' ) {
                    for( var i = 0; i < result.length; ++i ) {
                        var providerInfo = result[ i ];
                        var providerType = providerInfo.Type;
                        var providerName = providerInfo.Name;

                        var loginButton = $( document.createElement( 'button' ) );
                        loginButton.attr( 'type', 'submit' );
                        loginButton.attr( 'name', 'Provider' );
                        loginButton.attr( 'value', providerType );
                        loginButton.text( providerName );
                        formElement.append( loginButton );
                    }
                }

                resultCallback( formElement );
            },
            errorCallback
        );
    },

    /**
     *
     * @param requestUri
     * @param resultCallback
     * @param errorCallback
     */
    sendGetRequest: function( requestUri, resultCallback, errorCallback ) {
        $.ajax( this.baseAddress + requestUri, {
            type: 'GET',
            xhrFields: {
                withCredentials: true
            },
            beforeSend: this.onBeforeRequest(),
            success: this.onSuccessRequest( resultCallback ),
            error: this.onErrorRequest( function( error ) {
                if( errorCallback ) {
                    errorCallback( error.responseJSON );
                }
            } )
        } );
    },

    /**
     *
     * @param requestUri
     * @param requestData
     * @param resultCallback
     * @param errorCallback
     */
    sendPostRequest: function( requestUri, requestData, resultCallback, errorCallback ) {
        var that = this;

        if( requestData !== null ) {
            requestData = JSON.stringify( requestData );
        }
        $.ajax( this.baseAddress + requestUri, {
            type: 'POST',
            xhrFields: {
                withCredentials: true
            },
            data: requestData,
            contentType: 'application/json',
            beforeSend: this.onBeforeRequest(),
            success: this.onSuccessRequest( resultCallback ),
            error: this.onErrorRequest( function( error ) {
                if( error.status != 200 ) {
                    if( errorCallback ) {
                        errorCallback( error.responseJSON );
                    }
                } else {
                    that.onSuccessRequest( resultCallback ).apply( that, arguments );
                }
            } )
        } );
    },

    /**
     *
     * @param requestUri
     * @param requestData
     * @param successCallback
     * @param errorCallback
     */
    sendPostRequestForServiceResult: function( requestUri, requestData, successCallback, errorCallback ) {
        var resultCallback = function() {
            var args = _.toArray( arguments ),
                serviceResult = args[ 0 ];

            if( serviceResult[ 'Success' ] ) {
                args[ 0 ] = serviceResult[ 'Result' ];

                if( typeof successCallback === 'function' ) {
                    successCallback.apply( this, args );
                }
            } else {
                args[ 0 ] = serviceResult[ 'Error' ];

                if( typeof errorCallback === 'function' ) {
                    errorCallback.apply( this, args );
                }
            }
        };

        this.sendPostRequest( requestUri, requestData, resultCallback, errorCallback );
    },

    /**
     *
     * @param handler
     */
    onActiveRoleChanged: function( handler ) {
        this.handlers.onActiveRoleChanged.add( handler );
    },

    /**
     *
     * @param handler
     */
    onSignInInternal: function( handler ) {
        this.handlers.onSignInInternal.add( handler );
    },

    /**
     *
     * @param handler
     */
    onSignOut: function( handler ) {
        this.handlers.onSignOut.add( handler );
    }
} );

_.extend( AuthenticationProvider.prototype, ajaxRequestMixin );

InfinniUI.global.session = new AuthenticationProvider( InfinniUI.config.serverUrl );

//####app/utils/basePathOfProperty.js
/**
 *
 * @param basePathOfProperty
 * @param baseIndex
 * @param parentBasePath
 * @constructor
 */
function BasePathOfProperty( basePathOfProperty, baseIndex, parentBasePath ) {
    if( this.isRelativeProperty( basePathOfProperty ) ) {
        this.basePathOfProperty = parentBasePath.basePathOfProperty + this.excludeFirstChar( basePathOfProperty );
    } else {
        this.basePathOfProperty = basePathOfProperty;
    }

    if( !parentBasePath ) {
        if( typeof baseIndex !== 'undefined' && baseIndex !== null ) {
            this.indexesInParentLists = [ baseIndex ];
            this.basePathOfProperty += baseIndex;
        }
    } else {
        this.indexesInParentLists = parentBasePath.indexesInParentLists ? parentBasePath.indexesInParentLists.slice() : [];
        this.indexesInParentLists.push( baseIndex );

        this.parentBasePath = parentBasePath;
    }
}

InfinniUI.BasePathOfProperty = BasePathOfProperty;

_.extend( BasePathOfProperty.prototype, {

    /**
     * @description возвращает полный путь к свойству элемента в коллекции
     * @param property
     * @returns {*}
     */
    resolveProperty: function( property ) {
        if( typeof property === 'undefined' || property === null ) {
            property = '';
        }

        if( this.isRelativeProperty( property ) ) {
            property = this.excludeFirstChar( property );
            return stringUtils.formatProperty( this.basePathOfProperty + property, this.indexesInParentLists );
        } else {
            return stringUtils.formatProperty( property, this.indexesInParentLists );
        }
    },

    /**
     * @description возвращает полный путь к свойству элемента в коллекции по заданному относительному пути
     * @param relativeProperty
     * @returns {*}
     */
    resolveRelativeProperty: function( relativeProperty ) {
        var property;

        if( this.basePathOfProperty != '' ) {
            property = this.basePathOfProperty + '.' + relativeProperty;
        } else {
            property = relativeProperty;
        }

        return this.resolveProperty( property );
    },

    /**
     * @description создает BasePathOfProperty следующего уровня
     * @param basePathOfProperty
     * @param baseIndex
     * @returns {BasePathOfProperty}
     */
    buildChild: function( basePathOfProperty, baseIndex ) {
        return new BasePathOfProperty( basePathOfProperty, baseIndex, this );
    },

    /**
     * @description создает BasePathOfProperty следующего уровня с относительным путем
     * @param basePathOfProperty
     * @param baseIndex
     * @returns {BasePathOfProperty}
     */
    buildRelativeChild: function( basePathOfProperty, baseIndex ) {
        return new BasePathOfProperty( basePathOfProperty, baseIndex, this );
    },

    /**
     *
     * @param property
     * @returns {boolean}
     */
    isRelativeProperty: function( property ) {
        return property.substr( 0, 1 ) == '@';
    },

    /**
     *
     * @param str
     * @returns {string}
     */
    excludeFirstChar: function( str ) {
        return str.substr( 1, str.length - 1 );
    }

} );

//####app/utils/blobUtils.js
/**
 * Набор утилит для работы с BlobData объектами
 **/
InfinniUI.BlobUtils = ( function() {
    var blobUtils = {
        isFileInfo: isFileInfo,
        getContentId: getContentByName.bind( null, 'Id' ),
        getName: getContentByName.bind( null, 'Name' ),
        getSize: getContentByName.bind( null, 'Size' ),
        getTime: getContentByName.bind( null, 'Time' ),
        getType: getContentByName.bind( null, 'Type' )
    };

    return blobUtils;

    /**
     *
     * @param data
     * @returns {*}
     */
    function isFileInfo( data ) {
        return data && blobUtils.getContentId( data );
    }

    /**
     *
     * @param name
     * @param data
     * @param defaultValue
     * @returns {*}
     */
    function getContentByName( name, data, defaultValue ) {
        return typeof data === 'object' ? data[ name ] : defaultValue;
    }
} )();

//####app/utils/clone.js
_.mixin( {

    /**
     *
     * @param value
     * @returns {*}
     */
    deepClone: function( value ) {
        if( value !== null && typeof value !== 'undefined' ) {
            return JSON.parse( JSON.stringify( value ) );
        }
        return value;
    },

    recursiveDeepCopy: function recursiveDeepCopy( objForCopy ) {
        var newObj;

        if( typeof objForCopy !== 'object' ) {
            return objForCopy;
        }

        if( !objForCopy ) {
            return objForCopy;
        }

        if( Array.isArray( objForCopy ) ) {
            newObj = [];

            for( var i = 0; i < objForCopy.length; i += 1 ) {
                newObj[ i ] = recursiveDeepCopy( objForCopy[ i ] );
            }

            return newObj;
        }

        newObj = {};

        for( var key in objForCopy ) {
            if( objForCopy.hasOwnProperty( key ) ) {
                newObj[ key ] = recursiveDeepCopy( objForCopy[ key ] );
            }
        }

        return newObj;
    }

} );

//####app/utils/currentView.js
/**
 *
 * @constructor
 */
var OpenedViewCollection = function() {
    var list = [];

    /**
     *
     * @param metadata
     * @param viewMetadata
     * @param view
     */
    this.appendView = function( metadata, viewMetadata, view ) {
        list.push( {
            metadata: metadata,
            viewMetadata: viewMetadata,
            view: view
        } );
    };

    /**
     *
     * @param view
     */
    this.removeView = function( view ) {
        for( var i = 0, ln = list.length; i < ln; i = i + 1 ) {
            if( view === list[ i ].view ) {
                list.splice( i, 1 );
                break;
            }
        }
    };

    /**
     *
     * @returns {*}
     */
    this.getLastView = function() {
        if( list.length === 0 ) {
            return;
        }

        return list[ list.length - 1 ];
    };

    /**
     *
     * @returns {Array}
     */
    this.getList = function() {
        return list;
    };

};

InfinniUI.views = new OpenedViewCollection();


//####app/utils/date.js
/**
 *
 * @type {{toISO8601, dateToTimestamp, dateToTimestampTime, changeTimezoneOffset, restoreTimezoneOffset, toDate, createDate, parseTimeISO8601toDate, parseISO8601toDate, checkRangeDate, getNearestDate, cloneDate, getDefaultTimeZone}}
 */
InfinniUI.DateUtils = ( function() {
    init();

    var _defaultTimeZone;

    return {
        toISO8601: toISO8601,
        dateToTimestamp: dateToTimestamp,
        dateToTimestampTime: dateToTimestampTime,
        changeTimezoneOffset: changeTimezoneOffset,
        restoreTimezoneOffset: restoreTimezoneOffset,
        toDate: toDate,
        createDate: createDate,
        parseTimeISO8601toDate: parseTimeISO8601toDate,
        parseISO8601toDate: parseISO8601toDate,
        checkRangeDate: checkRangeDate,
        getNearestDate: getNearestDate,
        cloneDate: cloneDate,
        getDefaultTimeZone: getDefaultTimezone
    };

    /**
     *
     * @param value
     * @returns {*}
     */
    function parseISO8601toDate( value ) {
        if( value === null || typeof value === 'undefined' ) {
            return value;
        }
        return moment( value ).toDate();
    }

    /**
     *
     * @param date
     * @returns {*}
     */
    function cloneDate( date ) {
        if( date instanceof Date ) {
            return new Date( date.getTime() );
        }
        return date;
    }

    /**
     * @description Возвращает ближаешее к исходному значению из диапазона
     * @param date
     * @param min
     * @param max
     * @returns {Date}
     */
    function getNearestDate( date, min, max ) {
        var nearest;
        var mMin = moment( min || null );
        var mMax = moment( max || null );
        var mVal = moment( date );

        if( mMin.isValid() && mVal.isBefore( mMin ) ) {
            nearest = mMin.toDate();
        } else if( mMax.isValid() && mVal.isAfter( mMax ) ) {
            nearest = mMax.toDate();
        } else {
            nearest = date;
        }

        return nearest;
    }

    /**
     * @description Проверяет, что дата находится в заданном диапазоне
     * @param date
     * @param minDate
     * @param maxDate
     * @param {String} precision
     * @returns {boolean}
     */
    function checkRangeDate( date, minDate, maxDate, precision ) {
        var success = true;
        var mMin = moment( minDate || null );
        var mMax = moment( maxDate || null );
        var mVal = moment( date );

        if( mMin.isValid() && mMax.isValid() ) {
            success = mVal.isSameOrBefore( mMax, precision ) && mVal.isSameOrAfter( mMin, precision );
        } else if( mMin.isValid() ) {
            success = mVal.isSameOrAfter( mMin, precision );
        } else if( mMax.isValid() ) {
            success = mVal.isSameOrBefore( mMax, precision );
        }

        return success;
    }

    /**
     *
     * @param value
     * @returns {*}
     */
    function parseTimeISO8601toDate( value ) {
        var date;
        var formats = [ 'HH:mm', 'HH:mm:ss', 'HH:mm:ss.SSS', 'HHmm', 'HHmmss', 'HHmmss.SSS' ];
        var m = moment( value, formats );

        if( m.isValid() ) {
            date = new Date( 0 );
            date.setHours( m.hours(), m.minute(), m.second(), m.millisecond() );
        }

        return date;
    }

    /**
     *
     * @param value
     * @returns {*}
     */
    function toDate( value ) {
        var m = moment( value );
        var date = null;

        if( m.isValid() ) {
            date = m.toDate();
        }

        return date;
    }

    /**
     *
     * @param date
     * @param timezoneOffset
     * @returns {*}
     */
    function changeTimezoneOffset( date, timezoneOffset ) {
        var newDate = date;

        if( typeof timezoneOffset !== 'undefined' && date instanceof Date ) {
            var currentOffset = date.getTimezoneOffset();

            if( timezoneOffset !== currentOffset ) {
                newDate = new Date( date.getTime() + ( currentOffset - timezoneOffset ) * 60 * 1000 );
            }
        }

        return newDate;
    }

    /**
     *
     * @param date
     * @param timezoneOffset
     * @returns {*}
     */
    function restoreTimezoneOffset( date, timezoneOffset ) {
        var newDate = date;

        if( typeof timezoneOffset !== 'undefined' && date instanceof Date ) {
            var currentOffset = date.getTimezoneOffset();

            if( timezoneOffset !== currentOffset ) {
                newDate = new Date( date.getTime() - ( currentOffset - timezoneOffset ) * 60 * 1000 );
            }
        }

        return newDate;
    }

    /**
     * @description Возвращает строковое представление даты в формате YYYY-MM-DDTHH:mm:ss.sss+HH:MM
     * @param {Date} date
     * @param {Object} options
     * @param {Number} options.timezoneOffset Смещение часового пояса относительно часового пояса UTC в минутах
     * @returns {string|null}
     */
    function toISO8601( date, options ) {
        var config = options || {};

        if( typeof date === 'undefined' || date === null ) {
            return null;
        }

        if( date.constructor !== Date ) {
            return null;
        }

        var _date = changeTimezoneOffset( date, config.timezoneOffset );

        var datePart = [
            padInt( _date.getFullYear(), 4 ),
            padInt( _date.getMonth() + 1, 2 ),
            padInt( _date.getDate(), 2 )
        ].join( '-' );

        var timePart = [
            padInt( _date.getHours(), 2 ),
            padInt( _date.getMinutes(), 2 ),
            padInt( _date.getSeconds(), 2 )
        ].join( ':' );

        var sssPart = padInt( _date.getMilliseconds(), 3 ) + '0';// '000' + '0'
        var timezoneOffset = config.timezoneOffset;

        if( typeof timezoneOffset === 'undefined' || timezoneOffset === null ) {
            timezoneOffset = date.getTimezoneOffset();
        }

        var tz = Math.abs( timezoneOffset );
        var tzOffsetPart = Math.sign( timezoneOffset ) > 0 ? '-' : '+';
        var tzPart = [
            padInt( Math.floor( tz / 60 ), 2 ),
            padInt( tz % 60, 2 )
        ].join( ':' );

        return datePart + 'T' + timePart + '.' + sssPart + tzOffsetPart + tzPart;
    }

    /**
     * @description Возвращает заданную дату как количество секунд, прошедших с 01-01-1970T00:00 по UTC
     * @param {String|Date} date ISO8601
     */
    function dateToTimestamp( date ) {
        var _date, datetime = null;

        if( date && date.constructor === String ) {
            _date = new Date( date );
        } else if( date && date.constructor === Date ) {
            _date = date;
        }

        if( _date ) {
            _date.setUTCHours( 0, 0, 0, 0 );
            datetime = _date.getTime() / 1000;
        }

        return datetime;
    }

    /**
     *
     * @param date
     * @returns {*}
     */
    function dateToTimestampTime( date ) {
        var time = null, _date, datetime;

        if( date && date.constructor === String ) {
            _date = new Date( date );
        } else if( date && date.constructor === Date ) {
            _date = date;
        }

        if( _date ) {
            datetime = new Date( 0 );
            datetime.setUTCHours( _date.getUTCHours(), _date.getUTCMinutes(), _date.getUTCSeconds(), _date.getUTCMilliseconds() );
            time = datetime.getTime() / 1000;
        }

        return time;
    }

    /**
     *
     * @param d
     * @returns {*}
     */
    function createDate( d ) {
        var date;

        if( typeof d === Date ) {
            date = new Date( d.getTime() );
        } else if( typeof d === 'number' ) {
            //Числовое значение интерпретируем как секунды (as unix-time)!
            date = new Date( d * 1000 );
        } else if( typeof d === 'undefined' || d === null ) {
            date = null;
        } else {
            date = toDate( d );
        }

        return date;
    }

    /**
     *
     * @returns {*}
     */
    function getDefaultTimezone() {
        return _defaultTimeZone;
    }

    /**
     *
     * @param value
     * @param size
     * @returns {string}
     */
    function padInt( value, size ) {
        var str = '' + value;
        var pad = '';

        if( str.length < size ) {
            pad = new Array( size - str.length + 1 ).join( '0' );
        }
        return pad + str;
    }

    /**
     *
     */
    function init() {
        var date = new Date();
        _defaultTimeZone = date.getTimezoneOffset();

        if( !Math.sign ) { //fix for devices not support ES6
            Math.sign = function( x ) {
                return x ? x < 0 ? -1 : 1 : 0;
            };
        }
    }

} )();

//####app/utils/domHelper.js
/**
 *
 * @type {{whenReady: domHelper.whenReady}}
 */
var domHelper = {

    /**
     *
     * @param conditionFunction
     * @param onConditionFunction
     * @param n
     */
    whenReady: function( conditionFunction, onConditionFunction, n ) {
        var that = this;

        if( typeof n === 'undefined' ) {
            n = 100;
        }

        if( !conditionFunction() ) {
            if( n > 0 ) {
                setTimeout( function() {
                    that.whenReady( conditionFunction, onConditionFunction, n - 1 );
                }, 510 );
            }
        }else{
            onConditionFunction();
        }
    }

};

InfinniUI.domHelper = domHelper;

//####app/utils/dot.js
/**
 * @description Синглтон для работы с путями построенными по dot-notation
 * @type {{getPropertyValue, setPropertyValue, setPropertyValueDirect}}
 */
InfinniUI.ObjectUtils = ( function() {

    /**
     * @description Возвращает значение свойства.
     * @private
     * @param {*} target Исходный объект.
     * @param {array} propertyPathTerms Путь к свойству объекта в виде коллекции термов.
     * @returns {*} Значение свойства.
     */
    function getPropertyByPath( target, propertyPathTerms ) {
        if( target !== null && typeof target !== 'undefined'
            && propertyPathTerms !== null && typeof propertyPathTerms !== 'undefined' ) {

            var parent = target;
            var length = propertyPathTerms.length;

            for( var i = 0; i < length; ++i ) {
                if( parent !== null && typeof parent !== 'undefined' ) {
                    var term = propertyPathTerms[ i ];
                    var termCollectionIndex = parseCollectionIndex( term );

                    if( termCollectionIndex >= 0 ) {
                        parent = getCollectionItem( parent, termCollectionIndex );
                    }
                    else {
                        parent = getObjectProperty( parent, term );
                    }
                }
                else {
                    return null;
                }
            }

            return parent;
        }

        return target;
    }

    /**
     * @description Возвращает значение свойства.
     * @private
     * @param {*} target Исходный объект.
     * @param {array} propertyPathTerms Путь к свойству объекта в виде коллекции термов.
     * @param {*} propertyValue Значение свойства объекта.
     * @returns {*} Значение свойства.
     */
    function setPropertyByPath( target, propertyPathTerms, propertyValue ) {
        var parent = target;
        var length = propertyPathTerms.length - 1;
        var term = propertyPathTerms[ 0 ];
        var termCollectionIndex = parseCollectionIndex( term );

        for( var i = 0; i < length; ++i ) {
            var termValue = ( termCollectionIndex >= 0 )
                ? getCollectionItem( parent, termCollectionIndex )
                : getObjectProperty( parent, term );

            var nextTerm = propertyPathTerms[ i + 1 ];
            var nextTermCollectionIndex = parseCollectionIndex( nextTerm );

            if( nextTermCollectionIndex >= 0 ) {
                if( !Array.isArray( termValue ) ) {
                    termValue = [];
                }

                setCollectionItem( parent, termCollectionIndex, termValue );
            } else {
                if( !$.isPlainObject( termValue ) ) {
                    termValue = {};
                }

                setObjectProperty( parent, term, termValue );
            }

            parent = termValue;
            term = nextTerm;
            termCollectionIndex = nextTermCollectionIndex;
        }

        if( termCollectionIndex >= 0 ) {
            setCollectionItem( parent, termCollectionIndex, propertyValue );
        }
        else {
            setObjectProperty( parent, term, propertyValue );
        }
    }


    /**
     * @description Разбивает путь к свойству, записанному в dot-notation, на термы.
     * @private
     * @param {string} propertyPath Имя свойства.
     */
    function splitPropertyPath( propertyPath ) {
        if( _.isEmpty( propertyPath ) ) {
            return null;
        }

        return propertyPath.split( '.' );
    }

    /**
     * @description Пытается интерпретировать имя свойства, как индекс элемента коллекции.
     * @private
     * @param {string} propertyName Имя свойства.
     * @returns {number} Индекс элемента коллекции или -1.
     */
    function parseCollectionIndex( propertyName ) {
        var index = -1;

        if( propertyName === '$' ) {
            index = 0;
        }
        else {
            var tryParse = parseInt( propertyName );

            if( !isNaN( tryParse ) ) {
                index = tryParse;
            }
        }

        return index;
    }


    /**
     * @description Возвращает элемент коллекции.
     * @private
     * @param {array} target Исходная коллекция.
     * @param {number} index Индекс элемента.
     * @returns {*} Элемент коллекции.
     */
    function getCollectionItem( target, index ) {
        if( target !== null && typeof target !== 'undefined'
            && Object.prototype.toString.call( target ) === '[object Array]'
            && index >= 0 && index < target.length ) {

            return target[ index ];
        }

        return null;
    }

    /**
     * @description Устанавливает элемент коллекции.
     * @private
     * @param {array} target Исходная коллекция.
     * @param {number} index Индекс элемента.
     * @param {*} item Элемент коллекции.
     */
    function setCollectionItem( target, index, item ) {
        if( target !== null && typeof target !== 'undefined'
            && Object.prototype.toString.call( target ) === '[object Array]'
            && index >= 0 && index < target.length ) {

            target[ index ] = item;
        }
    }


    /**
     * @description Возвращает значение свойства объекта.
     * @private
     * @param {object} target Исходный объект.
     * @param {string} propertyName Наименование свойства.
     * @returns {*} Значение свойства.
     */
    function getObjectProperty( target, propertyName ) {
        if( target !== null && typeof target !== 'undefined'
            && Object.prototype.toString.call( target ) === '[object Object]'
            && propertyName !== null && typeof propertyName !== 'undefined' ) {

            return target[ propertyName ];
        }

        return null;
    }

    /**
     * @description Устанавливает значение свойства объекта.
     * @private
     * @param {object} target Исходный объект.
     * @param {string} propertyName Наименование свойства.
     * @param {*} propertyValue Значение свойства.
     */
    function setObjectProperty( target, propertyName, propertyValue ) {
        if( target !== null && typeof target !== 'undefined'
            && Object.prototype.toString.call( target ) === '[object Object]'
            && propertyName !== null && typeof propertyName !== 'undefined' ) {

            target[ propertyName ] = propertyValue;
        }
    }

    return {

        /**
         * @description Возвращает значение свойства.
         * @public
         * @param {*} target Исходный объект.
         * @param {string|Object} propertyPath Путь к свойству или объект для построения значения.
         * @returns {*} Значение свойства.
         */
        getPropertyValue: function( target, propertyPath ) {
            var result;
            var getPropertyValue = function( target, propertyPath ) {
                var propertyPathTerms = splitPropertyPath( propertyPath );
                var result = getPropertyByPath( target, propertyPathTerms );

                return typeof result === 'undefined' ? null : result;
            };

            if( typeof propertyPath === 'object' ) {
                result = {};
                for( var key in propertyPath ) {
                    if( propertyPath.hasOwnProperty( key ) ) {
                        var value = propertyPath[ key ];
                        result[ key ] = getPropertyValue( target, value );
                    }
                }
            } else {
                result = getPropertyValue( target, propertyPath );
            }
            return result;
        },

        /**
         * @description Устанавливает значение свойства.
         * @public
         * @param {*} target Исходный объект.
         * @param {string} propertyPath Путь к свойству.
         * @param {*} propertyValue Значение свойства.
         */
        setPropertyValue: function( target, propertyPath, propertyValue ) {
            if( target !== null && typeof target !== 'undefined' && !_.isEmpty( propertyPath ) ) {
                var propertyPathTerms = splitPropertyPath( propertyPath );

                if( propertyValue instanceof Date ) {
                    setPropertyByPath( target, propertyPathTerms, new Date( propertyValue ) );
                } else if( propertyValue instanceof File ) {
                    setPropertyByPath( target, propertyPathTerms, propertyValue );
                } else {
                    setPropertyByPath( target, propertyPathTerms, propertyValue );
                }
            }
        },

        /**
         *
         * @param target
         * @param propertyPath
         * @param propertyValue
         */
        setPropertyValueDirect: function( target, propertyPath, propertyValue ) {
            if( target !== null && typeof target !== 'undefined' && !_.isEmpty( propertyPath ) ) {
                var propertyPathTerms = splitPropertyPath( propertyPath );
                setPropertyByPath( target, propertyPathTerms, propertyValue );
            }
        }
    };

} )();



//####app/utils/eventsManager.js
/**
 *
 * @constructor
 */
function EventsManager() {
    this.handlers = {};
}

InfinniUI.EventsManager = EventsManager;

/**
 *
 * @param event
 * @param handler
 * @returns {{off}}
 */
EventsManager.prototype.on = function( event, handler ) {
    if ( typeof this.handlers[ event ] === 'undefined' ) {
        this.handlers[ event ] = [];
    }

    var handlers = this.handlers[ event ];
    handlers.push( handler );

    return {
        off: this.off.bind( this, event, handler )
    };
};

/**
 *
 * @param event
 * @param handler
 */
EventsManager.prototype.off = function( event, handler ) {
    if ( typeof event !== 'undefined' ) {
        var handlers = this.handlers[ event ];

        if ( Array.isArray( handlers ) ) {
            for( var i = 0; i < handlers.length; i = i + 1 ) {
                if ( handlers[ i ] === handler ) {
                    handlers.splice( i, 1 );
                    break;
                }
            }
        }
    }
};

/**
 *
 * @param event
 */
EventsManager.prototype.trigger = function( event ) {
    var handlers = this.handlers[ event ];
    var args = Array.prototype.slice.call( arguments, 1 );
    var deferred = $.Deferred();

    if ( Array.isArray( handlers ) ) {
        var results = handlers.map( function( handler ) {
            return handler.apply( null, args );
        } );
        $.when.apply( $, results )
            .done( function() {
                var results = Array.prototype.slice.call( arguments );
                var cancel = results.some( function( res ) {
                    return res === false;
                } );

                if ( cancel ) {
                    deferred.reject();
                } else {
                    deferred.resolve( results );
                }
            } )
            .fail( function() {
                deferred.reject();
            } );
    } else {
        deferred.resolve();
    }

    return deferred.promise();
};

//####app/utils/exifRotate.js
var exifRotate = {

    rotation: {
        1: 'rotate(0deg)',
        3: 'rotate(180deg)',
        6: 'rotate(90deg)',
        8: 'rotate(270deg)'
    },

    /**
     *
     * @param buffer
     * @returns {string}
     * @private
     */
    _arrayBufferToBase64: function( buffer ) {
        var binary = '';
        var bytes = new Uint8Array( buffer );
        var len = bytes.byteLength;
        for( var i = 0; i < len; i++ ) {
            binary += String.fromCharCode( bytes[ i ] );
        }
        return window.btoa( binary );
    },

    /**
     *
     * @param file
     * @param callback
     */
    orientation: function( file, callback ) {
        var that = this;
        var fileReader = new FileReader();
        fileReader.onloadend = function() {
            var base64img = 'data:' + file.type + ';base64,' + that._arrayBufferToBase64( fileReader.result );
            var scanner = new DataView( fileReader.result );
            var idx = 0;
            var value = 1; // Non-rotated is the default
            if( fileReader.result.length < 2 || scanner.getUint16( idx ) != 0xFFD8 ) {
                // Not a JPEG
                if( callback ) {
                    callback( base64img, value );
                }
                return;
            }
            idx += 2;
            var maxBytes = scanner.byteLength;
            while( idx < maxBytes - 2 ) {
                var uint16 = scanner.getUint16( idx );
                idx += 2;
                switch( uint16 ) {
                    case 0xFFE1: // Start of EXIF
                        var exifLength = scanner.getUint16( idx );
                        maxBytes = exifLength - idx;
                        idx += 2;
                        break;
                    case 0x0112: // Orientation tag
                        value = scanner.getUint16( idx + 6, false );
                        maxBytes = 0; // Stop scanning
                        break;
                    default:
                        break;
                }
            }
            if( callback ) {
                callback( base64img, value );
            }
        };

        fileReader.readAsArrayBuffer( file );
    }

};

InfinniUI.exifRotate = exifRotate;

//####app/utils/fileSize.js
InfinniUI = InfinniUI || {};
InfinniUI.format = InfinniUI.format || {};

/**
 *
 * @param size
 * @returns {string}
 */
InfinniUI.format.humanFileSize = function( size ) {
    /**
     * @see {@link http://stackoverflow.com/questions/10420352/converting-file-size-in-bytes-to-human-readable}
     */
    var i = Math.floor( Math.log( size ) / Math.log( 1024 ) );
    return ( size / Math.pow( 1024, i ) ).toFixed( 2 ) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][ i ];
};

//####app/utils/filterItems.js
/**
 *
 */
var filterItems = ( function() {
    return function( items, filter ) {
        if( !filter ) {
            return items;
        }

        var itemsForFilter = JSON.parse( JSON.stringify( items ) );
        var filterMethods = filterItems.filterMethods;
        var filterTree = filterItems.filterTreeBuilder.buildUpFilterTree( filter );

        /**
         *
         * @param value
         * @returns {*}
         */
        function stringToNum( value ) {
            if( typeof value === 'string' && !isNaN( value ) && value !== '' ) {
                value = +value;
            }
            return value;
        }

        /**
         *
         * @param value
         * @returns {*}
         */
        function stringToNumAsString( value ) {
            if( typeof value === 'string' && value.slice( 0, 1 ) === '\'' ) {
                value = value.slice( 1, -1 );
            }
            return value;
        }

        /**
         *
         * @param value
         * @returns {*}
         */
        function stringToBoolean( value ) {
            if( value === 'true' ) {
                value = true;
            } else if( value === 'false' ) {
                value = false;
            } else if( value === 'null' ) {
                value = null;
            }
            return value;
        }

        /**
         *
         * @param value
         * @returns {*}
         */
        function stringToArr( value ) {
            if( typeof value === 'string' && value.search( /\[[\'a-zA-Z0-9,]+\]/ ) !== -1 ) {
                value = value.slice( 1, -1 ).split( ',' );
                for( var i = 0, ii = value.length; i < ii; i += 1 ) {
                    if( value[ i ].slice( -1 ) === '\'' ) {
                        value[ i ] = value[ i ].slice( 1, -1 );
                    }
                    value[ i ] = stringToBoolean( value[ i ] );
                    value[ i ] = stringToNum( value[ i ] );
                    value[ i ] = stringToNumAsString( value[ i ] );
                }
            }
            return value;
        }

        /**
         *
         * @param currentContext
         * @param currentFunc
         * @returns {*}
         */
        function findContext( currentContext, currentFunc ) {
            if( currentFunc.functionName === 'match' ) {
                currentContext = currentFunc.children[ 0 ].valueName;
            }
            return currentContext;
        }

        /**
         *
         * @param filterTree
         * @param items
         * @param context
         * @returns {*}
         */
        function filterExec( filterTree, items, context ) { // filterTree is object, items is array
            var tmpChild1, tmpChild2 = [];
            // find context
            context = findContext( context, filterTree );
            for( var j = 0, jj = filterTree.children.length; j < jj; j += 1 ) {
                // if any child is function
                // call filterExec with children of this child
                if( filterTree.children[ j ].type === 'function' ) {
                    tmpChild1 = filterTree.children[ j ];

                    filterTree.children[ j ].valueName = filterExec( tmpChild1, items, context );
                    filterTree.children[ j ].newType = 'value';
                }
                if( filterTree.children[ j ].type === 'value' || filterTree.children[ j ].newType === 'value' ) {
                    if( filterTree.children[ j ].type === 'value' ) {
                        filterTree.children[ j ].valueName = stringToNum( filterTree.children[ j ].valueName ); // check on Number
                        filterTree.children[ j ].valueName = stringToNumAsString( filterTree.children[ j ].valueName ); // check on Number as string
                        filterTree.children[ j ].valueName = stringToBoolean( filterTree.children[ j ].valueName ); // check on Boolean
                        filterTree.children[ j ].valueName = stringToArr( filterTree.children[ j ].valueName ); // check on Array
                    }
                    tmpChild2.push( filterTree.children[ j ].valueName );
                }
            }
            return filterMethods[ filterTree.functionName ]( tmpChild2, items, context ); // tmpChild2 is array
        }

        return filterExec( filterTree, itemsForFilter );
    };

} )( filterItems );

InfinniUI.FilterItems = filterItems;

/**
 *
 */
filterItems.filterTreeBuilder = ( function() {
    var that = {};

    /**
     *
     * @param filter
     * @returns {Array}
     */
    var splitStringToArray = function( filter ) { //filter is string
        var tmpArr;
        var tmpNum;
        var tmpString;
        var tmpString2;
        var tmpRE;
        var reForDates = /date\(\'[\d\wа-яёА-ЯЁ\:\-\+\.\s]+\'\)/g;
        var reForParamAsArray = /\,[\d\wа-яёА-ЯЁ\'\,\_\.]+\)/g;
        var reForArrayFromOneElem = /\[[\d\w\'\_\.]+\]/g;
        var reForElemsOfTree = /[\w]+[(]|\[[\d\wа-яёА-ЯЁ\S]+\]|[-\']{0,1}[\d\wа-яёА-ЯЁ_\.]+[\']{0,1}[,)$]/g;
        var reForClosingBrackets = /[)]/g;
        var reForRegExp = /\'([\d\w\S\W\D]+\s*)+\'/g;
        var reForSpaces = /\s+/g;
        var reForFewWordsInQuotes = /\'([\d\wа-яёА-ЯЁ\s]+\s*)+\'/g;
        var arr = [];

        while( tmpArr = reForDates.exec( filter ) ) { // search all dates and convert it to number of s [0.000]
            tmpNum = Date.parse( tmpArr[ 0 ].slice( 6, -2 ) ) / 1000 + '';
            filter = filter.slice( 0, tmpArr.index ) + tmpNum + filter.slice( tmpArr.index + tmpArr[ 0 ].length );
            reForDates.lastIndex = tmpArr.index + tmpNum.length;
        }
        while( tmpArr = reForRegExp.exec( filter ) ) { // search for regexp
            tmpNum = tmpArr[ 0 ];
            if( tmpNum.search( reForSpaces ) !== -1 || tmpNum.search( reForFewWordsInQuotes ) !== -1 ) {
                while( tmpString = reForFewWordsInQuotes.exec( tmpNum ) ) {
                    tmpString2 = tmpString[ 0 ].replace( reForSpaces, '_' );
                    tmpNum = tmpNum.slice( 0, tmpString.index ) + tmpString2 + tmpNum.slice( tmpString.index + tmpString[ 0 ].length );
                }
            } else {
                tmpRE = tmpNum.slice( 1, -1 );
                tmpNum = 'tmpRE';
            }
            filter = filter.slice( 0, tmpArr.index ) + tmpNum + filter.slice( tmpArr.index + tmpArr[ 0 ].length );
            reForRegExp.lastIndex = tmpArr.index + tmpNum.length;
        }
        filter = filter.replace( /\s+/g, '' );
        while( tmpArr = reForParamAsArray.exec( filter ) ) { // search second param
            tmpNum = '[' + tmpArr[ 0 ].slice( 1, -1 ) + '])';
            filter = filter.slice( 0, tmpArr.index + 1 ) + tmpNum + filter.slice( tmpArr.index + tmpArr[ 0 ].length );
            reForParamAsArray.lastIndex = tmpArr.index + tmpNum.length;
        }
        while( tmpArr = reForArrayFromOneElem.exec( filter ) ) { // convert array from 1 element to number or string or boolean
            tmpNum = tmpArr[ 0 ].slice( 1, -1 );
            filter = filter.slice( 0, tmpArr.index ) + tmpNum + filter.slice( tmpArr.index + tmpArr[ 0 ].length );
            reForArrayFromOneElem.lastIndex = tmpArr.index + tmpNum.length;
        }
        while( tmpArr = reForElemsOfTree.exec( filter ) ) { // search all functions and values with their index
            if( tmpArr[ 0 ].length > 1 && ( tmpArr[ 0 ].slice( -1 ) === ',' || tmpArr[ 0 ].slice( -1 ) === ')' ) ) {
                tmpArr[ 0 ] = tmpArr[ 0 ].slice( 0, -1 );
            }
            if( tmpArr[ 0 ].length > 1 && tmpArr[ 0 ].slice( 0, 1 ) === '\'' ) {
                if( isNaN( tmpArr[ 0 ].slice( 1, -1 ) ) ) {
                    tmpArr[ 0 ] = tmpArr[ 0 ].slice( 1, -1 );
                }
            }
            if( tmpArr[ 0 ].search( /tmpRE/ ) !== -1 ) {
                tmpArr[ 0 ] = tmpArr[ 0 ].slice( 1, -1 ).split( ',' );
                tmpArr[ 0 ][ 0 ] = tmpRE;
            }
            arr.push( tmpArr );
        }
        while( tmpArr = reForClosingBrackets.exec( filter ) ) { // search all closing brackets with their index
            arr.push( tmpArr );
        }
        arr.sort( function( a, b ) { // sort arr by indexes to put all data in right order
            return a.index - b.index;
        } );
        return arr;
    };

    /**
     *
     * @param arrayToDivide
     * @returns {[*,*]}
     */
    var divideToFunctionsAndValues = function( arrayToDivide ) { //arrayToDivide is array
        var tmpArr = [];
        var values = [];
        var filterArr = [];
        var counter = 0;
        var that;
        var tmpSymbol;
        var thatValue;
        var firstPart;

        // split all data to different functions
        for( var i = 0, ii = arrayToDivide.length; i < ii; i += 1 ) {
            if( typeof arrayToDivide[ i ][ 0 ] === 'string' ) {
                tmpSymbol = arrayToDivide[ i ][ 0 ].slice( -1 );
            } else {
                tmpSymbol = ']';
            }
            if( tmpSymbol === '(' ) { // define functions from string
                that = {};
                that.type = 'function';
                that.functionName = arrayToDivide[ i ][ 0 ].slice( 0, -1 );
                that.index = arrayToDivide[ i ].index;
                tmpArr.push( that );
            } else if( tmpSymbol === ')' ) { // define where end of function
                filterArr[ counter ] = [];
                firstPart = tmpArr.pop();
                firstPart.range = [];
                firstPart.range.push( firstPart.index );
                firstPart.children = [];
                firstPart.range.push( arrayToDivide[ i ].index );
                filterArr[ counter ] = firstPart;
                counter += 1;
            } else { // define params that are values
                thatValue = {};
                thatValue.type = 'value';
                thatValue.valueName = arrayToDivide[ i ][ 0 ];
                thatValue.index = arrayToDivide[ i ].index;
                values.push( thatValue );
            }
        }
        return [ filterArr, values ];
    };

    /**
     *
     * @param filterArr
     * @param values
     * @returns {*}
     */
    var addValuesAsChildren = function( filterArr, values ) { // filterArr, values are arrays
        //add values to right place as children for functions
        //define right place by range of index property
        for( var i = 0, ii = values.length; i < ii; i += 1 ) {
            for( var j = 0, jj = filterArr.length; j < jj; j += 1 ) {
                if( values[ i ] !== null && typeof values[ i ] !== 'undefined' ) {
                    if( values[ i ].index > filterArr[ j ].range[ 0 ] && values[ i ].index < filterArr[ j ].range[ 1 ] ) {
                        filterArr[ j ].children.push( values[ i ] );
                        values[ i ] = null;
                    }
                }
            }
        }
        return filterArr;
    };

    /**
     *
     * @param filterArr
     * @returns {*}
     */
    var filterArrToTree = function( filterArr ) { // filterArr is array
        // build up a filter tree
        // by putting some functions as children for other
        for( var i = 0; i < filterArr.length; i += 1 ) {
            for( var j = 0; j < filterArr.length; j += 1 ) {
                if( ( filterArr[ j ] !== null && typeof filterArr[ j ] !== 'undefined' ) ||
                    ( filterArr[ i ] !== null && typeof filterArr[ i ] !== 'undefined' ) ) {
                    //search for first result[j] where we can put result[i] as his child
                    //if find, put it and remove result[i]
                    if( filterArr[ i ].range[ 0 ] > filterArr[ j ].range[ 0 ] && filterArr[ i ].range[ 1 ] < filterArr[ j ].range[ 1 ] ) {
                        //if result[j] already have any children, check their indexes to define where put new child
                        if( typeof filterArr[ j ].children[ 0 ] !== 'undefined' && filterArr[ j ].children[ 0 ].index > filterArr[ i ].range[ 0 ] ) {
                            filterArr[ j ].children.unshift( filterArr[ i ] );
                            filterArr.splice( i, 1 );
                            i -= 1;
                            break;
                        } else {
                            filterArr[ j ].children.push( filterArr[ i ] );
                            filterArr.splice( i, 1 );
                            i -= 1;
                            break;
                        }
                    }
                }
            }
        }
        return filterArr[ 0 ];
    };
    that.buildUpFilterTree = function( filter ) { // filter is string
        var tmpArr;

        tmpArr = splitStringToArray( filter );
        tmpArr = divideToFunctionsAndValues( tmpArr );
        tmpArr = addValuesAsChildren( tmpArr[ 0 ], tmpArr[ 1 ] );

        return filterArrToTree( tmpArr );
    };
    return that;
} )();

//sub method for filterItems with filter methods
filterItems.filterMethods = ( function() {
    var that = {};

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.eq = function( value, items, context ) { // value is array: value[0] - param, value[1] - value
        var tmpResult = [];
        var tmpResult2;
        var length;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            if( context ) {
                tmpResult2 = [];
                if( typeof items[ i ][ context ] === 'undefined' ) {
                    length = -1;
                } else {
                    length = items[ i ][ context ].length;
                }
                for( var j = 0, jj = length; j < jj; j += 1 ) {
                    if( globalUI.getPropertyValue( items[ i ][ context ][ j ], value[ 0 ] ) === value[ 1 ] ) {
                        tmpResult2.push( items[ i ] );
                    }
                }
                if( length === tmpResult2.length ) {
                    tmpResult.push( items[ i ] );
                }
            } else {
                if( globalUI.getPropertyValue( items[ i ], value[ 0 ] ) === value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param values
     * @param items
     * @param context
     * @returns {*}
     */
    that.and = function( values, items, context ) {
        return _.intersection.apply( _, values );
    };

    /**
     *
     * @param values
     * @param items
     * @param context
     * @returns {*}
     */
    that.or = function( values, items, context ) {
        return _.union.apply( _, values );
    };

    /**
     *
     * @param values
     * @param items
     * @param context
     */
    that.not = function( values, items, context ) { // values[0] is array
        var tmpResult = items.slice();
        return _.difference( tmpResult, values[ 0 ] );
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.notEq = function( value, items, context ) {
        var tmpResult = [];
        var tmpResult2;
        var length;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            if( context ) {
                tmpResult2 = [];
                if( typeof items[ i ][ context ] === 'undefined' ) {
                    length = -1;
                } else {
                    length = items[ i ][ context ].length;
                }
                for( var j = 0, jj = length; j < jj; j += 1 ) {
                    if( globalUI.getPropertyValue( items[ i ][ context ][ j ], value[ 0 ] ) !== value[ 1 ] ) {
                        tmpResult2.push( items[ i ] );
                    }
                }
                if( length === tmpResult2.length ) {
                    tmpResult.push( items[ i ] );
                }
            } else {
                if( globalUI.getPropertyValue( items[ i ], value[ 0 ] ) !== value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                }
            }
        }
        return tmpResult;
    };

    // compare for numbers and dates
    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.gt = function( value, items, context ) { // value is array: value[0] - param, value[1] - value
        var tmpResult = [];
        var tmpResult2;
        var length;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            if( context ) {
                tmpResult2 = [];
                if( typeof items[ i ][ context ] === 'undefined' ) {
                    length = -1;
                } else {
                    length = items[ i ][ context ].length;
                }
                for( var j = 0, jj = length; j < jj; j += 1 ) {
                    if( globalUI.getPropertyValue( items[ i ][ context ][ j ], value[ 0 ] ) > value[ 1 ] ) {
                        tmpResult2.push( items[ i ] );
                    }
                }
                if( length === tmpResult2.length ) {
                    tmpResult.push( items[ i ] );
                }
            } else {
                if( globalUI.getPropertyValue( items[ i ], value[ 0 ] ) > value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                }
            }
        }
        return tmpResult;
    };

    // compare for numbers and dates
    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.gte = function( value, items, context ) { // value is array: value[0] - param, value[1] - value
        var tmpResult = [];
        var tmpResult2;
        var length;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            if( context ) {
                tmpResult2 = [];
                if( typeof [ i ][ context ] === 'undefined' ) {
                    length = -1;
                } else {
                    length = items[ i ][ context ].length;
                }
                for( var j = 0, jj = length; j < jj; j += 1 ) {
                    if( globalUI.getPropertyValue( items[ i ][ context ][ j ], value[ 0 ] ) >= value[ 1 ] ) {
                        tmpResult2.push( items[ i ] );
                    }
                }
                if( length === tmpResult2.length ) {
                    tmpResult.push( items[ i ] );
                }
            } else {
                if( globalUI.getPropertyValue( items[ i ], value[ 0 ] ) >= value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                }
            }
        }
        return tmpResult;
    };

    // compare for numbers and dates
    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.lt = function( value, items, context ) { // value is array: value[0] - param, value[1] - value
        var tmpResult = [];
        var tmpResult2;
        var length;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            if( context ) {
                tmpResult2 = [];
                if( typeof items[ i ][ context ] === 'undefined' ) {
                    length = -1;
                } else {
                    length = items[ i ][ context ].length;
                }
                for( var j = 0, jj = length; j < jj; j += 1 ) {
                    if( globalUI.getPropertyValue( items[ i ][ context ][ j ], value[ 0 ] ) < value[ 1 ] ) {
                        tmpResult2.push( items[ i ] );
                    }
                }
                if( length === tmpResult2.length ) {
                    tmpResult.push( items[ i ] );
                }
            } else {
                if( globalUI.getPropertyValue( items[ i ], value[ 0 ] ) < value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                }
            }
        }
        return tmpResult;
    };

    // compare for numbers and dates
    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.lte = function( value, items, context ) { // value is array: value[0] - param, value[1] - value
        var tmpResult = [];
        var tmpResult2;
        var length;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            if( context ) {
                tmpResult2 = [];
                if( typeof items[ i ][ context ] === 'undefined' ) {
                    length = -1;
                } else {
                    length = items[ i ][ context ].length;
                }
                for( var j = 0, jj = length; j < jj; j += 1 ) {
                    if( globalUI.getPropertyValue( items[ i ][ context ][ j ], value[ 0 ] ) <= value[ 1 ] ) {
                        tmpResult2.push( items[ i ] );
                    }
                }
                if( length === tmpResult2.length ) {
                    tmpResult.push( items[ i ] );
                }
            } else {
                if( globalUI.getPropertyValue( items[ i ], value[ 0 ] ) <= value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param values
     * @param items
     * @param context
     * @returns {Array}
     */
    that.in = function( values, items, context ) { // values[1] is array
        var tmpResult = [];
        var tmpResult2;
        var length;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            if( context ) {
                tmpResult2 = [];
                if( typeof items[ i ][ context ] === 'undefined' ) {
                    length = -1;
                } else {
                    length = items[ i ][ context ].length;
                }
                for( var j = 0, jj = length; j < jj; j += 1 ) {
                    if( _.indexOf( values[ 1 ], globalUI.getPropertyValue( items[ i ][ context ][ j ], values[ 0 ] ) ) !== -1 ) {
                        tmpResult2.push( items[ i ] );
                    }
                }
                if( length === tmpResult2.length ) {
                    tmpResult.push( items[ i ] );
                }
            } else {
                if( _.indexOf( values[ 1 ], globalUI.getPropertyValue( items[ i ], values[ 0 ] ) ) !== -1 ) {
                    tmpResult.push( items[ i ] );
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param values
     * @param items
     * @param context
     * @returns {Array}
     */
    that.notIn = function( values, items, context ) { // values[1] is array
        var tmpResult = [];
        var tmpResult2;
        var length;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            if( context ) {
                tmpResult2 = [];
                if( typeof items[ i ][ context ] === 'undefined' ) {
                    length = -1;
                } else {
                    length = items[ i ][ context ].length;
                }
                for( var j = 0, jj = length; j < jj; j += 1 ) {
                    if( _.indexOf( values[ 1 ], globalUI.getPropertyValue( items[ i ][ context ][ j ], values[ 0 ] ) ) === -1 ) {
                        tmpResult2.push( items[ i ] );
                    }
                }
                if( length === tmpResult2.length ) {
                    tmpResult.push( items[ i ] );
                }
            } else {
                if( _.indexOf( values[ 1 ], globalUI.getPropertyValue( items[ i ], values[ 0 ] ) ) === -1 ) {
                    tmpResult.push( items[ i ] );
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.exists = function( value, items, context ) { // value[1] is string
        var tmpResult = [];
        var tmpValue;
        var globalUI = InfinniUI.ObjectUtils;

        if( typeof value[ 1 ] === 'undefined' ) {
            value[ 1 ] = true;
        }
        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpValue = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            if( value[ 1 ] === true ) {
                if( typeof tmpValue !== 'undefined' && tmpValue !== null ) {
                    tmpResult.push( items[ i ] );
                }
            } else {
                if( typeof tmpValue === 'undefined' || tmpValue === null ) {
                    tmpResult.push( items[ i ] );
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param values
     * @param items
     * @param context
     * @returns {Array}
     */
    that.match = function( values, items, context ) {
        var tmpResult = [];
        var globalUI = InfinniUI.ObjectUtils;
        for( var i = 0, ii = values[ 1 ].length; i < ii; i += 1 ) {
            if( typeof globalUI.getPropertyValue( values[ 1 ][ i ], values[ 0 ] ) !== 'undefined' ) {
                tmpResult.push( values[ 1 ][ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param values
     * @param items
     * @param context
     * @returns {Array}
     */
    that.all = function( values, items, context ) { // value[1] is array
        var tmpResult = [];
        var counter;
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], values[ 0 ] );
            counter = 0;
            for( var j = 0, jj = tmpArr.length; j < jj; j += 1 ) {
                if( _.indexOf( values[ 1 ], tmpArr[ j ] ) !== -1 ) {
                    counter += 1;
                }
            }
            if( jj === counter ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param values
     * @param items
     * @param context
     * @returns {Array}
     */
    that.anyIn = function( values, items, context ) { // value[1] is array
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], values[ 0 ] );
            for( var j = 0, jj = tmpArr.length; j < jj; j += 1 ) {
                if( _.indexOf( values[ 1 ], tmpArr[ j ] ) !== -1 ) {
                    tmpResult.push( items[ i ] );
                    break;
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param values
     * @param items
     * @param context
     * @returns {Array}
     */
    that.anyNotIn = function( values, items, context ) { // value[1] is array
        var tmpResult = [];
        var counter;
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], values[ 0 ] );
            counter = 0;
            for( var j = 0, jj = tmpArr.length; j < jj; j += 1 ) {
                if( _.indexOf( values[ 1 ], tmpArr[ j ] ) !== -1 ) {
                    counter += 1;
                }
            }
            if( counter === 0 ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.anyEq = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            if( _.indexOf( tmpArr, value[ 1 ] ) !== -1 ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.anyNotEq = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            for( var j = 0, jj = tmpArr.length; j < jj; j += 1 ) {
                if( tmpArr[ j ] !== value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                    break;
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.anyGt = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            for( var j = 0, jj = tmpArr.length; j < jj; j += 1 ) {
                if( tmpArr[ j ] > value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                    break;
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.anyGte = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            for( var j = 0, jj = tmpArr.length; j < jj; j += 1 ) {
                if( tmpArr[ j ] >= value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                    break;
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.anyLt = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            for( var j = 0, jj = tmpArr.length; j < jj; j += 1 ) {
                if( tmpArr[ j ] < value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                    break;
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.anyLte = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            for( var j = 0, jj = tmpArr.length; j < jj; j += 1 ) {
                if( tmpArr[ j ] <= value[ 1 ] ) {
                    tmpResult.push( items[ i ] );
                    break;
                }
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.sizeEq = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            if( tmpArr.length === value[ 1 ] ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.sizeNotEq = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            if( tmpArr.length !== value[ 1 ] ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.sizeGt = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            if( tmpArr.length > value[ 1 ] ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.sizeGte = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            if( tmpArr.length >= value[ 1 ] ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.sizeLt = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            if( tmpArr.length < value[ 1 ] ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.sizeLte = function( value, items, context ) {
        var tmpResult = [];
        var tmpArr;
        var globalUI = InfinniUI.ObjectUtils;

        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpArr = globalUI.getPropertyValue( items[ i ], value[ 0 ] );
            if( tmpArr.length <= value[ 1 ] ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param values
     * @param items
     * @param context
     * @returns {Array}
     */
    that.regexp = function( values, items, context ) { // value[1] is array
        var tmpResult = [];
        var tmpObjValue;
        var globalUI = InfinniUI.ObjectUtils;
        var flags = '';
        var regexp;
        for( var j = 1, jj = values[ 1 ].length; j < jj; j += 1 ) {
            flags += values[ 1 ][ j ];
        }
        regexp = new RegExp( values[ 1 ][ 0 ], flags );
        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpObjValue = globalUI.getPropertyValue( items[ i ], values[ 0 ] );
            if( tmpObjValue.search( regexp ) !== -1 ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    // ToDo: добавить обработку параметров caseSensitive и diacriticSensitive
    /**
     *
     * @param value
     * @param items
     * @param context
     * @returns {Array}
     */
    that.text = function( value, items, context ) {
        var tmpResult = [];
        var tmpString;
        var subString = value[ 0 ].replace( '_', ' ' ).toLowerCase();
        for( var i = 0, ii = items.length; i < ii; i += 1 ) {
            tmpString = JSON.stringify( items[ i ] ).toLowerCase();
            if( tmpString.indexOf( subString ) !== -1 ) {
                tmpResult.push( items[ i ] );
            }
        }
        return tmpResult;
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     */
    that.startsWith = function( value, items, context ) {
        var propertyName = value[ 0 ];
        var expectedStartValue = Array.isArray( value[ 1 ] ) ? value[ 1 ][ 0 ] : value[ 1 ];
        var ignoreCase = Array.isArray( value[ 1 ] ) ? ( value[ 1 ][ 1 ] !== false ) : true;
        var regexpPattern = '^{expectedStartValue}'.replace( '{expectedStartValue}', expectedStartValue );
        var regexpFlag = ignoreCase ? 'i' : '';

        return _.filter( items, function( item ) {
            return new RegExp( regexpPattern, regexpFlag ).test( item[ propertyName ] );
        } );
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     */
    that.endsWith = function( value, items, context ) {
        var propertyName = value[ 0 ];
        var expectedEndValue = Array.isArray( value[ 1 ] ) ? value[ 1 ][ 0 ] : value[ 1 ];
        var ignoreCase = Array.isArray( value[ 1 ] ) ? ( value[ 1 ][ 1 ] !== false ) : true;
        var regexpPattern = '{expectedEndValue}$'.replace( '{expectedEndValue}', expectedEndValue );
        var regexpFlag = ignoreCase ? 'i' : '';

        return _.filter( items, function( item ) {
            return new RegExp( regexpPattern, regexpFlag ).test( item[ propertyName ] );
        } );
    };

    /**
     *
     * @param value
     * @param items
     * @param context
     */
    that.contains = function( value, items, context ) {
        var propertyName = value[ 0 ];
        var searchString = Array.isArray( value[ 1 ] ) ? value[ 1 ][ 0 ] : value[ 1 ] || '';
        var ignoreCase = Array.isArray( value[ 1 ] ) ? ( value[ 1 ][ 1 ] !== false ) : true;
        var regexpFlag = ignoreCase ? 'i' : '';

        return _.filter( items, function( item ) {
            return new RegExp( searchString, regexpFlag ).test( item[ propertyName ] );
        } );
    };

    return that;
} )();

//####app/utils/hashMap.js
/**
 * @description Простая реализация хеша у которого в качестве ключей м.б. объект
 * @constructor
 */
function HashMap() {
    this._keys = [];
    this._values = [];
}

InfinniUI.HashMap = HashMap;

Object.defineProperties( HashMap.prototype, {

    length: {
        /**
         *
         * @returns {Number}
         */
        get: function() {
            return this._keys.length;
        }
    },

    keys: {
        /**
         *
         * @returns {Array}
         */
        get: function() {
            return this._keys;
        }
    },

    values: {
        /**
         *
         * @returns {Array|*}
         */
        get: function() {
            return this._values;
        }
    }
} );

/**
 *
 * @param key
 * @param value
 */
HashMap.prototype.add = function( key, value ) {
    var i = this._getIndexOfKey( key );

    if ( i === -1 ) {
        this._keys.push( key );
        this._values.push( value );
    } else {
        this._values[ i ] = value;
    }
};

/**
 *
 * @param key
 */
HashMap.prototype.remove = function( key ) {
    var i = this._getIndexOfKey( key );

    if ( i !== -1 ) {
        this._keys.splice( i, 1 );
        this._values.splice( i, 1 );
    }
};

/**
 *
 * @param value
 * @returns {*}
 */
HashMap.prototype.getKeyByValue = function( value ) {
    var key,
        i = this._getIndexOfValue( value );

    if ( i !== -1 ) {
        key = this._keys[ i ];
    }
    return key;
};

/**
 *
 * @param {Function} predicate
 * @param thisArg
 * @returns {number}
 */
HashMap.prototype.findIndex = function( predicate, thisArg ) {
    var key, value, index = -1;
    for ( var i = 0; i < this._keys.length; i = i + 1 ) {
        key = this._keys[ i ];
        value = this._values[ i ];
        if ( predicate.call( thisArg, key, value ) ) {
            index =  i;
            break;
        }
    }

    return index;
};

/**
 *
 * @param key
 * @returns {*}
 */
HashMap.prototype.get = function( key ) {
    var value,
        i = this._getIndexOfKey( key );

    if ( i !== -1 ) {
        value = this._values[ i ];
    }

    return value;
};

/**
 *
 * @param callback
 * @param thisArg
 */
HashMap.prototype.forEach = function( callback, thisArg ) {
    this._keys.forEach( function( key, index ) {
        callback.call( thisArg, this._values[ index ], key, index );
    }, this );
};

/**
 *
 * @param callback
 */
HashMap.prototype.clear = function( callback ) {
    if ( typeof callback === 'function' ) {
        this.forEach( callback );
    }
    this._keys.length = 0;
    this._values.length = 0;
};

/**
 * @param key
 * @returns {number}
 * @private
 */
HashMap.prototype._getIndexOfKey = function( key ) {
    return this._keys.indexOf( key );
};

/**
 * @param {*} value
 * @returns {number}
 * @private
 */
HashMap.prototype._getIndexOfValue = function( value ) {
    return this._values.indexOf( value );
};

//####app/utils/hiddenScreen.js
/**
 *
 * @constructor
 */
function HiddenScreen() {

    this.middleElement = $( '<div></div>' ).css( {
        'position': 'absolute',
        top: '-10000px'
    } );

}

/**
 *
 * @type {{add: HiddenScreen.add}}
 */
HiddenScreen.prototype = {

    /**
     *
     * @param element
     */
    add: function( element ) {
        $( 'body' ).prepend( this.middleElement );
        this.middleElement.append( element );
    }

};

InfinniUI.HiddenScreen = HiddenScreen;

//####app/utils/inheritance.js
_.mixin( {

    /**
     *
     * @param child
     * @param parent
     */
    'inherit': function( child, parent ) {
        var f = new Function();
        f.prototype = parent.prototype;

        child.prototype = new f();
        child.prototype.constructor = child;

        child.superclass = parent.prototype;
    },

    /**
     *
     * @param obj
     * @param context
     * @param values
     */
    'superClass': function( obj, context, values ) {
        var args = _.toArray( arguments );
        args.splice( 0, 2 );

        obj.superclass.constructor.apply( context, args );
    }

} );

//####app/utils/isEqual.js
( function() {
    var isEqual = _.isEqual;

    /**
     *
     * @param a
     * @param b
     * @returns {boolean}
     */
    _.isEqual = function( a, b ) {
        if( typeof File !== 'undefined' ) {
            if( a instanceof File || b instanceof File ) {
                return a === b;
            }
        }
        return isEqual( a, b );
    };

} )();

//####app/utils/keycodes.js
InfinniUI.Keyboard = {

    KeyCode: {
        ESCAPE: 27,
        HOME: 36,
        LEFT_ARROW: 37,
        RIGHT_ARROW: 39,
        END: 35,
        UP_ARROW: 38,
        DOWN_ARROW: 40,
        DELETE: 46,
        BACKSPACE: 8,
        TAB: 9,
        SPACE: 32,
        NUMPAD_0: 96,
        NUMPAD_1: 97,
        NUMPAD_2: 98,
        NUMPAD_3: 99,
        NUMPAD_4: 100,
        NUMPAD_5: 101,
        NUMPAD_6: 102,
        NUMPAD_7: 103,
        NUMPAD_8: 104,
        NUMPAD_9: 105,
        PLUS: 43,
        MINUS: 45,
        ASTERISK: 42,
        SLASH: 47,
        0: 48,
        1: 49,
        2: 50,
        3: 51,
        4: 52,
        5: 53,
        6: 54,
        7: 55,
        8: 56,
        9: 57
    },

    getCharByKeyCode: function( keyCode ) {
        var char, code;

        if( keyCode < 32 ) {
            //Спецсимвол
            char = null;
        } else {
            //@see http://unixpapa.com/js/key.html
            if( keyCode >= this.KeyCode.NUMPAD_0 && keyCode <= this.KeyCode.NUMPAD_9 ) {
                code = keyCode - 48;
            } else {
                switch( keyCode ) {
                    //convert numpad key codes
                    case 110:
                        code = this.KeyCode.DELETE;  //.Del
                        break;
                    case 107:
                        code = this.KeyCode.PLUS;  //+
                        break;
                    case 109:
                        code = this.KeyCode.MINUS;  //-
                        break;
                    case 106:
                        code = this.KeyCode.ASTERISK;  //*
                        break;
                    case 111:
                        code = this.KeyCode.SLASH;  // /
                        break;
                    //Symbol Keys
                    case 188:
                        code = 44;
                        break;
                    case 173:
                        code = 45;
                        break;
                    case 190:
                        code = 46;
                        break;
                    case 191:
                        code = 47;
                        break;
                    case 192:
                        code = 96;
                        break;
                    case 219:
                        code = 91;
                        break;
                    case 220:
                        code = 92;
                        break;
                    case 221:
                        code = 93;
                        break;
                    case 222:
                        code = 39;
                        break;
                    default:
                        code = keyCode;
                }
            }
            char = String.fromCharCode( code );
        }
        return char;
    }

};

//####app/utils/logger.js
var LOG_LEVEL = {
    debug: 1,
    info: 2,
    warn: 3,
    error: 4,
    trace: 5
};

/**
 *
 * @param level
 * @constructor
 */
function Logger( level ) {
    this.messages = [];
    this.setLevel( level || LOG_LEVEL.debug );


    this.showMessages = true;
}

_.extend( Logger.prototype, {

    /**
     *
     * @returns {*}
     */
    getLevel: function() {
        return this.level;
    },

    /**
     *
     * @param level
     */
    setLevel: function( level ) {
        this.level = level;
    },

    /**
     *
     * @param messageType
     * @param message
     */
    addMessage: function( messageType, message ) {
        this.messages.push( {
            type: messageType,
            message: message
        } );
    },

    /**
     *
     * @param message
     */
    debug: function( message ) {
        if( this.level > LOG_LEVEL.debug ) {
            return;
        }

        if( this.showMessages ) {
            console.debug( message.message || message );
        }

        this.addMessage( LOG_LEVEL.debug, message );
    },

    /**
     *
     * @param message
     */
    info: function( message ) {
        if( this.level > LOG_LEVEL.info ) {
            return;
        }

        if( this.showMessages ) {
            console.info( message.message || message );
        }

        this.addMessage( LOG_LEVEL.info, message );
    },

    /**
     *
     * @param message
     */
    warn: function( message ) {
        if( this.level > LOG_LEVEL.warn ) {
            return;
        }

        if( this.showMessages ) {
            console.warn( message.message || message );
        }

        this.addMessage( LOG_LEVEL.warn, message );
    },

    /**
     *
     * @param message
     */
    error: function( message ) {
        if( this.level > LOG_LEVEL.error ) {
            return;
        }

        if( this.showMessages ) {
            console.error( message.message || message );
        }

        this.addMessage( LOG_LEVEL.error, message );
    },

    /**
     *
     * @param message
     */
    trace: function( message ) {
        if( this.level > LOG_LEVEL.trace ) {
            return;
        }

        if( this.showMessages ) {
            console.error( message.message || message );
        }

        this.addMessage( LOG_LEVEL.trace, message );
    }

} );

InfinniUI.global.logger = new Logger();

//####app/utils/metadata.js
InfinniUI.Metadata = InfinniUI.Metadata || {};

/**
 *
 * @param value
 * @param metadata
 * @returns {boolean}
 */
InfinniUI.Metadata.isValidValue = function( value, metadata ) {
    var result = false;

    for ( var i in metadata ) {
        if ( metadata[ i ] === value ) {
            result = true;
            break;
        }
    }

    return result;
};

/**
 *
 * @param metadata
 * @returns {*|boolean}
 */
InfinniUI.Metadata.isBindingMetadata = function( metadata ) {
    return $.isPlainObject( metadata ) && 'Source' in metadata;
};

//####app/utils/numeric.js
Number.isInteger = Number.isInteger || function( value ) {
    return typeof value === 'number' &&
        isFinite( value ) &&
        Math.floor( value ) === value;
};
//####app/utils/stringUtils.js
if ( !String.prototype.includes ) {
    String.prototype.includes = function() {
        return String.prototype.indexOf.apply( this, arguments ) !== -1;
    };
}

var stringUtils = {

    /**
     *
     * @param value
     * @param args
     * @returns {boolean|void|string|XML|*}
     */
    format: function( value, args ) {
        return value.replace( /{(\d+)}/g, function( match, number ) {
            return typeof args[ number ] !== 'undefined'
                ? args[ number ]
                : match
                ;
        } );
    },

    /**
     *
     * @param property
     * @param indexes
     * @returns {*}
     */
    formatProperty: function( property, indexes ) {
        if( !indexes || indexes.length == 0 || property == '' ) {
            return property;
        }

        var propertyPaths = property.split( '.' );

        var j = indexes.length - 1;

        for( var i = propertyPaths.length - 1; i >= 0; i-- ) {
            if( propertyPaths[ i ] == '#' && j >= 0 ) {
                propertyPaths[ i ] = indexes[ j ];
                j--;
            }else if( propertyPaths[ i ] == '$' || stringUtils.isNumeric( propertyPaths[ i ] ) ) {
                j--;
            }
        }

        return propertyPaths.join( '.' );
    },

    /**
     *
     * @param value
     * @param len
     * @param char
     * @returns {string}
     */
    padLeft: function a( value, len, char ) {
        if ( typeof char === 'undefined' || char === null ) {
            char = ' ';
        }

        var str = String( value );

        if ( str.length < len ) {
            return new Array( len - str.length + 1 ).join( char ) + str;
        }
        return str;
    },

    /**
     *
     * @param n
     * @returns {boolean}
     */
    isNumeric: function( n ) {
        return !isNaN( parseFloat( n ) ) && isFinite( n );
    },

    replaced: {
        '+': '%2B'
    },

    /**
     *
     * @param data
     * @returns {string}
     */
    joinDataForQuery: function( data ) {
        var result = [];
        var that = this;

        for( var k in data ) {
            var p = typeof data[ k ] === 'string' ? data[ k ].replace( /[\+]/g, function( c ) {
                return that.replaced[ c ] || c;
            } ) : data[ k ];

            result.push( k + '=' + p );
        }

        return result.join( '&' );
    }
};

InfinniUI.stringUtils = stringUtils;
InfinniUI.guid = guid;

/**
 *
 * @returns {string}
 */
function guid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace( /[xy]/g, function( c ) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : ( r & 0x3 | 0x8 );
        return v.toString( 16 );
    } );
}

//####app/utils/testMode.js
( function( window, document, $ ) {
    'use strict';
    var DATA_NAME_ATTRIBUTE = 'data-pl-name';
    var DATA_NAME_VIEW_ATTRIBUTE = 'data-pl-name-view';
    var NO_NAME = 'No name';
    var DATA_NAME_SELECTOR = '[' + DATA_NAME_ATTRIBUTE + ']:first';
    var DATA_NAME_VIEW_SELECTOR = '[' + DATA_NAME_VIEW_ATTRIBUTE + ']:first';
    var location = window.location;

    if( location.hash !== '#test' ) {
        return;
    }

    $( function() {

        patchBootstrapTooltip();
        var info = new InfoElement();

        $( document ).on( 'mouseover', function( event ) {
            info.setElement( event.target );
        } );

        function patchBootstrapTooltip() {
            $.fn.tooltip.Constructor.prototype.getTitle = function() {
                var $e = this.$element;
                var o = this.options;

                return o.title;
            };
        }
    } );

    /*************************************/

    function ClickManager() {
        this._unsubscribe = [];
    }

    /**
     *
     * @param element
     * @param handler
     * @returns {ClickManager}
     */
    ClickManager.prototype.append = function( element, handler ) {
        var EVENT_NAME = 'contextmenu';
        this.clear();

        if( typeof element === 'undefined' || element === null ) {
            return;
        }
        element.addEventListener( EVENT_NAME, handler, true );
        this._unsubscribe.push( function() {
            element.removeEventListener( EVENT_NAME, handler, true );
        } );
        return this;
    };

    /**
     *
     * @returns {ClickManager}
     */
    ClickManager.prototype.clear = function() {
        this._unsubscribe.forEach( function( fn ) {
            fn.call();
        } );
        return this;
    };

    /**
     *
     * @constructor
     */
    function InfoElement() {
        this.marker = new Marker();
        this.$currentControl = null;
        this.clickManager = new ClickManager();
    }

    /**
     *
     * @param el
     */
    InfoElement.prototype.setElement = function( el ) {
        var $el = $( el );
        var $control = getControl( $el );
        var name = getName( $control );
        var viewName = getViewName( $control );

        this.hideInfo();
        if( $control ) {
            this.showInfo( $control, viewName, _.isEmpty( name ) ? NO_NAME : name );
        }

        /**
         *
         * @param $el
         * @returns {*}
         */
        function getControl( $el ) {
            var $control;
            var name = $el.attr( DATA_NAME_ATTRIBUTE );

            if( typeof name !== 'undefined' ) {
                $control = $el;
            } else {
                $control = $el.parents( DATA_NAME_SELECTOR );
            }
            return $control;
        }

        /**
         *
         * @param $el
         */
        function getName( $el ) {
            if( $el.length ) {
                return $el.attr( DATA_NAME_ATTRIBUTE );
            }
        }

        /**
         *
         * @param $el
         */
        function getViewName( $el ) {
            var $e = $el.parents( DATA_NAME_VIEW_SELECTOR );

            if( $e.length ) {
                return $e.attr( DATA_NAME_VIEW_ATTRIBUTE );
            }
        }
    };

    /**
     *
     * @param viewName
     * @param name
     */
    InfoElement.prototype.copyInfo = function( viewName, name ) {
        if( viewName || name ) {
            window.prompt( 'Copy to clipboard: Ctrl+C', formatInfo( viewName, name ) );
        }
    };

    /**
     *
     * @param $control
     * @param viewName
     * @param name
     */
    InfoElement.prototype.showInfo = function( $control, viewName, name ) {
        if( this.$currentControl && this.$currentControl[ 0 ] !== $control[ 0 ] ) {
            this.marker.reset( this.$currentControl );
            this.clickManager.clear();
        }
        this.marker.highlight( $control );
        this.$currentControl = $control;
        this.clickManager.append( $control[ 0 ], this.copyInfo.bind( this, viewName, name ) );

        $control
            .tooltip( {
                title: formatInfo( viewName, name ),
                placement: 'auto'
            } )
            .tooltip( 'show' );
    };

    /**
     *
     */
    InfoElement.prototype.hideInfo = function() {
        this.clickManager.clear();
        if( this.$currentControl ) {
            this.marker
                .reset( this.$currentControl );
            this.$currentControl.tooltip( 'destroy' );
        }
    };


    /********************************************/

    /**
     *
     * @constructor
     */
    function Marker() {
        this.DATA_NAME = 'data-pl-original-style';

        this.css = {
            'box-shadow': 'inset 0 0 1em #ff0000'
        };
    }

    /**
     *
     * @param $el
     * @returns {Marker}
     */
    Marker.prototype.highlight = function( $el ) {
        var data;

        if( $el ) {
            data = $el.data( this.DATA_NAME );
            if( !data ) {
                data = Object.create( null );
                for( var i in this.css ) {
                    data[ i ] = $el.css( i );
                }
                $el.data( this.DATA_NAME, data );
            }
            $el.css( this.css );
        }
        return this;
    };

    /**
     *
     * @param $el
     * @returns {Marker}
     */
    Marker.prototype.reset = function( $el ) {
        var data;
        if( $el ) {
            data = $el.data( this.DATA_NAME );
            $el.data( this.DATA_NAME, null );
            if( data ) {
                $el.css( data );
            }
        }
        return this;
    };

    /********************/

    /**
     *
     * @param viewName
     * @param name
     * @returns {*|string}
     */
    function formatInfo( viewName, name ) {
        var info = viewName ? [ viewName ] : [];
        info.push( name );

        return info.join( ':' );
    }

} )( window, document, jQuery );


//####app/utils/treeModel.js
/**
 *
 * @param context
 * @param source
 * @param startTree
 * @constructor
 */
var TreeModel = function( context, source, startTree ) {
    this.context = context;
    this.source = source;
    this.dataTree = startTree || {};
    this.handlersTree = {};
    this.mirroringFrom = null;
    this.mirroringTo = null;
};

InfinniUI.TreeModel = TreeModel;

_.extend( TreeModel.prototype, {

    counter: 1,

    /**
     *
     * @param propertyName
     * @returns {*}
     */
    getProperty: function( propertyName ) {
        if( this.mirroringFrom ) {
            propertyName = propertyName.replace( this.mirroringFrom, this.mirroringTo );
        }
        return InfinniUI.ObjectUtils.getPropertyValue( this.dataTree, propertyName );
    },

    /**
     *
     * @param propertyName
     * @param value
     * @returns {boolean}
     */
    setProperty: function( propertyName, value ) {
        var oldValue = this.getProperty( propertyName );

        if( value == oldValue ) {
            return false;
        }

        InfinniUI.ObjectUtils.setPropertyValue( this.dataTree, propertyName, value );
        this._notifyAboutPropertyChanged( propertyName, oldValue );

        return true;
    },

    /**
     *
     * @param propertyName
     * @param handler
     * @param params
     * @returns {string}
     */
    onPropertyChanged: function( propertyName, handler, params ) {
        var handlersNode;
        var bindId = this.counter + '-bindId';
        this.counter++;

        if( typeof propertyName === 'function' ) {
            params = handler;
            handler = propertyName;

            handlersNode = this._getHandlersSubTree( '*', true );
        } else {
            handlersNode = this._getHandlersSubTree( propertyName, true );
        }

        handler._bindId = bindId;
        if( params && 'owner' in params ) {
            handler._owner = params.owner;
        }

        handlersNode[ bindId ] = handler;

        return bindId;
    },

    /**
     *
     * @param propertyName
     * @param bindId
     */
    offPropertyChanged: function( propertyName, bindId ) {
        var handlersNode = this._getHandlersSubTree( propertyName, true );

        if( handlersNode[ bindId ] ) {
            delete handlersNode[ bindId ];
        }
    },

    /**
     *
     * @param propertyName
     * @param restoreIfNoProperty
     * @returns {*}
     * @private
     */
    _getHandlersSubTree: function( propertyName, restoreIfNoProperty ) {
        if( propertyName == '' ) {
            return this.handlersTree;
        }

        var propertyPaths = propertyName.split( '.' );
        var tmpResult = this.handlersTree;

        for( var i = 0, ii = propertyPaths.length; i < ii; i++ ) {
            if( tmpResult[ propertyPaths[ i ] ] ) {
                tmpResult = tmpResult[ propertyPaths[ i ] ];
            } else {
                if( restoreIfNoProperty ) {
                    tmpResult[ propertyPaths[ i ] ] = {};
                    tmpResult = tmpResult[ propertyPaths[ i ] ];
                } else {
                    return {};
                }
            }
        }

        return tmpResult;
    },

    /**
     *
     * @param propertyName
     * @param oldValue
     * @private
     */
    _notifyAboutPropertyChanged: function( propertyName, oldValue ) {
        var handlers = this._getHandlersSubTree( propertyName );
        var needMirroring = this.mirroringTo !== null &&
            typeof this.mirroringTo !== 'undefined' &&
            this.mirroringFrom !== null &&
            typeof this.mirroringFrom !== 'undefined' &&
            propertyName.indexOf( this.mirroringTo ) == 0;
        var mirroringPath = propertyName.replace( this.mirroringTo, this.mirroringFrom );

        this._notifyAboutPropertyChanged_bubblingAction( propertyName, oldValue, handlers );

        this._notifyAboutPropertyChanged_capturingAction( propertyName, oldValue, handlers );
        if( needMirroring ) {
            handlers = this._getHandlersSubTree( mirroringPath );
            this._notifyAboutPropertyChanged_capturingAction( mirroringPath, oldValue, handlers );
        }
    },

    /**
     *
     * @param propertyName
     * @param oldValue
     * @param handlersSubTree
     * @private
     */
    _notifyAboutPropertyChanged_capturingAction: function( propertyName, oldValue, handlersSubTree ) {
        var tmpValue;
        var tmpProperty;
        var handler;

        for( var k in handlersSubTree ) {
            if( typeof handlersSubTree[ k ] === 'function' ) {
                handler = handlersSubTree[ k ];
                if( this._isOwnerAlive( handler ) ) {
                    this._callHandlerAboutPropertyChanged( handler, propertyName, oldValue );
                } else {
                    delete handlersSubTree[ k ];
                }
            }
        }

        for( var key in handlersSubTree ) {
            if( $.isPlainObject( handlersSubTree[ key ] ) && key != '*' ) {

                tmpValue = $.isPlainObject( oldValue ) ? oldValue[ key ] : undefined;
                tmpProperty = propertyName == '' ? key : propertyName + '.' + key;
                this._notifyAboutPropertyChanged_capturingAction( tmpProperty, tmpValue, handlersSubTree[ key ] );
            }
        }
    },

    /**
     *
     * @param propertyName
     * @param oldValue
     * @param handlersSubTree
     * @private
     */
    _notifyAboutPropertyChanged_bubblingAction: function( propertyName, oldValue, handlersSubTree ) {
        var propertyNamePaths = propertyName.split( '.' );
        var tmpPropertyName;
        var handlersNode = this.handlersTree;
        var that = this;

        checkAndCallAnyHandlers( handlersNode );

        if( propertyName != '' ) {
            for( var i = 0, ii = propertyNamePaths.length; i < ii; i++ ) {
                tmpPropertyName = propertyNamePaths[ i ];
                if( handlersNode[ tmpPropertyName ] ) {
                    handlersNode = handlersNode[ tmpPropertyName ];
                    checkAndCallAnyHandlers( handlersNode );
                } else {
                    break;
                }
            }
        }

        /**
         *
         * @param _handlersNode
         */
        function checkAndCallAnyHandlers( _handlersNode ) {
            var handler;

            if( '*' in _handlersNode ) {
                for( var k in _handlersNode[ '*' ] ) {
                    handler = _handlersNode[ '*' ][ k ];
                    if( that._isOwnerAlive( handler ) ) {
                        that._callHandlerAboutPropertyChanged( handler, propertyName, oldValue );
                    } else {
                        delete _handlersNode[ '*' ][ k ];
                    }
                }
            }
        }
    },

    /**
     *
     * @param handler
     * @returns {*}
     * @private
     */
    _isOwnerAlive: function( handler ) {
        if( handler._owner && 'isRemoved' in handler._owner ) {

            if( typeof handler._owner.isRemoved === 'function' ) {
                return handler._owner.isRemoved();
            } else {
                return !handler._owner.isRemoved;
            }

        } else {
            return true;
        }
    },

    /**
     *
     * @param handler
     * @param propertyName
     * @param oldValue
     * @private
     */
    _callHandlerAboutPropertyChanged: function( handler, propertyName, oldValue ) {
        var args = {
            property: propertyName,
            newValue: this.getProperty( propertyName ),
            oldValue: oldValue,
            source: this.source
        };

        handler( this.context, args );
    },

    /**
     *
     * @param mirroringFrom
     * @param mirroringTo
     */
    setMirroring: function( mirroringFrom, mirroringTo ) {
        this.mirroringFrom = mirroringFrom;
        this.mirroringTo = mirroringTo;
    }

} );

//####app/utils/urlManager.js
/**
 *
 * @type {{getParams: urlManager.getParams, clearUrlSearchPath: urlManager.clearUrlSearchPath, setParameter: urlManager.setParameter, deleteParameter: urlManager.deleteParameter}}
 */
var urlManager = {

    /**
     *
     * @returns {*}
     */
    getParams: function() {
        var getPath = location.search;
        var result = {};
        var params, tmpParam;

        if( getPath.length == 0 ) {
            return result;
        }

        getPath = getPath.substr( 1 );
        params = getPath.split( '&' );

        for( var i = 0, ii = params.length; i < ii; i++ ) {
            tmpParam = params[ i ].split( '=' );
            result[ tmpParam[ 0 ] ] = tmpParam[ 1 ];
        }

        return result;
    },

    /**
     *
     */
    clearUrlSearchPath: function() {
        var searchPath = location.search;
        var index, newUrl;

        if( searchPath.length > 0 ) {
            index = location.href.indexOf( searchPath );
            if( index > 0 ) {
                newUrl = location.href.substr( 0, index );
            }
        }

        if( newUrl ) {
            history.pushState( null, null, newUrl );
        }
    },

    /**
     *
     * @param name
     * @param value
     */
    setParameter: function( name, value ) {
        var oldSearch = location.search;
        var newSearch = _.isEmpty( oldSearch ) ?
            stringUtils.format( '?{0}={1}', [ name, value ] ) :
            stringUtils.format( '{0}&{1}={2}', [ oldSearch, name, value ] );
        var newUrl = stringUtils.format( '{0}//{1}{2}{3}{4}', [ location.protocol, location.host, location.pathname, newSearch, location.hash ] );

        history.pushState( null, null, newUrl );
    },

    /**
     *
     * @param name
     */
    deleteParameter: function( name ) {
        var params = urlManager.getParams();
        delete params[ name ];

        var newSearch = generateSearch( params );
        var newUrl = stringUtils.format( '{0}//{1}{2}{3}{4}', [ location.protocol, location.host, location.pathname, newSearch, location.hash ] );
        history.pushState( null, null, newUrl );

        /**
         *
         * @param params
         * @returns {string}
         */
        function generateSearch( params ) {
            var paramsArray = [];
            _.mapObject( params, function( val, key ) {
                var param = stringUtils.format( '{0}={1}', [ key, val ] );
                paramsArray.push( param );
            } );

            return _.isEmpty( paramsArray ) ?
                '' :
            '?' + paramsArray.join( '&' );
        }
    }

};

InfinniUI.urlManager = urlManager;

//####app/utils/validationResult.js
/**
 *
 * @constructor
 */
function ValidationResult() {
    this.IsValid = true;
    this.Items = [];
}

_.extend( ValidationResult.prototype, {

    /**
     *
     * @param message
     * @param propertyName
     */
    error: function( message, propertyName ) {
        if( this.IsValid ) {
            this.IsValid = false;
        }

        this.Items.push( {
            Message: message,
            Property: propertyName || ''
        } );
    }

} );

InfinniUI.ValidationResult = ValidationResult;

//####app/utils/collection/collection.js
/**
 *
 * @param {Array} items
 * @param {string} [idProperty]
 * @param {function} [comparator]
 * @constructor
 */
function Collection( items, idProperty, comparator ) {
    if( !Array.isArray( items ) ) {
        items = [];
    }

    /**
     * @type {Array.<Object>}
     * @protected
     */
    this._items = items.map( function( value, index ) {
        return this.createCollectionItem( value, index );
    }, this );

    /**
     * @type {string|null}
     * @protected
     */
    this._idProperty = idProperty;

    /**
     * @type {function}
     * @protected
     */
    this._comparator = comparator || defaultComparator;

    function defaultComparator( a, b ) {
        if( a < b ) {
            return -1;
        } else if( a > b ) {
            return 1;
        }
        return 0;
    }

    /**
     *
     * @type {CollectionEventManager}
     */
    this.events = new CollectionEventManager();
}

InfinniUI.Collection = Collection;


Object.defineProperties( Collection.prototype, {
    /**
     * @type {string|null}
     */
    idProperty: {
        get: function() {
            return this._idProperty;
        },
        enumerable: false
    },

    /**
     * @type {function}
     */
    comparator: {
        get: function() {
            return this._comparator;
        },
        enumerable: false
    },

    /**
     * @type {number}
     */
    length: {
        get: function() {
            return this._items.length;
        },
        enumerable: false
    },

    /**
     * @type {boolean}
     */
    hasIdProperty: {
        get: function() {
            return typeof this._idProperty !== 'undefined';
        },
        enumerable: false
    }

} );

/**
 *
 * @param {number} index
 * @param {string} propertyName
 * @param {*} value
 * @returns {Collection}
 */
Collection.prototype.setProperty = function( index, propertyName, value ) {
    var item = this._items[ index ];

    if( item ) {
        item[ propertyName ] = value;
    }
    return this;
};

/**
 *
 * @param {number} index
 * @param {string} propertyName
 * @returns {*}
 */
Collection.prototype.getProperty = function( index, propertyName ) {
    var item = this._items[ index ];

    if( item ) {
        return item[ propertyName ];
    }
};

/**
 * @description Возвращает количество элементов в коллекции
 * @returns {number} Количество элементов в коллекции
 */
Collection.prototype.size = function() {
    return this.length;
};

/**
 * @description Добавляет элемент в конец коллекции
 * @param {*} value
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.push = function( value ) {
    var items = this._items;
    var item = this.createCollectionItem( value, items.length );

    items.push( item );

    this.events.onAdd( [ value ] );
    return true;
};

/**
 * @description Добавляет элемент в конец коллекции. @see {@link Collection.push}
 */
Collection.prototype.add = Collection.prototype.push;

/**
 * @description Добавляет элементы в конец коллекции
 * @param {Array} values
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.addAll = function( values ) {
    if( !Array.isArray( values ) ) {
        return false;
    }

    var items = this._items;
    var changed = values.length > 0;

    values.forEach( function( value ) {
        var item = this.createCollectionItem( value, items.length );
        items.push( item );
    }, this );

    if( changed ) {
        this.events.onAdd( values );
    }
    return changed;
};

/**
 * @description Вставляет элемент в указанную позицию коллекции
 * @param {number} index
 * @param {*} newItem
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.insert = function( index, newItem ) {
    var item = this.createCollectionItem( newItem, index );
    this._items.splice( index, 0, item );

    this.events.onAdd( [ newItem ], index );
    return true;
};

/**
 *
 * @param {number} index
 * @param {Array} newItems
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.insertAll = function( index, newItems ) {
    if( !Array.isArray( newItems ) ) {
        return false;
    }

    var items = this._items;
    var changed = newItems.length > 0;

    newItems.forEach( function( value, i ) {
        var start = index + i;
        var item = this.createCollectionItem( value, start );
        items.splice( start, 0, item );
    }, this );

    if( changed ) {
        this.events.onAdd( newItems, index );
    }
    return changed;
};

/**
 * @description Устанавливает список элементов коллекции
 * @param {Array} newItems
 * @return {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.reset = function( newItems ) {
    var changed, items;

    if( !Array.isArray( newItems ) ) {
        return false;
    }

    changed = this._items !== newItems;

    items = newItems.map( function( value, index ) {
        return this.createCollectionItem( value, index );
    }, this );

    this._items.length = 0;

    Array.prototype.push.apply( this._items, items );
    if( changed ) {
        this.events.onReset();
    }
    return changed;
};

/**
 * @description Заменяет элемент коллекции на указанный
 * @param {Array} newItems
 * @param {*} silent
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.set = function( newItems, silent ) {
    var items = this._items;

    if( !Array.isArray( newItems ) ) {
        return false;
    }

    var changed = this._items !== newItems;
    var _newItems = newItems.slice();

    _newItems.forEach( function( newItem, index ) {
        if( index < items.length ) {
            if( changed ) {
                this.updateCollectionItem( items[ index ], newItem );
            }
        } else {
            //Новые элементы
            changed = true;
            items.push( this.createCollectionItem( newItem, items.length ) );
        }
    }, this );

    if( newItems.length < items.length ) {
        items.splice( newItems.length );
    }

    if( changed && !silent ) {
        this.events.onReset();
    }
    return changed;
};

/**
 * @description Заменяет элемент коллекции на указанный.
 * @param {*} oldItem
 * @param {*} newItem
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.replace = function( oldItem, newItem ) {
    var itemValue;
    var changed = false;

    for( var i = 0; i < this._items.length; i = i + 1 ) {
        itemValue = this.getCollectionItemValue( i );
        if( this.isEqual( oldItem, itemValue ) ) {
            this.updateCollectionItem( this._items[ i ], newItem );
            changed = true;
            break;
        }
    }

    if( changed ) {
        this.events.onReplace( [ oldItem ], [ newItem ] );
    }
    return changed;
};

/**
 * @description Удаляет последний элемент из коллекции
 * @returns {*|undefined} Возвращает последний элемент коллекции, который был удален
 */
Collection.prototype.pop = function() {
    if( this._items.length === 0 ) {
        return;
    }

    var itemValue = this.getCollectionItemValue( this.length - 1 );

    this._items.pop();
    this.events.onRemove( [ itemValue ], this._items.length );

    return itemValue;
};

/**
 * @description Удаляет указанный элемент из коллекции
 * @param {*} item
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.remove = function( item ) {
    var itemValue;
    var itemIndex;
    var changed = true;

    for( var i = 0; i < this._items.length; i = i + 1 ) {
        itemValue = this.getCollectionItemValue( i );
        itemIndex = i;
        if( this.isEqual( item, itemValue ) ) {
            this._items.splice( i, 1 );
            changed = true;
            break;
        }
    }

    if( changed ) {
        this.events.onRemove( [ item ], itemIndex );
    }
    return changed;
};

/**
 * @description Удаляет элемент с указанным идентификатором из коллекции
 * @param {number|string} id
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.removeById = function( id ) {
    if( !this.hasIdProperty ) {
        return false;
    }

    var itemValue;
    var itemIndex;
    var changed = true;

    for( var i = 0; i < this._items.length; i = i + 1 ) {
        itemValue = this.getCollectionItemValue( i );
        itemIndex = i;
        if( this.getValueId( itemValue ) === id ) {
            this._items.splice( i, 1 );
            changed = true;
            break;
        }
    }

    if( changed ) {
        this.events.onRemove( [ itemValue ], itemIndex );
    }
    return changed;
};

/**
 * @description Удаляет элемент с указанным индексом из коллекции
 * @param {number} index
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.removeAt = function( index ) {
    if( index >= this._items.length ) {
        return false;
    }

    var item = this.getCollectionItemValue( index );

    this._items.splice( index, 1 );
    this.events.onRemove( [ item ], index );

    return true;
};

/**
 * @description Удаляет указанные элементы из коллекции
 * @param {Array} items
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.removeAll = function( items ) {
    if( !Array.isArray( items ) ) {
        return false;
    }

    var collectionItems = this._items;
    var deletedItems = [];
    var changed;

    items.forEach( function( value ) {

        deletedItems = collectionItems.filter( function( item ) {
            return this.isEqual( value, this.getItemValue( item ) );
        }, this );

        deletedItems.forEach( function( item ) {
            var index = collectionItems.indexOf( item );
            collectionItems.splice( index, 1 );
        } );
    }, this );

    changed = deletedItems.length > 0;

    if( changed ) {
        var values = deletedItems.map( function( item ) {
            return this.getItemValue( item );
        }, this );
        //@TODO Добавить параметр oldStartingIndex для события
        this.events.onRemove( values );
    }
    return changed;
};

/**
 * @description Удаляет диапазон элементов из коллекции
 * @param {number} fromIndex
 * @param {number} [count]
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.removeRange = function( fromIndex, count ) {
    var items = this._items;
    var changed;

    if( fromIndex >= items.length ) {
        return false;
    }

    if( typeof count === 'undefined' ) {
        count = items.length - fromIndex;
    }

    var deletedItems = items.splice( fromIndex, count );
    changed = deletedItems.length > 0;

    if( changed ) {
        var values = deletedItems.map( function( item ) {
            return this.getItemValue( item );
        }, this );

        this.events.onRemove( values, fromIndex );
    }
    return changed;
};

/**
 * @description Удаляет все элементы из коллекции, удовлетворяющие указанному условию
 * @param {function} predicate
 * @param [thisArg]
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.removeEvery = function( predicate, thisArg ) {
    if( typeof predicate !== 'function' ) {
        return false;
    }

    var items = this._items;
    var changed;
    var deletedItems = items.filter( function( item, index ) {
        var itemValue = this.getItemValue( item );
        return predicate.call( thisArg, itemValue, index, this );
    }, this );

    deletedItems.forEach( function( deletedItem ) {
        var index = items.indexOf( deletedItem );
        items.splice( index, 1 );
    } );

    changed = deletedItems.length > 0;
    if( changed ) {
        var values = deletedItems.map( function( item ) {
            return this.getItemValue( item );
        }, this );

        this.events.onRemove( values );
    }
    return changed;
};

/**
 * @description Удаляет все элементы из коллекции
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.clear = function() {
    var items = this._items;
    var changed = items.length > 0;
    var values = items.map( function( item ) {
        return this.getItemValue( item );
    }, this );


    items.length = 0;

    if( changed ) {
        this.events.onRemove( values, 0 );
    }

    return changed;
};

/**
 * @description Возвращает элемент коллекции с заданным идентификатором.
 * @param {number|string} id
 * @returns {*|undefined} Элемент коллекции с заданным идентификатором
 */
Collection.prototype.getById = function( id ) {
    if( !this.hasIdProperty ) {
        return false;
    }

    var items = this._items;
    var itemValue, result;

    for( var i = 0; i < items.length; i = i + 1 ) {
        itemValue = this.getCollectionItemValue( i );
        if( this.getValueId( itemValue ) === id ) {
            result = itemValue;
            break;
        }
    }

    return result;
};

/**
 * @description Возвращает элемент коллекции с заданным индексом
 * @param {number} index
 * @returns {*|undefined}
 */
Collection.prototype.getByIndex = function( index ) {
    return this.getCollectionItemValue( index );
};

/**
 * #description Возвращает первый найденный элемент коллекции, удовлетворяющий условию
 * @param {function} predicate
 * @param [thisArg]
 * @returns {*|undefined} Первый найденный элемент коллекции, удовлетворяющий указанному условию.
 */
Collection.prototype.find = function( predicate, thisArg ) {
    if( typeof predicate !== 'function' ) {
        return false;
    }

    var items = this._items;
    var itemIndex;
    var matched = items.some( function( item, index ) {
        var itemValue = this.getItemValue( item );
        itemIndex = index;
        return predicate.call( thisArg, itemValue, index, this );
    }, this );

    if( matched ) {
        return this.getCollectionItemValue( itemIndex );
    }
};

/**
 * @description Возвращает индекс первого найденного элемента коллекции при поиске с начала
 * @param {*} item
 * @param {number} [fromIndex = 0]
 * @returns {number} индекс первого найденного элемента коллекции или -1, если элемент не найден
 */
Collection.prototype.indexOf = function( item, fromIndex ) {
    var items = this._items;
    var index = -1;

    if( typeof fromIndex === 'undefined' ) {
        fromIndex = 0;
    }

    for( var i = fromIndex; i < items.length; i = i + 1 ) {
        var itemValue = this.getItemValue( items[ i ] );
        if( this.isEqual( item, itemValue ) ) {
            index = i;
            break;
        }
    }

    return index;
};

/**
 * @description Возвращает индекс первого найденного элемента коллекции при поиске с конца
 * @param {*} item
 * @param {number} [fromIndex]
 * @returns {number} индекс первого найденного элемента коллекции или -1, если элемент не найден
 */
Collection.prototype.lastIndexOf = function( item, fromIndex ) {
    var items = this._items;
    var index = -1;

    if( typeof fromIndex === 'undefined' ) {
        fromIndex = items.length - 1;
    }

    if( items.length === 0 || fromIndex >= items.length ) {
        return -1;
    }

    for( var i = fromIndex; i > 0; i = i - 1 ) {
        var itemValue = this.getItemValue( items[ i ] );

        if( this.isEqual( item, itemValue ) ) {
            index = i;
            break;
        }
    }

    return index;
};

/**
 * @description Возвращает индекс первого найденного элемента коллекции, удовлетворяющего условию
 * @param {function} predicate
 * @param [thisArg]
 * @returns {*} индекс первого найденного элемента коллекции, удовлетворяющего указанному условию
 */
Collection.prototype.findIndex = function( predicate, thisArg ) {
    if( typeof predicate !== 'function' ) {
        return false;
    }

    var items = this._items;
    var itemIndex = -1;
    var matched = items.some( function( item, index ) {
        var itemValue = this.getItemValue( item );
        itemIndex = index;
        return predicate.call( thisArg, itemValue, index, this );
    }, this );

    return matched ? itemIndex : -1;
};

/**
 * @description Проверяет наличие указанного элемента в коллекции
 * @param {*} item
 * @param {number} [fromIndex = 0]
 * @returns {boolean} Возвращает true, если указанный элемент содержится в коллекции, иначе - false
 */
Collection.prototype.contains = function( item, fromIndex ) {
    fromIndex = fromIndex || 0;

    var found = false;
    var items = this._items;

    for( var i = fromIndex; i < items.length; i = i + 1 ) {
        var itemValue = this.getItemValue( items[ i ] );
        found = this.isEqual( itemValue, item );
        if( found ) {
            break;
        }
    }

    return found;
};

/**
 * @description Проверяет, что каждый элемент коллекции удовлетворяет указанному условию
 * @param {function} predicate
 * @param [thisArg]
 * @returns {boolean} Возвращает true, если каждый элемент удовлетворяют указанному условию, иначе - false
 */
Collection.prototype.every = function( predicate, thisArg ) {

    if( typeof predicate !== 'function' ) {
        return false;
    }

    var items = this._items;

    return items.every( function( item, index ) {
        var itemValue = this.getItemValue( item );
        return predicate.call( thisArg, itemValue, index, this );
    }, this );
};

/**
 * @description Проверяет, что некоторый элемент коллекции удовлетворяет указанному условию
 * @param {function} predicate
 * @param [thisArg]
 * @returns {boolean} Возвращает true, если есть элемент, удовлетворяющий указанному условию, иначе - false
 */
Collection.prototype.some = function( predicate, thisArg ) {
    if( typeof predicate !== 'function' ) {
        return false;
    }

    var items = this._items;

    return items.some( function( item, index ) {
        var itemValue = this.getItemValue( item );
        return predicate.call( thisArg, itemValue, index, this );
    }, this );
};

/**
 * @description Перечисляет все элементы коллекции
 * @param {function} callback
 * @param [thisArg]
 */
Collection.prototype.forEach = function( callback, thisArg ) {
    if( typeof callback !== 'function' ) {
        return;
    }

    var items = this._items;

    items.forEach( function( item, index ) {
        var itemValue = this.getItemValue( item );

        callback.call( thisArg, itemValue, index, this );
    }, this );
};

/**
 * @description Возвращает элементы коллекции, удовлетворяющие указанному условию
 * @param {function} predicate
 * @param [thisArg]
 * @returns {Array}
 */
Collection.prototype.filter = function( predicate, thisArg ) {
    if( typeof predicate !== 'function' ) {
        return [];
    }

    var items = this._items;

    return items
        .filter( function( item, index ) {
            var itemValue = this.getItemValue( item );
            return predicate.call( thisArg, itemValue, index, this );
        }, this )
        .map( function( item ) {
            return this.getItemValue( item );
        }, this );
};

/**
 * @description Возвращает указанный диапазон элементов коллекции
 * @param {number} fromIndex
 * @param {number} [count]
 * @returns {Array}
 */
Collection.prototype.take = function( fromIndex, count ) {
    var items = this._items;

    if( typeof count == 'undefined' ) {
        count = items.length;
    }

    return items
        .slice( fromIndex, fromIndex + count )
        .map( function( item ) {
            return this.getItemValue( item );
        }, this );
};

/**
 * @description Возвращает массив всех элементов коллекции
 * @returns {Array} Массив, содержащий все элементы коллекции
 */
Collection.prototype.toArray = function() {
    return this._items.map( function( item ) {
        return this.getItemValue( item );
    }, this );
};

/**
 * @description Перемещает элемент коллекции в позицию с указанным индексом
 * @param {number} oldIndex
 * @param {number} newIndex
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.move = function( oldIndex, newIndex ) {
    var items = this._items;
    var item;

    if( oldIndex < 0 || oldIndex >= items.length || oldIndex === newIndex ) {
        return false;
    }

    item = items.splice( oldIndex, 1 ).pop();

    if( oldIndex > newIndex ) {
        items.splice( newIndex, 0, item );
    } else {
        items.splice( newIndex - 1, 0, item );
    }

    var changed = items[ oldIndex ] !== item;

    if( changed ) {
        var value = this.getItemValue( item );
        this.events.onMove( [ value ], [ value ], oldIndex, newIndex );
    }
    return changed;
};

/**
 * @description Сортирует список элементов коллекции
 * @param {function} comparator
 * @returns {boolean} Возвращает true, если коллекция была изменена, иначе - false
 */
Collection.prototype.sort = function( comparator ) {
    if( typeof comparator !== 'function' ) {
        comparator = this._comparator;
    }

    var items = this._items;
    var collection = this;
    var _items = items.slice();
    var changed = false;

    items.sort( function( item1, item2 ) {
        return comparator( collection.getItemValue( item1 ), collection.getItemValue( item2 ) );
    } );

    for( var i = 0; i < items.length; i = i + 1 ) {
        if( items[ i ] !== _items[ i ] ) {
            changed = true;
            break;
        }
    }

    if( changed ) {
        this.events.onReset();
    }
    return changed;
};

/**
 * @description Создает копию коллекции элементов
 * @returns {Collection} Новый экземпляр коллекции элементов, который является копией исходной коллекции
 */
Collection.prototype.clone = function() {
    return new this.constructor( this.toArray(), this._idProperty, this.comparator );
};

/**
 *
 * @param handler
 */
Collection.prototype.onAdd = function( handler ) {
    this.events.on( 'add', handler );
};

/**
 *
 * @param handler
 */
Collection.prototype.onReplace = function( handler ) {
    this.events.on( 'replace', handler );
};

/**
 *
 * @param handler
 */
Collection.prototype.onRemove = function( handler ) {
    this.events.on( 'remove', handler );
};

/**
 *
 * @param handler
 */
Collection.prototype.onMove = function( handler ) {
    this.events.on( 'move', handler );
};

/**
 *
 * @param handler
 */
Collection.prototype.onReset = function( handler ) {
    this.events.on( 'reset', handler );
};

/**
 *
 * @param handler
 */
Collection.prototype.onChange = function( handler ) {
    this.events.on( 'change', handler );
};

/**
 *
 * @returns {string}
 */
Collection.prototype.toString = function() {
    return this._items
        .map( function( item ) {
            return JSON.stringify( this.getItemValue( item ) );
        }, this )
        .join( ',' );
};

/**
 * @protected
 * @param value
 * @returns {*}
 */
Collection.prototype.getValueId = function( value ) {
    if( this.hasIdProperty && typeof  value !== 'undefined' && value !== null ) {
        return value[ this._idProperty ];
    }
};

/**
 * @protected
 * @param value1
 * @param value2
 * @returns {boolean}
 */
Collection.prototype.isEqual = function( value1, value2 ) {
    var idProperty = this.idProperty;

    if( this.hasIdProperty ) {
        if( isNotEmpty( value1, value2 ) ) {
            return value1[ idProperty ] === value2[ idProperty ];
        } else {
            return false;
        }
    } else {
        return value1 === value2;
    }

    function isNotEmpty() {
        var values = Array.prototype.slice.call( arguments );
        return values.every( function( value ) {
            return typeof value !== 'undefined' && value !== null;
        } );
    }
};

/**
 * @protected
 * @param {*} value
 * @param {number} [index]
 * @returns {*}
 */
Collection.prototype.createCollectionItem = function( value, index ) {
    var item = Object.create( null );

    item.__value = value;
    item.__index = index;

    return item;
};

/**
 * @protected
 * @param item
 * @param value
 * @returns {*}
 */
Collection.prototype.updateCollectionItem = function( item, value ) {
    item.__value = value;
    return item;
};

/**
 * @protected
 * @param {number} index
 * @return {*}
 */
Collection.prototype.getCollectionItemValue = function( index ) {
    var item = this._items[ index ];

    return this.getItemValue( item );
};

/**
 *
 * @param item
 * @returns {*}
 */
Collection.prototype.getItemValue = function( item ) {
    if( item ) {
        return item.__value;
    }
};

//####app/utils/collection/collectionEventManager.js
/**
 * @augments Backbone.Events
 * @constructor
 */
function CollectionEventManager() {
}

InfinniUI.CollectionEventManager = CollectionEventManager;

_.extend( CollectionEventManager.prototype, Backbone.Events );

/**
 *
 * @param {Array} newItems
 * @param {number} [newStartingIndex]
 * @returns {CollectionEventManager}
 */
CollectionEventManager.prototype.onAdd = function( newItems, newStartingIndex ) {
    var params = {
        action: 'add',
        newItems: newItems,
        newStartingIndex: typeof newStartingIndex !== 'undefined' ? newStartingIndex : -1
    };

    this.trigger( 'add', params );
    this.trigger( 'change', params );

    return this;
};

/**
 *
 * @returns {CollectionEventManager}
 */
CollectionEventManager.prototype.onReset = function() {
    var params = {
        action: 'reset'
    };

    this.trigger( 'reset', params );
    this.trigger( 'change', params );
    return this;
};

/**
 *
 * @param {Array} oldItems
 * @param {Array} newItems
 * @returns {CollectionEventManager}
 */
CollectionEventManager.prototype.onReplace = function( oldItems, newItems ) {
    var params = {
        action: 'replace',
        oldItems: oldItems,
        newItems: newItems
    };

    this.trigger( 'replace', params );
    this.trigger( 'change', params );
    return this;
};

/**
 *
 * @param {Array} oldItems
 * @param {number} [oldStartingIndex]
 * @returns {CollectionEventManager}
 */
CollectionEventManager.prototype.onRemove = function( oldItems, oldStartingIndex ) {
    var params = {
        action: 'remove',
        oldItems: oldItems,
        oldStartingIndex: typeof oldStartingIndex !== 'undefined' ? oldStartingIndex : -1
    };

    this.trigger( 'remove', params );
    this.trigger( 'change', params );
    return this;
};

/**
 *
 * @param {Array} oldItems
 * @param {Array} newItems
 * @param {number} oldStartingIndex
 * @param {number} newStartingIndex
 * @returns {CollectionEventManager}
 */
CollectionEventManager.prototype.onMove = function( oldItems, newItems, oldStartingIndex, newStartingIndex ) {
    var params = {
        oldItems: oldItems,
        newItems: newItems,
        oldStartingIndex: oldStartingIndex,
        newStartingIndex: newStartingIndex
    };

    this.trigger( 'move', params );
    this.trigger( 'change', params );
    return this;
};

//####app/executor/actionExecutor.js
/**
 *
 * @param {ActionFactory} actionFactory
 * @return {Function}
 * @constructor
 */
function ActionExecutor( actionFactory ) {
    var action = null;

    return function() {
        if( action === null ) {
            action = actionFactory.get();
        }

        var cb = Array.prototype.filter.call( arguments, function( arg ) {
            return typeof arg === 'function';
        } ).pop();

        var canExecute = action.getProperty( 'canExecute' );
        if( canExecute ) {
            new Promise( function( resolve, reject ) {
                resolve();
            } )
                .then( function() {
                    return canExecute();
                } )
                .then( function( result ) {
                    if( result ) {
                        action.execute.call( action, cb );
                    }
                } );
        } else {
            action.execute.call( action, cb );
        }
    };
}

InfinniUI.ActionExecutor = ActionExecutor;

//####app/executor/actionFactory.js
/**
 *
 * @param actionMetadata
 * @param builder
 * @param builderParams
 * @returns {{get: get}}
 * @constructor
 */
function ActionFactory( actionMetadata, builder, builderParams ) {
    return {
        get: get
    };

    function get() {
        return builder.build( actionMetadata, builderParams );
    }
}

InfinniUI.ActionFactory = ActionFactory;

//####app/executor/baseScriptExecutor.js
/**
 *
 * @param view
 * @param scriptFactory
 * @returns {Function}
 * @constructor
 */
function BaseScriptExecutor( view, scriptFactory ) {
    var script = null;

    return function( args ) {
        var context = view ? view.getContext() : null;

        if( script === null ) {
            script = scriptFactory.get();
        }

        return script.call( null, context, args );
    };
}

InfinniUI.BaseScriptExecutor = BaseScriptExecutor;

//####app/executor/compiledScriptFactory.js
/**
 *
 * @param scriptName
 * @param parentView
 * @returns {{get: get}}
 * @constructor
 */
function CompiledScriptFactory( scriptName, parentView ) {
    return {
        get: get
    };

    function get() {
        var scriptsStorage = parentView.getScriptsStorage();
        var script = scriptsStorage.getScripts().getById( scriptName );

        return script ? script.func : undefined;
    }
}

InfinniUI.CompiledScriptFactory = CompiledScriptFactory;

//####app/executor/executor.js
/**
 *
 * @param metadata
 * @param builder
 * @param {Object} builderParams
 * @param builderParams.parentView
 * @param builderParams.parent
 * @param {string} builderParams.basePathOfProperty
 * @return {Function}
 * @constructor
 */
function Executor( metadata, builder, builderParams ) {
    var handler;
    var scriptName, scriptBody;

    if( typeof metadata === 'string' ) {
        if( metadata[ 0 ] === '{' && metadata[ metadata.length - 1 ] === '}' ) {
            scriptBody = metadata.substring( 1, metadata.length - 1 );
            handler = BaseScriptExecutor( builderParams.parentView, InlineScriptFactory( scriptBody, builder, builderParams ) );
        } else {
            scriptName = metadata;
            handler = BaseScriptExecutor( builderParams.parentView, CompiledScriptFactory( scriptName, builderParams.parentView ) );
        }
    } else if( metadata !== null && typeof metadata === 'object' ) {
        //Action
        handler = ActionExecutor( ActionFactory( metadata, builder, builderParams ) );
    }

    return handler ? handler : function() {};
}

InfinniUI.Executor = Executor;

//####app/executor/inlineScriptFactory.js
/**
 *
 * @param scriptBody
 * @param builder
 * @param builderParams
 * @returns {{get: get}}
 * @constructor
 */
function InlineScriptFactory( scriptBody, builder, builderParams ) {

    return {
        get: get
    };

    function get() {
        var scriptBuilderParams = {
            parentView: builderParams.parentView,
            parent: builderParams.parent,
            basePathOfProperty: builderParams.basePathOfProperty
        };

        var scriptMetadata = {
            Body: scriptBody,
            Name: 'InlineScript'
        };

        var script = builder.buildType( 'Script', scriptMetadata, scriptBuilderParams );

        return function( context, args ) {
            return script.call( null, context, args );
        };
    }

}

InfinniUI.InlineScriptFactory = InlineScriptFactory;

//####app/controls/_base/_mixins/bindUIElementsMixin.js
/**
 *
 * @mixin
 */
var bindUIElementsMixin = {
    /**
     * Сохраняет в поле ui элементы по селектору в UI
     *
     * UI: {"name1": "selector1", "name2": "selector2"}
     */
    bindUIElements: function() {
        this.ui = {};

        if( typeof this.UI === 'undefined' ) {
            return;
        }

        for( var i in this.UI ) {
            if( !this.UI.hasOwnProperty( i ) ) continue;

            this.ui[ i ] = this.$( this.UI[ i ] );
        }
    }

};

InfinniUI.bindUIElementsMixin = bindUIElementsMixin;

//####app/controls/_base/_mixins/editMaskViewMixin.js
var editMaskViewMixin = ( function( global ) {

    var MASK_ATTRIBUTE = '_mask';
    var LIBRARY_NAME = 'editMask';

    var DEFAULT_STRATEGY = 'default';

    var strategies = {
        default: new DefaultStrategy(),
        timestamp: new UnixTimestampStrategy(),
        iso8601: new ISO8601Strategy()
    };

    var editMaskLibraryInitialized = false;

    return {

        editMaskStrategies: {
            DateTimeEditMask: 'iso8601',
            TemplateEditMask: 'default',
            NumberEditMask: 'default'
        },

        events: {
            'input .pl-control': 'onInputEventHandler',
            'change .pl-control': 'onChangeEventHandler',
            'focusin .pl-control': 'onFocusinEventHandler',
            'focusout .pl-control': 'onFocusoutEventHandler'
        },

        initialize: function() {
            init();
        },

        initHandlersForProperties: function() {
            this.listenTo( this.model, 'change:editMode', this.onChangeEditModeHandler );
            this.listenTo( this.model, 'invalid', this.onInvalidValueHandler );
        },

        setEditMaskStrategy: function( strategyName ) {
            this.editMaskStrategy = strategies[ strategyName ];
        },

        getEditMaskStrategy: function() {
            var strategy = this.editMaskStrategy;

            if( !strategy ) {
                strategy = strategies[ DEFAULT_STRATEGY ];
            }

            return strategy;
        },

        /**
         * @description Отображает статус проверки значения. Перекрыть для изменения способа уведомления об ошибке в значении
         * @param error
         */
        setValueValidationError: function( error ) {
            this.model.set( 'errorText', error );
        },

        getTimeZone: function() {
            return this.model.get( 'timeZone' );
        },

        setEditMode: function( editMode ) {
            this.model.set( 'editMode', editMode );
        },

        onInvalidValueHandler: function( model, error/*, options*/ ) {
            this.setValueValidationError( error );
        },

        onFocusinEventHandler: function() {

            var el = this.ui.control[ 0 ];
            var view = this;
            setTimeout( function() {
                var pos = el.selectionStart;
                view.setEditMode( true );
                if( el.setSelectionRange && /text|search|password|tel|url/i.test( el.type || '' ) ) {
                    el.setSelectionRange( pos, pos );
                }
            }, 4 );

        },

        onFocusoutEventHandler: function() {
            this.setEditMode( false );
        },

        onInputEventHandler: function() {
            this.updateModelValue();
        },

        onChangeEventHandler: function() {
            this.updateModelValue();
        },

        updateModelValue: function() {
            if( this[ MASK_ATTRIBUTE ] ) {

            } else {
                var text = this.ui.control.val();

                this.model.set( {
                    value: text,
                    rawValue: text
                }, {
                    validate: true
                } );

                if( this.model.isValid() ) {
                    this.model.set( 'errorText', null );
                }
            }

        },

        onChangeEditModeHandler: function( model, editMode ) {
            if( editMode ) {
                //turn on edit-mask when it specified
                createEditMask.call( this );
            } else {
                //turn off edit-mask when it specified
                destroyEditMask.call( this );
                //update display text
                editorBaseViewMixin.updateValueState.call( this );
                this.ui.control.val( this.getDisplayValue() );
            }
        }

    };

    function init() {
        if( editMaskLibraryInitialized ) {
            return;
        }
        editMaskLibraryInitialized = true;
        getEditMaskLibrary().Mask.api.init( { locale: InfinniUI.localized.name } );
    }

    function createEditMask() {
        var metadata = this.model.get( 'editMask' );

        if( !metadata ) {
            return;
        }

        var editMaskType = Object.keys( metadata ).pop();
        var config = metadata[ editMaskType ];
        var maskTemplate = normalizeMaskTemplate( config[ 'Mask' ] );
        var mask;

        var usedStrategy = this.editMaskStrategies[ editMaskType ];
        if( typeof usedStrategy === 'undefined' || usedStrategy === null ) {
            console.log( 'Не задано преобразование значения маски ввода' );
            usedStrategy = DEFAULT_STRATEGY;
        }

        this.setEditMaskStrategy( usedStrategy );

        switch( editMaskType ) {
            case 'DateTimeEditMask':
                mask = initDateTimeEditMask.call( this, maskTemplate );
                break;
            case 'NumberEditMask':
                mask = initNumberEditMask.call( this, maskTemplate );
                break;
            case 'TemplateEditMask':
                mask = initTemplateEditMask.call( this, maskTemplate, config );
                break;
            default:
                throw new Error( 'Incorrect edit mask type' );
        }

        this[ MASK_ATTRIBUTE ] = mask;
    }

    function destroyEditMask() {
        if( this[ MASK_ATTRIBUTE ] ) {
            this[ MASK_ATTRIBUTE ].destroy();
        }
    }

    function initDateTimeEditMask( maskTemplate ) {
        var model = this.model;
        var mask = getEditMaskLibrary().Mask.dateTime( this.ui.control[ 0 ], maskTemplate );

        var offset = model.get( 'timeZone' );
        if( typeof offset === 'undefined' || offset === null ) {
            offset = InfinniUI.DateUtils.getDefaultTimeZone();
        }

        mask.setTimezoneOffset( offset );

        var that = this;

        mask.setValue( this.getEditMaskStrategy().valueToMask( model.getValue() ) );

        mask.onChangeValue( function( event ) {
            var value = event.newValue;
            if( value !== null && typeof value !== 'undefined' ) {
                model.set( 'value', that.getEditMaskStrategy().maskToValue( value ) );
                if( model.isValid() ) {  //reset error
                    that.setValueValidationError( null );
                }
            } else {
                model.set( 'value', value );
            }
        } );

        return mask;
    }

    function initNumberEditMask( maskTemplate ) {
        var model = this.model;
        var mask = getEditMaskLibrary().Mask.number( this.ui.control[ 0 ], maskTemplate );
        mask.setValue( model.getValue() );
        mask.onChangeValue( function( event ) {
            model.set( 'value', event.newValue );
            if( model.isValid() ) {  //reset error
                model.set( 'errorText', null );
            }
        } );

        return mask;
    }

    function initTemplateEditMask( maskTemplate, config ) {
        var model = this.model;
        var mask = getEditMaskLibrary().Mask.template( this.ui.control[ 0 ], maskTemplate );

        var maskSaveLiteral = config[ 'MaskSaveLiteral' ];
        if( typeof maskSaveLiteral === 'boolean' ) {
            mask.setMaskSaveLiteral( maskSaveLiteral );
        }

        mask.setValue( model.getValue() );

        mask.onChangeValue( function( event ) {
            model.set( 'value', event.newValue );
        } );

        return mask;
    }

    function normalizeMaskTemplate( maskTemplate ) {
        var template = InfinniUI.localized.patternDateFormats[ maskTemplate ];


        if( typeof template !== 'undefined' ) {
            maskTemplate = template;
        }

        maskTemplate = maskTemplate.replace( /%([msd])/g, '$1' );

        return maskTemplate;
    }

    function DefaultStrategy() {

        this.valueToMask = function( value ) {
            return value;
        };

        /**
         *
         * @param {number} maskValue milliseconds
         * @returns {number} unix timestamp
         */
        this.maskToValue = function( maskValue ) {
            return maskValue;
        };
    }

    function UnixTimestampStrategy() {

        /**
         *
         * @param {number} value unix timestamp
         * @returns {number} milleseconds
         */
        this.valueToMask = function( value ) {
            var maskValue = null;

            if( value !== null && !isNaN( value ) && isFinite( value ) ) {
                maskValue = Math.round( value * 1000 );
            }

            return maskValue;
        };

        /**
         *
         * @param {number} maskValue milliseconds
         * @returns {number} unix timestamp
         */
        this.maskToValue = function( maskValue ) {
            var value = null;

            if( maskValue !== null && !isNaN( maskValue ) && isFinite( maskValue ) ) {
                value = +( maskValue / 1000 ).toFixed( 3 );
            }

            return value;
        };
    }

    function ISO8601Strategy() {

        /**
         *
         * @param {string} value ISO 8601
         * @returns {number} milliseconds
         */
        this.valueToMask = function( value ) {
            var maskValue = null;
            if( value !== null && typeof value !== 'undefined' ) {
                maskValue = new Date( value ).getTime();
            }
            return maskValue;
        };

        /**
         *
         * @param {number} maskValue milliseconds
         * @returns {string} ISO 8601
         */
        this.maskToValue = function( maskValue ) {
            var date = new Date( maskValue );
            return InfinniUI.DateUtils.toISO8601( date );
        };
    }

    function getEditMaskLibrary() {
        var editMask = global[ LIBRARY_NAME ];

        if( !editMask ) {
            console.error( 'edit-mask library "' + LIBRARY_NAME + '" not loaded!' );
        }

        return editMask;
    }


} )( window );

//####app/controls/_base/_mixins/eventHandlerMixin.js
/**
 *
 * @mixin
 */
var eventHandlerMixin = {
    /**
     *
     * @param {string} name
     * @param {*} handler
     * @callback handler
     * @returns {boolean|*}
     */
    addEventHandler: function( name, handler ) {
        this.initEventHandlerMixin();

        if( name === null || typeof name === 'undefined' ) {
            return false;
        }

        if( handler === null || typeof handler === 'undefined' ) {
            return false;
        }

        if( typeof this.eventHandlers[ name ] === 'undefined' ) {
            this.eventHandlers[ name ] = [];
        }

        var handlers = this.eventHandlers[ name ];

        if( handlers.indexOf( handler ) === -1 ) {
            handlers.push( handler );
        }
    },

    /**
     * @description Вызывает обработчики указанного события.
     * Формат вызова callEventHandler(name, [data],[handler])
     * @param {string} name Название события
     * @callback [callback] Функцию в которую будут переданы результат вызова каждого обработчика
     * @returns {*}
     */
    callEventHandler: function( name ) {
        if( typeof this.eventHandlers === 'undefined' || name === null || typeof name === 'undefined' ) {
            return;
        }
        var handlers = this.eventHandlers[ name ];

        if( typeof handlers === 'undefined' ) {
            return;
        }

        var args = Array.prototype.slice.call( arguments, 1 );
        var params = args.pop();
        var callback;

        if( typeof params === 'function' ) {
            callback = params;
        }
        params = args.pop();

        _.each( handlers, function( handler ) {
            var result = handler.apply( undefined, params );

            if( typeof callback !== 'undefined' ) {
                callback( result );
            }
        } );
    },

    /**
     * @private
     */
    initEventHandlerMixin: function() {
        if( typeof this.eventHandlers === 'undefined' ) {
            this.eventHandlers = {};
        }
    }

};

InfinniUI.eventHandlerMixin = eventHandlerMixin;

//####app/controls/_base/control/control.js
/**
 * @description Базовый класс контролов
 * @class Control
 * @param viewMode
 * @constructor
 */
var Control = function( viewMode ) {
    this.controlModel = this.createControlModel();
    this.controlView = this.createControlView( this.controlModel, viewMode );
    this.initHandlers();
};

_.extend( Control.prototype, {

    /**
     *
     */
    createControlModel: function() {
        throw new Error( 'Не перегружен абстрактный метод Control.createControlModel()' );
    },

    /**
     *
     * @param model
     * @param viewMode
     */
    createControlView: function( model, viewMode ) {
        throw new Error( 'Не перегружен абстрактный метод Control.createControlView()' );
    },

    /**
     *
     */
    initHandlers: function() {
        this.controlView.on( 'onLoaded', function() {
            this.controlModel.set( 'isLoaded', true );
        }, this );
    },

    /**
     *
     * @param key
     * @param value
     */
    set: function( key, value ) {
        this.controlModel.set( key, value );
    },

    /**
     *
     * @param key
     * @returns {*}
     */
    get: function( key ) {
        return this.controlModel.get( key );
    },

    /**
     *
     * @param name
     * @param handler
     * @returns {*}
     */
    on: function( name, handler ) {
        return this.controlModel.on( name, handler );
    },

    /**
     *
     * @returns {*}
     */
    render: function() {
        return this.controlView.render().$el;
    },

    /**
     *
     * @returns {Array}
     */
    getChildElements: function() {
        return [];
    },

    /**
     *
     * @param handler
     */
    onLoaded: function( handler ) {
        this.controlModel.on( 'change:isLoaded', function( isLoaded ) {
            if( isLoaded ) {
                handler();
            }
        } );
    },

    /**
     *
     * @returns {*}
     */
    isLoaded: function() {
        return this.controlModel.get( 'isLoaded' );
    },

    /**
     *
     * @param handler
     */
    onBeforeClick: function( handler ) {
        this.controlView.on( 'beforeClick', handler );
    },

    /**
     *
     * @param handler
     */
    onClick: function( handler ) {
        this.controlView.$el.on( 'click', handler );
    },

    /**
     *
     * @param handler
     */
    onDoubleClick: function( handler ) {
        this.controlView.$el.on( 'dblclick', handler );
    },

    /**
     *
     * @param handler
     */
    onMouseDown: function( handler ) {
        this.controlView.$el.on( 'mousedown', handler );
    },

    /**
     *
     * @param handler
     */
    onMouseUp: function( handler ) {
        this.controlView.$el.on( 'mouseup', handler );
    },

    /**
     *
     * @param handler
     */
    onMouseEnter: function( handler ) {
        this.controlView.$el.on( 'mouseenter', handler );
    },

    /**
     *
     * @param handler
     */
    onMouseLeave: function( handler ) {
        this.controlView.$el.on( 'mouseleave', handler );
    },

    /**
     *
     * @param handler
     */
    onMouseMove: function( handler ) {
        this.controlView.$el.on( 'mousemove', handler );
    },

    /**
     *
     * @param handler
     */
    onMouseWheel: function( handler ) {
        this.controlView.$el.on( 'mousewheel DOMMouseScroll', handler );
    },

    /**
     *
     * @param handler
     */
    onKeyDown: function( handler ) {
        this.controlView.$el.on( 'keydown', handler );
    },

    /**
     *
     * @param handler
     */
    onKeyUp: function( handler ) {
        this.controlView.$el.on( 'keyup', handler );
    },

    /**
     *
     * @param handler
     */
    onRemove: function( handler ) {
        this.controlView.on( messageTypes.onRemove.name, handler );
    },

    /**
     *
     */
    remove: function() {
        this.controlView.remove();
    },

    /**
     *
     */
    setFocus: function() {
        this.controlView.setFocus();
    }

} );

InfinniUI.Control = Control;

//####app/controls/_base/control/controlModel.js
/**
 *
 * @constructor
 */
var ControlModel = Backbone.Model.extend( {

    defaults: {
        text: null,
        name: null,
        enabled: true,
        parentEnabled: true,
        visible: true,
        textHorizontalAlignment: InfinniUI.TextHorizontalAlignment.left,
        horizontalAlignment: 'Stretch',
        textStyle: null,
        background: null,
        foreground: null,
        isLoaded: false,
        validationState: 'success',
        validationMessage: '',
        focusable: true,
        focused: false
    },

    /**
     *
     */
    initialize: function() {
        this.set( 'guid', guid(), { silent: true } );
        this.on( 'change:focused', function( model, value ) {
            this.trigger( value ? 'OnGotFocus' : 'OnLostFocus' );
        } );
    },

    /**
     *
     * @param key
     * @param val
     * @param options
     * @returns {*}
     */
    set: function( key, val, options ) {
        var defaults = this.defaults;
        var attrs;

        if( key === null || typeof key === 'undefined' ) return this;
        if( typeof key === 'object' ) {
            attrs = key;
            options = val;
        } else {
            ( attrs = {} )[ key ] = val;
        }

        for( var name in attrs ) {
            if( typeof attrs[ name ] !== 'undefined' && attrs[ name ] !== null ) {
                continue;
            }

            if( name in defaults ) {
                attrs[ name ] = defaults[ name ];
            }
        }
        return Backbone.Model.prototype.set.call( this, attrs, options );
    }

} );

InfinniUI.ControlModel = ControlModel;

//####app/controls/_base/control/controlView.js
/**
 * @class
 * @augments Backbone.View
 * @constructor
 */
var ControlView = Backbone.View.extend( {

    /**
     *
     */
    initialize: function() {
        this.wasRendered = false;
        this.once( 'render', this.initHandlersForProperties, this );
        this._initDomHandlers();
    },

    classNameFocused: 'pl-focused',

    /**
     *
     * @private
     */
    _initDomHandlers: function() {
        var view = this;
        var $el = this.$el;

        $el[ 0 ].addEventListener( 'click', function( event ) {
            view.trigger( 'beforeClick', null, { value: event } );
        }, true );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        this.listenTo( this.model, 'change:visible', this.updateVisible );
        this.listenTo( this.model, 'change:horizontalAlignment', this.updateHorizontalAlignment );
        this.listenTo( this.model, 'change:textHorizontalAlignment', this.updateTextHorizontalAlignment );
        this.listenTo( this.model, 'change:enabled', this.updateEnabled );
        this.listenTo( this.model, 'change:name', this.updateName );
        this.listenTo( this.model, 'change:style', this.updateStyle );
        this.listenTo( this.model, 'change:text', this.updateText );
        this.listenTo( this.model, 'change:textStyle', this.updateTextStyle );
        this.listenTo( this.model, 'change:background', this.updateBackground );
        this.listenTo( this.model, 'change:foreground', this.updateForeground );
        this.listenTo( this.model, 'change:validationState', this.updateValidationState );
        this.listenTo( this.model, 'change:focusable', this.updateFocusable );
        this.listenTo( this.model, 'change:focused', this.updateFocused );

        this.initFocusHandlers();
    },

    /**
     *
     */
    initFocusHandlers: function() {
        var $el = this.$el;
        var view = this;
        var model = this.model;

        $el
            .on( 'focusin', onFocusIn )
            .on( 'focusout', onFocusOut );

        function onFocusIn( event ) {
            model.set( 'focused', true );
        }

        function onFocusOut( event ) {
            if( view.isControlElement( event.relatedTarget ) ) {
                //focus out to element inside control
                model.set( 'focused', true );
            } else {
                //focus out
                model.set( 'focused', false );
            }
        }
    },

    /**
     *
     * @param el
     * @returns {boolean}
     */
    isControlElement: function( el ) {
        return this.el === el || $.contains( this.el, el );
    },

    /**
     *
     */
    updateProperties: function() {
        this.updateVisible();
        this.updateTextHorizontalAlignment();
        this.updateHorizontalAlignment();
        this.updateEnabled();
        this.updateName();
        this.updateText();
        this.updateStyle();
        this.updateTextStyle();
        this.updateBackground();
        this.updateForeground();
        this.updateValidationState();
        this.updateFocusable();
        this.updateFocused();
        this.updateViewMode();
    },

    /**
     * @description Изменяет контрол в соответсвии со значением focusable. Напр. добавить tabindex="0"
     */
    updateFocusable: function() {
    },

    /**
     * @description Возвращает элемент, который должен получить фокус
     * @returns {jQuery}
     */
    getElementForFocus: function() {
        return this.$el;
    },

    /**
     *
     */
    updateFocused: function() {
        var focused = this.model.get( 'focused' );

        if( focused ) {
            var $el = this.getElementForFocus();
            if( $el && $el.length ) {
                //$el.focus();
            }
        }
        this.$el.toggleClass( this.classNameFocused, focused );
    },

    /**
     *
     * @param event
     */
    onFocusHandler: function( event ) {
    },

    /**
     *
     */
    updateVisible: function() {
        var isVisible = this.model.get( 'visible' );
        this.$el.toggleClass( 'hidden', !isVisible );

        this.onUpdateVisible();
    },

    /**
     *
     */
    onUpdateVisible: function() {
        this.updateLayout();
    },

    /**
     *
     */
    updateLayout: function() {
        var exchange = InfinniUI.global.messageBus;
        exchange.send( 'OnChangeLayout', {} );
    },

    /**
     *
     */
    updateEnabled: function() {
        var isEnabled = this.model.get( 'enabled' );
        this.$el.toggleClass( 'pl-disabled', !isEnabled );
    },

    /**
     *
     */
    updateTextHorizontalAlignment: function() {
        this.switchClass( 'pl-text-horizontal', this.model.get( 'textHorizontalAlignment' ) );
    },

    /**
     *
     */
    updateHorizontalAlignment: function() {
        this.switchClass( 'pl-horizontal', this.model.get( 'horizontalAlignment' ) );
    },

    /**
     *
     */
    updateName: function() {
        var newName = this.model.get( 'name' );
        var currentName = this.$el.attr( 'data-pl-name' );

        if( newName !== currentName && typeof newName === 'string' ) {
            this.$el.attr( 'data-pl-name', newName );
        }
    },

    /**
     *
     */
    updateText: function() {
    },

    /**
     *
     */
    updateTextStyle: function() {
        var customStyle = this.model.get( 'textStyle' );

        this.changeElementClass( this.valueToTextClassName( this.currentTextStyle ), this.valueToTextClassName( customStyle ) );
        this.currentTextStyle = customStyle;
    },

    /**
     *
     */
    updateBackground: function() {
        var customStyle = this.model.get( 'background' );

        this.changeElementClass( this.valueToBackgroundClassName( this.currentBackground ), this.valueToBackgroundClassName( customStyle ) );
        this.currentBackground = customStyle;
    },

    /**
     *
     */
    updateForeground: function() {
        var customStyle = this.model.get( 'foreground' );

        this.changeElementClass( this.valueToForegroundClassName( this.currentForeground ), this.valueToForegroundClassName( customStyle ) );
        this.currentForeground = customStyle;
    },

    /**
     *
     */
    updateStyle: function() {
        var customStyle = this.model.get( 'style' );

        this.changeElementClass( this.currentStyle, customStyle );
        this.currentStyle = customStyle;
    },

    /**
     *
     * @param oldClass
     * @param newClass
     */
    changeElementClass: function( oldClass, newClass ) {
        if( oldClass ) {
            this.$el.removeClass( oldClass );
        }

        if( newClass ) {
            this.$el.addClass( newClass );
        }
    },

    /**
     *
     */
    updateViewMode: function() {
        if( this.viewMode == 'FormGroup' ) {
            this.$el.addClass( 'pl-form-group' );
        }
    },

    /**
     *
     */
    updateValidationState: function() {
        var newState = this.model.get( 'validationState' );
        var message = this.model.get( 'validationMessage' );

        switch( newState ) {
            case 'success':
                this.$el
                    .removeClass( 'has-warning has-error' );
                this.hideErrorMessage();
                break;

            case 'warning':
                this.$el
                    .removeClass( 'has-error' )
                    .addClass( 'has-warning' );
                this.showErrorMessage( message );
                break;

            case 'error':
                this.$el
                    .removeClass( 'has-warning' )
                    .addClass( 'has-error' );
                this.showErrorMessage( message );
                break;

            default:
                break;
        }
    },

    /**
     *
     * @param message
     */
    showErrorMessage: function( message ) {
        var $errorIcn = $( _.template( '<i class="2 error-icn fa fa-warning" data-placement="left" title="<%-message%>"></i>' )( { message: message } ) );

        this.hideErrorMessage();
        this.$el
            .find( '.form-control:first' )
            .before( $errorIcn );

        $errorIcn.tooltip( { 'container': 'body' } );
    },

    /**
     *
     */
    hideErrorMessage: function() {
        this.$el
            .find( '.error-icn' )
            .remove();
    },

    /**
     *
     */
    rerender: function() {
        if( this.wasRendered ) {
            this.render();
        }
    },

    /**
     *
     */
    prerenderingActions: function() {
        this.wasRendered = true;
    },

    /**
     *
     * @param {Boolean} triggeringOnLoaded [onLoaded=true]
     */
    postrenderingActions: function( triggeringOnLoaded ) {
        this.delegateEvents();

        triggeringOnLoaded = triggeringOnLoaded === undefined ? true : triggeringOnLoaded;

        if( triggeringOnLoaded ) {
            this.trigger( 'onLoaded' );
        }
    },

    /**
     *
     */
    remove: function() {
        this.trigger( messageTypes.onRemove.name );
        Backbone.View.prototype.remove.apply( this, Array.prototype.slice.call( arguments ) );
    },

    /**
     *
     * @param name
     * @param value
     * @param $el
     * @param separator
     */
    switchClass: function( name, value, $el, separator ) {
        if( typeof separator === 'undefined' ) {
            separator = '-';
        } else if( separator === false ) {
            separator = '';
        }

        var startWith = name + separator;
        var regexp = new RegExp( '(^|\\s)' + startWith + '\\S+', 'ig' );
        var $element = $el || this.$el;
        $element.removeClass( function( i, name ) {
            return ( name.match( regexp ) || [] ).join( ' ' );
        } ).addClass( startWith + value );
    },

    /**
     *
     * @param value
     * @returns {string}
     */
    valueToBackgroundClassName: function( value ) {
        if( value ) return 'pl-' + value.toLowerCase() + '-bg';
        else return '';
    },

    /**
     *
     * @param value
     * @returns {string}
     */
    valueToForegroundClassName: function( value ) {
        if( value ) return 'pl-' + value.toLowerCase() + '-fg';
        else return '';
    },

    /**
     *
     * @param value
     * @returns {string}
     */
    valueToTextClassName: function( value ) {
        if( value ) return 'pl-' + value.toLowerCase();
        else return '';
    },

    /**
     *
     * @param template
     */
    renderTemplate: function( template ) {
        var data = this.getData();

        this.$el.html( template( data ) );
        this.bindUIElements();
    },

    /**
     *
     * @returns {{name, text, focusable, focused, enabled, visible, horizontalAlignment, textHorizontalAlignment, textVerticalAlignment, textStyle, foreground, background}}
     */
    getData: function() {
        var model = this.model;

        return {
            name: model.get( 'name' ),
            text: model.get( 'text' ),
            focusable: model.get( 'focusable' ),
            focused: model.get( 'focused' ),
            enabled: model.get( 'enabled' ),
            visible: model.get( 'visible' ),
            horizontalAlignment: model.get( 'horizontalAlignment' ),
            textHorizontalAlignment: model.get( 'textHorizontalAlignment' ),
            textVerticalAlignment: model.get( 'textVerticalAlignment' ),
            textStyle: model.get( 'textStyle' ),
            foreground: model.get( 'foreground' ),
            background: model.get( 'background' )
        };
    },

    /**
     *
     */
    setFocus: function() {
        this.$el.focus();
    }

} );

_.extend( ControlView.prototype, bindUIElementsMixin, eventHandlerMixin );

InfinniUI.ControlView = ControlView;

//####app/controls/_base/button/buttonControlMixin.js
/**
 *
 * @mixin
 */
var buttonControlMixin = {

    /**
     *
     */
    click: function() {
        this.controlView.$el.click();
    }

};

InfinniUI.buttonControlMixin = buttonControlMixin;

//####app/controls/_base/container/containerControl.js
/**
 *
 * @param viewMode
 * @constructor
 */
function ContainerControl( viewMode ) {
    _.superClass( ContainerControl, this, viewMode );
}

_.inherit( ContainerControl, Control );

_.extend( ContainerControl.prototype, {} );

InfinniUI.ContainerControl = ContainerControl;

//####app/controls/_base/container/containerModel.js
/**
 * @constructor
 * @augments ControlModel
 */
var ContainerModel = ControlModel.extend( {

    defaults: _.defaults( {
        //items: new Collection()
        itemTemplate: null
    }, ControlModel.prototype.defaults ),

    initialize: function() {
        ControlModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
        this.set( 'items', new Collection() );
    }

} );

InfinniUI.ContainerModel = ContainerModel;

//####app/controls/_base/container/containerView.js
/**
 * @class
 * @augments ControlView
 */
var ContainerView = ControlView.extend( {

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ControlView.prototype.initialize.call( this, options );

        this.childElements = [];

        this.listenTo( this.model, 'change:groupValueSelector', this.updateGrouping );
        this.updateGrouping();
    },

    /**
     *
     */
    updateGrouping: function() {
        throw new Error( 'ContainerView.updateGrouping В потомке ContainerView не реализовано обновление группировок.' );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );

        var that = this;
        this.model.get( 'items' ).onChange( function( event ) {
            switch( event.action ) {
                case 'replace':
                    break;
                default:
                    that.rerender();
            }
        } );
    },

    /**
     *
     */
    removeChildElements: function() {
        for( var i = 0, ii = this.childElements.length; i < ii; i++ ) {
            this.childElements[ i ].remove();
        }

        this.childElements = [];
    },

    /**
     *
     * @param child
     */
    addChildElement: function( child ) {
        this.childElements.push( child );
    }

} );

InfinniUI.ContainerView = ContainerView;

//####app/controls/_base/editorBase/editorBaseControlMixin.js
/**
 *
 * @mixin
 */
var editorBaseControlMixin = {

    initialize_editorBaseControl: function() {
    },

    /**
     *
     * @param value
     */
    setValue: function( value ) {
        this.controlModel.set( 'value', value );
    },

    /**
     *
     */
    getValue: function() {
        return this.controlModel.get( 'value' );
    },

    /**
     *
     * @param handler
     */
    onValueChanging: function( handler ) {
        this.controlModel.onValueChanging( handler );
    },

    /**
     *
     * @param handler
     */
    onValueChanged: function( handler ) {
        this.controlModel.onValueChanged( handler );
    },

    /**
     *
     * @returns {*}
     */
    getRawValue: function() {
        return this.controlView.getRawValue();
    }

};

InfinniUI.editorBaseControlMixin = editorBaseControlMixin;

//####app/controls/_base/editorBase/editorBaseModelMixin.js
/**
 *
 * @mixin
 */
var editorBaseModelMixin = {

    defaults_editorBaseModel: {
        value: null,
        hintText: null,
        errorText: null,
        warningText: null,
        labelFloating: false,
        editMode: false //Текущий редим работы (редактор/отображение)
    },

    /**
     *
     */
    initialize_editorBaseModel: function() {
        this.eventManager = new EventManager();
        this.isInited = true;
    },

    /**
     *
     * @param value
     * @returns {*}
     */
    transformValue: function( value ) {
        return value;
    },

    /**
     *
     * @param value
     * @returns {*}
     * @private
     */
    _applyDefaultValue: function( value ) {
        var defaults = _.result( this, 'defaults' );
        return typeof value === 'undefined' ? defaults[ 'value' ] : value;
    },

    /**
     *
     * @param value
     * @param options
     * @private
     */
    _setValue: function( value, options ) {
        value = this.transformValue( value );
        value = this._applyDefaultValue( value );

        var oldValue = this.get( 'value' );
        var message = {
            oldValue: oldValue,
            newValue: value
        };

        if( value === oldValue ) {
            return;
        }

        if( this.isInited ) {
            if( this.eventManager.trigger( 'onValueChanging', message ) ) {
                ContainerModel.prototype.set.call( this, 'value', value, options || {} );
                this.trigger( 'onValueChanged', message );
            }
        } else {
            ContainerModel.prototype.set.call( this, 'value', value, options || {} );
        }
    },

    /**
     *
     * @param key
     * @param value
     * @param options
     * @returns {*}
     */
    set: function( key, value, options ) {
        var attributes;

        if( key === null || typeof key === 'undefined' ) {
            return this;
        }

        if( typeof key === 'object' ) {
            attributes = key;
            options = value;
        } else {
            ( attributes = {} )[ key ] = value;
        }

        options = options || {};

        if( 'value' in attributes ) {
            this._setValue( attributes.value, options );
            delete attributes.value;
        }

        var hasAttributes = false;

        for( var i in attributes ) {
            hasAttributes = true;
            break;
        }

        if( hasAttributes ) {
            return ContainerModel.prototype.set.call( this, attributes, options );
        }

        return false;
    },

    /**
     *
     */
    getValue: function() {
        return this.get( 'value' );
    },

    /**
     *
     * @param value
     * @returns {boolean}
     */
    isSetValue: function( value ) {
        return value !== null && typeof value !== 'undefined' && value !== '';
    },

    /**
     *
     * @param handler
     */
    onValueChanging: function( handler ) {
        this.eventManager.on( 'onValueChanging', handler );
    },

    /**
     *
     * @param handler
     */
    onValueChanged: function( handler ) {
        this.on( 'onValueChanged', handler );
    }

};

InfinniUI.editorBaseModelMixin = editorBaseModelMixin;

//####app/controls/_base/editorBase/editorBaseViewMixin.js
/**
 *
 * @mixin
 */
var editorBaseViewMixin = {

    UI: {
        hintText: '.pl-control-hint-text',
        warningText: '.pl-control-warning-text',
        errorText: '.pl-control-error-text'
    },

    /**
     *
     * @returns {{guid}}
     */
    getData: function() {
        return {
            guid: this.model.get( 'guid' )
        };
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        this.listenTo( this.model, 'onValueChanged', this.updateValue );
        this.listenTo( this.model, 'change:hintText', this.updateHintText );
        this.listenTo( this.model, 'change:errorText', this.updateErrorText );
        this.listenTo( this.model, 'change:warningText', this.updateWarningText );
        this.listenTo( this.model, 'change:labelFloating', this.updateLabelFloating );
    },

    /**
     *
     */
    updateProperties: function() {
        this.updateValue();
        this.updateLabelFloating();
        this.updateHintText();
        this.updateErrorText();
        this.updateWarningText();
    },

    /**
     *
     */
    updateValue: function() {
        throw new Error( 'editorBaseViewMixin.updateValue В потомке editorBaseViewMixin не реализовано обновление данных.' );
    },

    updateValueState: function() {
        var value = this.model.get( 'value' );
        var isEmpty = _.isEmpty( value ) && typeof value !== 'number';

        this.$el.toggleClass( 'pl-empty-text-editor', isEmpty );
    },

    /**
     *
     */
    updateLabelFloating: function() {
        var labelFloating = this.model.get( 'labelFloating' );
        this.$el.toggleClass( 'pl-label-floating', labelFloating === true );
    },

    /**
     *
     */
    updateHintText: function() {
        this.toggleHintText( this.ui.hintText, this.model.get( 'hintText' ) );
    },

    /**
     *
     */
    updateErrorText: function() {
        this.toggleHintText( this.ui.errorText, this.model.get( 'errorText' ), InfinniUI.Theme.default.classes.inputError );
    },

    /**
     *
     */
    updateWarningText: function() {
        this.toggleHintText( this.ui.warningText, this.model.get( 'warningText' ), InfinniUI.Theme.default.classes.inputWarning );
    },

    /**
     *
     */
    updateEnabled: function() {
        ControlView.prototype.updateEnabled.call( this );

        if( this.ui.control ) {
            var isEnabled = this.model.get( 'enabled' );
            this.ui.control.prop( 'disabled', !isEnabled );
        }
    },

    /**
     *
     * @param model
     * @param error
     */
    onInvalidHandler: function( model, error ) {
        // что ита???
        // вот ето -  @see {@link http://backbonejs.org/#Model-validate} !!!
        //@TODO Можно ли использовать поля из API или реализовывать вывод ошибок отдельно?
        //this.model.set('errorText', error);
    },

    /**
     * @protected
     * @param {jQuery} $element
     * @param {string} text
     * @param {string} [inputClass]
     */
    toggleHintText: function( $element, text, inputClass ) {
        var hideText = !text;
        $element
            .text( hideText ? '' : text )
            .toggleClass( InfinniUI.Theme.default.classes.hidden, hideText );

        if ( inputClass ) {
            this.$el.toggleClass( inputClass, !hideText );
        }
    }

};

InfinniUI.editorBaseViewMixin = editorBaseViewMixin;

//####app/controls/_base/listEditorBase/listEditorBaseControl.js
/**
 *
 * @param viewMode
 * @constructor
 */
function ListEditorBaseControl( viewMode ) {
    _.superClass( ListEditorBaseControl, this, viewMode );
    this.initialize_editorBaseControl();
}

_.inherit( ListEditorBaseControl, ContainerControl );

_.extend( ListEditorBaseControl.prototype, {

    /**
     *
     * @param handler
     */
    onSelectedItemChanged: function( handler ) {
        this.controlModel.onSelectedItemChanged( handler );
    }

}, editorBaseControlMixin );

InfinniUI.ListEditorBaseControl = ListEditorBaseControl;

//####app/controls/_base/listEditorBase/listEditorBaseModel.js
/**
 *
 * @constructor
 */
var ListEditorBaseModel = ContainerModel.extend( _.extend( {

    defaults: _.defaults( {
        multiSelect: false,
        disabledItemCondition: null
    }, ContainerModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        var that = this;
        this.hashValueByItem = new HashMap();
        ContainerModel.prototype.initialize.apply( this, arguments );
        this.initialize_editorBaseModel();

        this.bindSelectedItemsWithValue();

        this.get( 'items' ).onChange( function() {
            that.hashValueByItem.clear();
        } );
    },

    /**
     *
     * @param handler
     */
    onSelectedItemChanged: function( handler ) {
        this.on( 'change:selectedItem', function( source, newSelectedItem ) {
            handler( { value: newSelectedItem } );
        } );
    },

    /**
     *
     * @param value
     * @param toggle
     */
    toggleValue: function( value, toggle ) {
        var currentValue = this.get( 'value' );
        var multiSelect = this.get( 'multiSelect' );

        if( multiSelect ) {
            currentValue = Array.isArray( currentValue ) ? currentValue : [];

            var valueAsString = JSON.stringify( value );

            var newValue = currentValue.filter( function( val ) {
                return JSON.stringify( val ) !== valueAsString;
            } );

            if( typeof toggle === 'undefined' || toggle === true ) {
                if( newValue.length === currentValue.length ) {
                    newValue.push( value );
                }
            }

            this.set( 'value', newValue );

        } else {
            if( value != currentValue ) {
                this.set( 'value', value );
            }
        }
    },

    /**
     *
     */
    bindSelectedItemsWithValue: function() {
        return;
    },

    /**
     *
     * @param item
     * @returns {*}
     */
    valueByItem: function( item ) {
        var valueSelector = this.get( 'valueSelector' );

        if( !valueSelector ) {
            return item;
        } else {
            return valueSelector( undefined, { value: item } );
        }
    },

    /**
     *
     * @param value
     * @returns {*}
     */
    itemInfoByValue: function( value ) {
        if( this.hashValueByItem.length === 0 ) {
            this.updateHashValueByItem();
        }
        var info;
        var index;
        var item = this.hashValueByItem.getKeyByValue( value );

        if( typeof item !== 'undefined' ) {
            info = {
                item: item,
                index: this.hashValueByItem.keys.indexOf( item )
            };
        } else {
            var text = JSON.stringify( value );
            index = this.hashValueByItem.findIndex( function( item, value ) {
                return JSON.stringify( value ) === text;
            } );

            if( index !== -1 ) {
                info = {
                    index: index,
                    item: this.hashValueByItem.keys[ index ]
                };
            }
        }

        return info;
    },

    /**
     *
     * @param value
     * @returns {undefined|*}
     */
    itemByValue: function( value ) {
        var itemInfo = this.itemInfoByValue( value );

        if( !itemInfo ) {
            return undefined;
        } else {
            return itemInfo.item;
        }
    },

    /**
     *
     * @param value
     * @returns {number}
     */
    itemIndexByValue: function( value ) {
        var itemInfo = this.itemInfoByValue( value );

        if( !itemInfo ) {
            return -1;
        } else {
            return itemInfo.index;
        }
    },

    /**
     *
     * @param item
     * @returns {*|number}
     */
    itemIndexByItem: function( item ) {
        var value = this.valueByItem( item );

        return this.itemIndexByValue( value );
    },

    /**
     *
     * @param item
     * @returns {boolean}
     */
    isDisabledItem: function( item ) {
        var disabledItemCondition = this.get( 'disabledItemCondition' );

        return ( disabledItemCondition !== null && typeof disabledItemCondition !== 'undefined' ) &&
            disabledItemCondition( undefined, { value: item } );
    },

    /**
     *
     */
    updateHashValueByItem: function() {
        var items = this.get( 'items' );
        var value;

        this.hashValueByItem.clear();
        items.forEach( function( item ) {
            value = this.valueByItem( item );
            this.hashValueByItem.add( item, value );
        }, this );
    }

}, editorBaseModelMixin ) );

InfinniUI.ListEditorBaseModel = ListEditorBaseModel;

//####app/controls/_base/listEditorBase/listEditorBaseView.js
/**
 *
 * @constructor
 */
var ListEditorBaseView = ContainerView.extend( _.extend( {}, editorBaseViewMixin, {

    /**
     *
     */
    initHandlersForProperties: function() {
        ContainerView.prototype.initHandlersForProperties.call( this );
        editorBaseViewMixin.initHandlersForProperties.call( this );

        this.listenTo( this.model, 'change:selectedItem', this.updateSelectedItem );
        this.listenTo( this.model, 'change:multiSelect', this.updateMultiSelect );
        this.listenTo( this.model, 'change:disabledItemCondition', this.updateDisabledItem );
    },

    /**
     *
     */
    updateProperties: function() {
        ContainerView.prototype.updateProperties.call( this );
        editorBaseViewMixin.updateProperties.call( this );

        this.updateSelectedItem();
        this.updateMultiSelect();
        this.updateDisabledItem();
    },

    /**
     *
     */
    updateMultiSelect: function() {
    }

} ) );

InfinniUI.ListEditorBaseView = ListEditorBaseView;

//####app/controls/_base/textEditorBase/textEditorBaseControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments Control
 * @mixes editorBaseControlMixin
 */
function TextEditorBaseControl( parent ) {
    _.superClass( TextEditorBaseControl, this, parent );
    this.initialize_editorBaseControl();
}

_.inherit( TextEditorBaseControl, Control );

_.extend( TextEditorBaseControl.prototype, editorBaseControlMixin );

InfinniUI.TextEditorBaseControl = TextEditorBaseControl;

//####app/controls/_base/textEditorBase/textEditorBaseModel.js
/**
 * @class
 * @augments ControlModel
 * @mixes editorBaseModelMixin
 */
var TextEditorBaseModel = ControlModel.extend( {

    defaults: _.defaults( {
        labelText: null,
        labelTextTitle: null,
        displayFormat: null,
        editMask: null
    }, editorBaseModelMixin.defaults_editorBaseModel, ControlModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
        this.initialize_editorBaseModel();
    }
} );

_.extend( TextEditorBaseModel.prototype, editorBaseModelMixin );

InfinniUI.TextEditorBaseControl = TextEditorBaseControl;


//####app/controls/_base/textEditorBase/textEditorBaseView.js
/**
 * @class TextEditorBaseView
 * @augments ControlView
 * @mixes editorBaseViewMixin
 * @mixes editMaskViewMixin
 */
var TextEditorBaseView = ControlView.extend( /** @lends TextEditorBaseView.prototype */ _.extend( {}, editorBaseViewMixin, editMaskViewMixin, {
    UI: _.extend( {}, editorBaseViewMixin.UI, {
        control: '.pl-control',
        editor: '.pl-editor',
        label: '.pl-control-label',
        textbox: '.pl-text-box-input'
    } ),

    events: _.extend(
        {},
        ControlView.prototype.events,
        editMaskViewMixin.events
    ),

    /**
     *
     */
    initialize: function() {
        ControlView.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
        editMaskViewMixin.initialize.call( this );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );
        editorBaseViewMixin.initHandlersForProperties.call( this );
        editMaskViewMixin.initHandlersForProperties.call( this );

        this.listenTo( this.model, 'change:labelText', this.updateLabelText );
        this.listenTo( this.model, 'change:labelTextTitle', this.updateLabelTextTitle );
        this.listenTo( this.model, 'change:displayFormat', this.updateDisplayFormat );
        this.listenTo( this.model, 'change:editMask', this.updateEditMask );
        this.listenTo( this.model, 'change:inputType', this.updateInputType );
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );
        editorBaseViewMixin.updateProperties.call( this );

        this.updateLabelText();
        this.updateLabelTextTitle();
        this.updateInputType();
    },

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );

        if( !focusable ) {
            this.ui.editor.attr( 'tabindex', -1 );
        } else {
            this.ui.editor.removeAttr( 'tabindex' );
        }
    },

    /**
     *
     */
    updateInputType: function() {
        var inputType = this.model.get( 'inputType' );
        this.ui.editor.attr( 'type', inputType );

    },

    /**
     *
     */
    updateEditMask: function() {
        // this.updateValue();
    },

    /**
     *
     */
    setFocus: function() {
        this.ui.editor.focus();
    },

    /**
     *
     */
    updateValue: function() {
        editorBaseViewMixin.updateValueState.call( this );
        this.ui.control.val( this.getDisplayValue() );
    },

    /**
     *
     */
    updateLabelText: function() {
        var labelText = this.model.get( 'labelText' );

        if( labelText !== '' && labelText !== null && typeof labelText !== 'undefined' ) {
            this.ui.label
                .text( labelText )
                .removeClass( 'hidden' );
        } else {
            this.ui.label
                .text( '' )
                .addClass( 'hidden' );
        }
    },

    /**
     *
     */
    updateLabelTextTitle: function() {
        var labelTextTitle = this.model.get( 'labelTextTitle' );
        var labelText = this.model.get( 'labelText' );

        if( labelTextTitle && labelText && labelText !== '' ) {
            this.ui.label.attr( 'title', labelText );
        } else {
            this.ui.label.attr( 'title', null );
        }
    },

    /**
     *
     */
    updateDisplayFormat: function() {
        this.updateValue();
    },

    /**
     *
     * @returns {*}
     */
    getData: function() {
        var model = this.model;

        return _.extend( {},
            ControlView.prototype.getData.call( this ),
            editorBaseViewMixin.getData.call( this ), {
                labelText: model.get( 'labelText' ),
                labelFloating: model.get( 'labelFloating' ),
                value: this.getDisplayValue()
            } );
    },

    /**
     *
     * @returns {*}
     */
    getDisplayValue: function() {
        var model = this.model;
        var value = model.get( 'value' );
        var displayFormat = model.get( 'displayFormat' );

        return displayFormat ? displayFormat( null, { value: value } ) : value;
    },

    /**
     *
     * @returns {*}
     */
    getRawValue: function() {
        return this.ui.editor.val();
    }

} ) );

InfinniUI.TextEditorBaseView = TextEditorBaseView;

//####app/controls/_base/eventManager.js
/**
 *
 * @constructor
 */
function EventManager() {
    this.handlers = {};
}

/**
 *
 * @param name
 * @param handler
 * @returns {EventManager}
 */
EventManager.prototype.on = function( name, handler ) {
    if ( typeof this.handlers[ name ] === 'undefined' ) {
        this.handlers[ name ] = [];
    }
    this.handlers[ name ].push( handler );
    return this;
};


/**
 *
 * @param name
 * @param message
 * @param context
 * @returns {*|boolean}
 */
EventManager.prototype.trigger = function( name, message, context ) {
    var eventHandlers = this.handlers[ name ];
    var response = true;

    if ( Array.isArray( eventHandlers ) ) {
        response = eventHandlers
            .map( function( handler ) {
                return handler.call( context, message );
            } )
            .every( function( result ) {
                return result !== false;
            } );
    }
    return response;
};

InfinniUI.EventManager = EventManager;

//####app/controls/_base/highlightMixin.js
/**
 *
 * @mixin
 */
var highlightMixin = {

    attributeName: '_highlight',

    highlightClassName: 'active',

    control: {

        /**
         *
         * @param highlight
         */
        setHighlight: function( highlight ) {
            this.controlModel.set( highlightMixin.attributeName, highlight );
        },

        /**
         *
         * @returns {*}
         */
        getHighlight: function() {
            return this.controlModel.get( highlightMixin.attributeName );
        }

    },

    controlView: {

        /**
         *
         */
        initHighlightMixin: function() {
            this.listenTo( this.model, 'change:' + highlightMixin.attributeName, function() {
                var model = this.model;
                this.$el.toggleClass( highlightMixin.highlightClassName, model.get( highlightMixin.attributeName ) );
                this.$el.parent().toggleClass( highlightMixin.highlightClassName, model.get( highlightMixin.attributeName ) );
            } );
        }

    }

};

InfinniUI.highlightMixin = highlightMixin;

//####app/controls/textBox/textBoxControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments TextEditorBaseControl
 */
function TextBoxControl( parent ) {
    _.superClass( TextBoxControl, this, parent );
}

_.inherit( TextBoxControl, TextEditorBaseControl );

_.extend( TextBoxControl.prototype, {

    /**
     * @returns {TextBoxModel}
     */
    createControlModel: function() {
        return new TextBoxModel();
    },

    /**
     * @returns {TextBoxView}
     * @param model
     */
    createControlView: function( model ) {
        return new TextBoxView( { model: model } );
    }

} );

InfinniUI.TextBoxControl = TextBoxControl;

//####app/controls/textBox/textBoxModel.js
/**
 * @constructor
 * @augments TextEditorBaseModel
 */
var TextBoxModel = TextEditorBaseModel.extend( {

    defaults: _.extend(
        {},
        TextEditorBaseModel.prototype.defaults,
        {
            multiline: false,
            inputType: 'text'
        }
    ),

    /**
     *
     */
    initialize: function() {
        TextEditorBaseModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.TextBoxModel = TextBoxModel;

//####app/controls/textBox/textBoxView.js
/**
 * @constructor
 * @augments TextEditorBaseView
 */
var TextBoxView = TextEditorBaseView.extend( {

    template: {
        oneline: InfinniUI.Template[ 'controls/textBox/template/oneline.tpl.html' ],
        multiline: InfinniUI.Template[ 'controls/textBox/template/multiline.tpl.html' ]
    },

    className: 'pl-textbox form-group',

    UI: _.extend( {}, TextEditorBaseView.prototype.UI ),

    events: _.extend( {}, TextEditorBaseView.prototype.events, {

    } ),

    /**
     *
     */
    initHandlersForProperties: function() {
        TextEditorBaseView.prototype.initHandlersForProperties.call( this );

        this.listenTo( this.model, 'change:multiline', this.updateMultiline );
        this.listenTo( this.model, 'change:lineCount', this.updateLineCount );
    },

    /**
     *
     */
    updateProperties: function() {
        TextEditorBaseView.prototype.updateProperties.call( this );

        this.updateLineCount();
    },

    /**
     *
     */
    updateMultiline: function() {
        this.rerender();
    },

    /**
     *
     */
    updateLineCount: function() {
        var lineCount = this.model.get( 'lineCount' );

        this.ui.editor.attr( 'rows', lineCount );
    },

    /**
     *
     * @returns {TextBoxView}
     */
    render: function() {
        this.prerenderingActions();

        var model = this.model;
        var template = model.get( 'multiline' ) ? this.template.multiline : this.template.oneline;

        this.renderTemplate( template );

        this.updateProperties();

        this.trigger( 'render' );
        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     * @returns {*}
     */
    getData: function() {
        var data = TextEditorBaseView.prototype.getData.call( this );
        var model = this.model;

        return _.extend(
            data,
            {
                multiline: model.get( 'multiline' ),
                lineCount: model.get( 'lineCount' )
            }
        );
    }

} );

InfinniUI.TextBoxView = TextBoxView;

//####app/controls/dateTimePicker/_modes/dateTimePickerMode.date.js
/**
 *
 * @mixin
 */
var dateTimePickerModeDate = {

    /**
     *
     * @returns {*}
     */
    getTemplate: function() {
        return InfinniUI.Template[ 'controls/dateTimePicker/template/date.tpl.html' ];
    },

    /**
     *
     */
    openDropdown: function() {
        var that = this;
        var model = this.model;
        var calendar = new SelectDate( {
            model: model
        } );

        calendar.render();
        $( 'body' ).append( calendar.$el );

        calendar.updatePosition( this.el );

        model.set( 'dropdown', calendar );

        this.listenTo( calendar, 'date', function( date ) {
            model.set( 'value', this.convertValue( date ) );
        } );

        this.listenTo( calendar, 'remove', function( date ) {
            model.set( 'dropdown', null );
            that.ui.control.focus();
        } );
    },

    /**
     *
     * @param value
     * @returns {string|null}
     */
    convertValue: function( value ) {
        return InfinniUI.DateUtils.dateToTimestamp( InfinniUI.DateUtils.changeTimezoneOffset( value ) );
    }

};

InfinniUI.dateTimePickerModeDate = dateTimePickerModeDate;

//####app/controls/dateTimePicker/_modes/dateTimePickerMode.dateTime.js
/**
 *
 * @mixin
 */
var dateTimePickerModeDateTime = {

    /**
     *
     * @returns {*}
     */
    getTemplate: function() {
        return InfinniUI.Template[ 'controls/dateTimePicker/template/dateTime.tpl.html' ];
    },

    /**
     *
     */
    openDropdown: function() {
        var that = this;
        var model = this.model;
        var calendar = new SelectDateTime( {
            model: model
        } );

        calendar.render();
        $( 'body' ).append( calendar.$el );

        calendar.updatePosition( this.el );

        model.set( 'dropdown', calendar );

        this.listenTo( calendar, 'date', function( date ) {
            model.set( 'value', this.convertValue( date ) );
        } );

        this.listenTo( calendar, 'remove', function( date ) {
            model.set( 'dropdown', null );
            that.ui.control.focus();
        } );
    },

    /**
     *
     * @param value
     * @returns {string|null}
     */
    convertValue: function( value ) {
        return InfinniUI.DateUtils.toISO8601( value, { timezoneOffset: this.model.get( 'timeZone' ) } );
    }

};

InfinniUI.dateTimePickerModeDateTime = dateTimePickerModeDateTime;

//####app/controls/dateTimePicker/_modes/dateTimePickerMode.time.js
/**
 *
 * @mixin
 */
var dateTimePickerModeTime = {

    /**
     *
     * @returns {*}
     */
    getTemplate: function() {
        return InfinniUI.Template[ 'controls/dateTimePicker/template/time.tpl.html' ];
    },

    /**
     *
     */
    openDropdown: function() {
        var that = this;
        var model = this.model;
        var calendar = new SelectTime( {
            model: model
        } );

        calendar.render();
        $( 'body' ).append( calendar.$el );

        calendar.updatePosition( this.el );

        model.set( 'dropdown', calendar );

        this.listenTo( calendar, 'date', function( date ) {
            model.set( 'value', this.convertValue( date ) );
        } );

        this.listenTo( calendar, 'remove', function( date ) {
            model.set( 'dropdown', null );
            that.ui.control.focus();
        } );
    },

    /**
     *
     * @param value
     * @returns {string|null}
     */
    convertValue: function( value ) {
        return InfinniUI.DateUtils.dateToTimestamp( InfinniUI.DateUtils.changeTimezoneOffset( value, this.model.get( 'timeZone' ) ) );
    }

};

InfinniUI.dateTimePickerModeTime = dateTimePickerModeTime;

//####app/controls/dateTimePicker/components/base/selectComponent.js
/**
 *
 * @constructor
 */
var SelectComponent = Backbone.View.extend( {

    modelClass: Backbone.Model,

    /**
     *
     * @param options
     * @returns {SelectComponent}
     */
    initialize: function( options ) {
        var modelClass = this.modelClass;

        this.model = new modelClass( {
            today: options.today || new Date(),
            value: options.value,
            date: options.value || options.today,
            max: options.max,
            min: options.min
        } );
        this.render();
        return this;
    },

    /**
     *
     */
    show: function() {
        this.$el.css( 'display', 'block' );
    },

    /**
     *
     */
    hide: function() {
        this.$el.css( 'display', 'none' );
    },

    /**
     * @description Установка текущего положения списка выбора значений
     * Если устанавливается недействительная дата - используется текущая
     * @param date
     */
    setDate: function( date ) {
        this.model.setDate( date );
    }

} );

_.extend( SelectComponent.prototype, bindUIElementsMixin );

InfinniUI.SelectComponent = SelectComponent;

//####app/controls/dateTimePicker/components/base/selectComponentModel.js
/**
 *
 * @constructor
 */
var SelectComponentModel = Backbone.Model.extend( {

    /**
     *
     * @returns {{today: Date, todayMonth: number, todayDay: number, todayYear: number, hour: number, minute: number, second: number, millisecond: number}}
     */
    defaults: function() {
        var today = new Date();

        return {
            today: today,
            todayMonth: today.getMonth(),
            todayDay: today.getDate(),
            todayYear: today.getFullYear(),
            hour: today.getHours(),
            minute: today.getMinutes(),
            second: today.getSeconds(),
            millisecond: today.getMilliseconds()
        };
    },

    /**
     *
     */
    initialize: function() {
        this.updateDateParts();
        this.on( 'change:date', this.onChangeDateHandler, this );
    },

    /**
     *
     */
    updateDateParts: function() {
        var date = this.get( 'date' );

        if( date instanceof Date ) {
            this.set( {
                year: date.getFullYear(),
                month: date.getMonth(),
                day: date.getDate(),
                hour: date.getHours(),
                minute: date.getMinutes(),
                second: date.getSeconds(),
                millisecond: date.getMilliseconds()
            } );
        } else {
            this.set( {
                year: null,
                month: null,
                day: null,
                hour: null,
                minute: null,
                second: null,
                millisecond: null
            } );
        }

    },

    /**
     *
     * @param model
     * @param value
     */
    onChangeDateHandler: function( model, value ) {
        if( typeof value !== 'undefined' && value !== null ) {
            model.set( {
                year: moment( value ).year(),
                month: moment( value ).month(),
                day: moment( value ).date(),
                hour: moment( value ).hour(),
                minute: moment( value ).minute(),
                second: moment( value ).second(),
                millisecond: moment( value ).millisecond()
            } );
        } else {
            model.set( {
                year: null,
                month: null,
                day: null,
                hour: null,
                minute: null,
                second: null,
                millisecond: null
            } );
        }
    },

    /**
     *
     * @param datePart
     * @param model
     * @param value
     */
    updateDatePart: function( datePart, model, value ) {
        var d = this.get( 'date' );
        var date = InfinniUI.DateUtils.createDate( d ) || this.get( 'today' );
        var data = this.toJSON();

        switch( datePart ) {
            case 'hour':
            case 'minute':
            case 'second':
                date.setHours( data.hour, data.minute, data.second );
                break;
            case 'year':
            case 'month':
            case 'day':
                date.setFullYear( data.year, data.month, data.day );
                break;
            default:
                break;
        }

        this.set( 'date', date );
    },

    /**
     *
     * @param date
     * @param precision
     * @returns {boolean}
     */
    checkRange: function( date, precision ) {
        var min = this.get( 'min' );
        var max = this.get( 'max' );

        return InfinniUI.DateUtils.checkRangeDate( date, min, max, precision );
    },

    /**
     *
     */
    keepDateInRange: function() {
        if( this.isValid() ) {
            return;
        }
        var date = InfinniUI.DateUtils.getNearestDate( this.get( 'date' ), this.get( 'min' ), this.get( 'max' ) );
        this.set( 'date', date );
    },

    /**
     * @description Установка текущего положения списка выбора значений
     * Если устанавливается недействительная дата - используется текущая
     * @param date
     */
    setDate: function( date ) {
        if( typeof date === 'undefined' || date === null ) {
            var value = this.get( 'value' );
            var today = this.get( 'date' );

            date = value || today;
        }

        if( date instanceof Date ) {
            date = new Date( date.getTime() );
        }
        this.set( 'date', date );
    }

} );

InfinniUI.SelectComponentModel = SelectComponentModel;

//####app/controls/dateTimePicker/components/selectDays.js
/**
 *
 * @constructor
 */
var SelectDaysModel = SelectComponentModel.extend( {

    /**
     *
     */
    initialize: function() {
        SelectComponentModel.prototype.initialize.call( this );
        this.on( 'change:year', this.updateDatePart.bind( this, 'year' ) );
        this.on( 'change:month', this.updateDatePart.bind( this, 'month' ) );
        this.on( 'change:day', this.updateDatePart.bind( this, 'day' ) );
    },

    /**
     *
     */
    today: function() {
        this.set( {
            year: this.get( 'todayYear' ),
            month: this.get( 'todayMonth' )
        } );
    },

    /**
     *
     */
    nextMonth: function() {
        var month = this.get( 'month' );
        var year = this.get( 'year' );

        this.set( {
            month: month === 11 ? 0 : month + 1,
            year: month === 11 ? year + 1 : year
        } );

        this.keepDateInRange();
    },

    /**
     *
     */
    prevMonth: function() {
        var month = this.get( 'month' );
        var year = this.get( 'year' );

        this.set( {
            month: month === 0 ? 11 : month - 1,
            year: month === 0 ? year - 1 : year
        } );

        this.keepDateInRange();
    }

} );

InfinniUI.SelectDaysModel = SelectDaysModel;

/**
 *
 * @constructor
 */
var SelectDays = SelectComponent.extend( {

    modelClass: SelectDaysModel,

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/date/days.tpl.html' ],

    UI: {
        headerDays: '.weekdays-head .day',
        calendarDays: '.day-calendar',
        year: '.years-year',
        month: '.years-month'
    },

    events: {
        'click .years': 'onYearsClickHandler',
        'click .btn-month-prev': 'prevMonth',
        'click .btn-month-next': 'nextMonth',
        'click .today-date': 'showToday',
        'click .day-calendar:not(".day-unavailable")': 'useDay',
        'click .time': 'showTime'
    },

    /**
     *
     */
    render: function() {
        var template = this.template();
        this.$el.html( template );
        this.bindUIElements();
        this.fillLegend();
        this.fillCalendar();
        this.renderMonth();
        this.renderYear();
        this.initOnChangeHandlers();
    },

    /**
     *
     */
    initOnChangeHandlers: function() {
        this.listenTo( this.model, 'change:month', this.onChangeMonthHandler );
        this.listenTo( this.model, 'change:year', this.onChangeYearHandler );
        this.listenTo( this.model, 'change:day', this.onChangeDayHandler );
    },

    /**
     *
     */
    renderMonth: function() {
        var month = this.model.get( 'month' );
        var dateTimeFormatInfo = localized.dateTimeFormatInfo;
        this.ui.month.text( dateTimeFormatInfo.monthNames[ month ] );
    },

    /**
     *
     */
    renderYear: function() {
        var year = this.model.get( 'year' );
        this.ui.year.text( year );
    },

    onChangeMonthHandler: function( model, value ) {
        this.renderMonth();
        this.fillCalendar();
    },

    /**
     *
     * @param model
     * @param value
     */
    onChangeYearHandler: function( model, value ) {
        this.renderYear();
        this.fillCalendar();
    },

    /**
     *
     */
    fillLegend: function() {
        var dateTimeFormatInfo = localized.dateTimeFormatInfo;
        var firstDayOfWeek = dateTimeFormatInfo.firstDayOfWeek;
        var days = dateTimeFormatInfo.abbreviatedDayNames.map( function( day, i ) {
            return i;
        } );

        if( firstDayOfWeek > 0 ) {
            days = days.splice( firstDayOfWeek ).concat( days );
        }

        this.ui.headerDays.each( function( i, el ) {
            var $el = $( el );
            var index = days[ i ];
            $el.text( dateTimeFormatInfo.abbreviatedDayNames[ index ] );
            markWeekend( $el, index );
        } );

        this.ui.calendarDays.each( function( i, el ) {
            var $el = $( el );
            var index = days[ i % 7 ];
            markWeekend( $el, index );
        } );

        function markWeekend( $el, weekday ) {
            $el.toggleClass( 'day-weekend', weekday === 0 || weekday === 6 );
        }
    },

    /**
     *
     */
    fillCalendar: function() {
        var model = this.model;
        var valueDate = model.get( 'value' );
        var month = model.get( 'month' );
        var year = model.get( 'year' );
        var day = model.get( 'day' );
        var min = model.get( 'min' );
        var max = model.get( 'max' );
        var firstDayOfMonth = new Date( year, month );
        var weekday = firstDayOfMonth.getDay();
        var dateTimeFormatInfo = localized.dateTimeFormatInfo;
        var firstDayOfWeek = dateTimeFormatInfo.firstDayOfWeek;

        var weekdays = [ 0, 1, 2, 3, 4, 5, 6 ];
        Array.prototype.push.apply( weekdays, weekdays.splice( 0, firstDayOfWeek ) );
        var start = new Date( year, month, 1 - weekdays.indexOf( weekday ) );

        var startYear = start.getFullYear();
        var startMonth = start.getMonth();
        var startDate = start.getDate();

        this.ui.calendarDays.each( function( i, el ) {
            var $el = $( el );
            var d = new Date( startYear, startMonth, startDate + i );

            $el.text( d.getDate() );
            $el.attr( 'data-date', d );
            markActiveMonth( $el, d.getMonth() === month );
            markToday( $el, d );
            markSelected( $el, d );
            markAvailable( $el, d );
        } );

        function markActiveMonth( $el, active ) {
            $el.toggleClass( 'day-inactive', !active );
        }

        function markToday( $el, date ) {
            var today = date.getMonth() === model.get( 'todayMonth' )
                && date.getFullYear() === model.get( 'todayYear' )
                && date.getDate() === model.get( 'todayDay' );

            $el.toggleClass( 'day-today', today );
        }

        function markSelected( $el, value ) {
            var selected = false;

            if( valueDate ) {
                selected = moment( valueDate ).isSame( value, 'day' );
            }

            $el.toggleClass( 'day-selected', selected );
        }

        function markAvailable( $el, value ) {
            $el.toggleClass( 'day-unavailable', !model.checkRange( value, 'day' ) );
        }
    },

    /**
     *
     */
    onYearsClickHandler: function() {
        var date = this.model.get( 'date' );

        this.trigger( 'year', date );
    },

    /**
     *
     */
    prevMonth: function() {
        this.model.prevMonth();
    },

    /**
     *
     */
    nextMonth: function() {
        this.model.nextMonth();
    },

    /**
     *
     */
    showToday: function() {
        this.today();
    },

    /**
     *
     */
    today: function() {
        this.model.today();
    },

    /**
     *
     */
    showTime: function() {
        this.trigger( 'time', this.model.get( 'date' ) );
    },

    /**
     *
     * @param event
     */
    useDay: function( event ) {
        var $el = $( event.target );
        var date = new Date( $el.attr( 'data-date' ) );

        this.model.set( {
            year: date.getFullYear(),
            month: date.getMonth(),
            day: date.getDate()
        } );

        this.trigger( 'date', this.model.get( 'date' ) );
    }

} );

InfinniUI.SelectDays = SelectDays;

//####app/controls/dateTimePicker/components/selectHours.js
/**
 *
 * @constructor
 */
var SelectHoursModel = SelectComponentModel.extend( {

    /**
     *
     */
    initialize: function() {
        SelectComponentModel.prototype.initialize.call( this );
        this.on( 'change:hour', this.updateDatePart.bind( this, 'hour' ) );
    }

} );

InfinniUI.SelectHoursModel = SelectHoursModel;

/**
 *
 * @constructor
 */
var SelectHours = SelectComponent.extend( {

    modelClass: SelectHoursModel,

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/time/hours.tpl.html' ],

    events: {
        'click .hour:not(\'.hour-unavailable\')': 'useHour'
    },

    UI: {
        hour: '.hour'
    },

    /**
     *
     */
    render: function() {
        var template = this.template();
        this.$el.html( template );
        this.bindUIElements();
        this.fillHoursTable();
        this.initOnChangeHandlers();
    },

    /**
     *
     */
    fillHoursTable: function() {
        //@TODO Заполнять в зависимости от формата 12/24
        var model = this.model;
        var date = model.get( 'date' ) || model.get( 'today' );
        var now = new Date();

        this.ui.hour.each( function( i, el ) {
            var $el = $( el );
            var hour = stringUtils.padLeft( i, 2, '0' );

            $el.attr( 'data-hour', i );
            $el.text( hour );
            markNow( $el, i );
            markSelected( $el, i );
            markAvailable( $el, i );
        } );

        function markSelected( $el, value ) {
            $el.toggleClass( 'hour-selected', date.getHours() === value );
        }

        function markNow( $el, value ) {
            var selected = moment( now ).isSame( value, 'hour' );
            $el.toggleClass( 'hour-today', selected );
        }

        function markAvailable( $el, value ) {
            var date = moment( model.get( 'date' ) ).hour( value );
            $el.toggleClass( 'hour-unavailable', !model.checkRange( date, 'hour' ) );
        }
    },

    /**
     *
     */
    initOnChangeHandlers: function() {
        this.listenTo( this.model, 'change:date', this.fillHoursTable );
    },

    /**
     *
     * @param event
     */
    useHour: function( event ) {
        var $el = $( event.target );
        var model = this.model;
        var date = model.get( 'date' );
        var hour = parseInt( $el.attr( 'data-hour' ), 10 );
        var newDate = InfinniUI.DateUtils.cloneDate( date );

        newDate.setHours( hour );
        model.set( 'date', newDate );

        this.trigger( 'hour', newDate );
    }

} );

InfinniUI.SelectHours = SelectHours;

//####app/controls/dateTimePicker/components/selectMinutes.js
/**
 *
 * @constructor
 */
var SelectMinutesModel = SelectComponentModel.extend( {

    /**
     *
     */
    initialize: function() {
        SelectComponentModel.prototype.initialize.call( this );
        this.on( 'change:minute', this.updateDatePart.bind( this, 'minute' ) );
    }

} );

InfinniUI.SelectMinutesModel = SelectMinutesModel;

/**
 *
 * @constructor
 */
var SelectMinutes = SelectComponent.extend( {

    modelClass: SelectMinutesModel,

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/time/minutes.tpl.html' ],

    events: {
        'click .minute:not(\'.minute-unavailable\')': 'useMinute'
    },

    UI: {
        minute: '.minute'
    },

    /**
     *
     */
    render: function() {
        var template = this.template();
        this.$el.html( template );
        this.bindUIElements();
        this.fillMinutesTable();
        this.initOnChangeHandlers();
    },

    /**
     *
     */
    fillMinutesTable: function() {
        var model = this.model;
        var minute = model.get( 'minute' );

        this.ui.minute.each( function( i, el ) {
            var $el = $( el );
            var minute = $el.attr( 'data-minute' );
            markSelected( $el, parseInt( minute, 10 ) );
            markAvailable( $el, parseInt( minute, 10 ) );
        } );

        function markSelected( $el, value ) {
            $el.toggleClass( 'minute-selected', value === minute );
        }

        function markAvailable( $el, value ) {
            var date = moment( model.get( 'date' ) ).minute( value );
            $el.toggleClass( 'minute-unavailable', !model.checkRange( date, 'minute' ) );
        }
    },

    /**
     *
     */
    initOnChangeHandlers: function() {
        this.listenTo( this.model, 'change:date', this.fillMinutesTable );
    },

    /**
     *
     * @param event
     */
    useMinute: function( event ) {
        var $el = $( event.target );
        var model = this.model;
        var date = model.get( 'date' );
        var minute = parseInt( $el.attr( 'data-minute' ), 10 );
        var newDate = InfinniUI.DateUtils.cloneDate( date );

        newDate.setMinutes( minute );
        this.trigger( 'minute', newDate );
    }

} );

InfinniUI.SelectMinutes = SelectMinutes;

//####app/controls/dateTimePicker/components/selectMonths.js
/**
 *
 * @constructor
 */
var SelectMonthsModel = SelectComponentModel.extend( {

    /**
     *
     */
    initialize: function() {
        SelectComponentModel.prototype.initialize.call( this );
        this.on( 'change:month', this.updateDatePart.bind( this, 'month' ) );
        this.on( 'change:year', this.updateDatePart.bind( this, 'year' ) );
    },

    /**
     *
     */
    nextYear: function() {
        var year = this.get( 'year' );

        this.set( 'year', year + 1 );
        this.keepDateInRange();
    },

    /**
     *
     */
    prevYear: function() {
        var year = this.get( 'year' );
        this.set( 'year', year - 1 );
        this.keepDateInRange();
    },

    /**
     *
     */
    today: function() {
        this.set( {
            month: this.get( 'todayMonth' ),
            year: this.get( 'todayYear' )
        } );
    }

} );

InfinniUI.SelectMonthsModel = SelectMonthsModel;

/**
 *
 * @constructor
 */
var SelectMonths = SelectComponent.extend( {

    modelClass: SelectMonthsModel,

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/date/months.tpl.html' ],

    events: {
        'click .btn-year-prev': 'prevYear',
        'click .btn-year-next': 'nextYear',
        'click .month:not(\'.month-unavailable\')': 'useMonth',
        'click .year': 'selectYear',
        'click .today-month': 'showToday'
    },

    UI: {
        month: '.month',
        year: '.year'
    },

    /**
     *
     */
    render: function() {
        var template = this.template();
        this.$el.html( template );
        this.bindUIElements();
        this.fillMonthsTable();
        this.initOnChangeHandlers();
    },

    /**
     *
     */
    fillMonthsTable: function() {
        this.ui.year.text( this.model.get( 'year' ) );

        var model = this.model;
        var dateTimeFormatInfo = localized.dateTimeFormatInfo;
        var todayMonth = model.get( 'todayMonth' );
        var month = model.get( 'month' );

        this.ui.month.each( function( i, el ) {
            var $el = $( el );
            $el.text( dateTimeFormatInfo.abbreviatedMonthNames[ i ] );
            $el.attr( 'data-month', i );
            markTodayMonth( $el, i );
            markSelected( $el, i );
            markAvailable( $el, i );
        } );

        function markTodayMonth( $el, value ) {
            var date = moment( [model.get( 'year' ), value] );
            var today = model.get( 'today' );

            $el.toggleClass( 'month-today', moment( date ).isSame( today, 'month' ) );
        }

        function markSelected( $el, value ) {
            var date = moment( [model.get( 'year' ), value] );
            var selected = model.get( 'value' );

            $el.toggleClass( 'month-selected', moment( date ).isSame( selected, 'month' ) );
        }

        function markAvailable( $el, value ) {
            var date = moment( [model.get( 'year' ), value] );
            $el.toggleClass( 'month-unavailable', !model.checkRange( date, 'month' ) );
        }
    },

    /**
     *
     */
    initOnChangeHandlers: function() {
        this.listenTo( this.model, 'change:year', this.fillMonthsTable );
    },

    /**
     *
     */
    prevYear: function() {
        this.model.prevYear();
    },

    /**
     *
     */
    nextYear: function() {
        this.model.nextYear();
    },

    /**
     *
     * @param event
     */
    useMonth: function( event ) {
        var $el = $( event.target );
        var model = this.model;

        model.set( {
            year: parseInt( model.get( 'year' ), 10 ),
            month: parseInt( $el.attr( 'data-month' ), 10 )
        } );
        this.trigger( 'month', model.get( 'date' ) );
    },

    /**
     *
     */
    selectYear: function() {
        this.trigger( 'year', this.model.get( 'data' ) );
    },

    /**
     *
     */
    showToday: function() {
        this.today();
    },

    /**
     *
     */
    today: function() {
        this.model.today();
    }

} );

InfinniUI.SelectMonths = SelectMonths;

//####app/controls/dateTimePicker/components/selectSeconds.js
/**
 *
 * @constructor
 */
var SelectSecondsModel = SelectComponentModel.extend( {

    /**
     *
     */
    initialize: function() {
        SelectComponentModel.prototype.initialize.call( this );
        this.on( 'change:second', this.updateDatePart.bind( this, 'second' ) );
    }

} );

InfinniUI.SelectSecondsModel = SelectSecondsModel;

/**
 *
 * @constructor
 */
var SelectSeconds = SelectComponent.extend( {

    modelClass: SelectSecondsModel,

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/time/seconds.tpl.html' ],

    events: {
        'click .second:not(\'.second-unavailable\')': 'useSecond'
    },

    UI: {
        second: '.second'
    },

    /**
     *
     */
    render: function() {
        var template = this.template();
        this.$el.html( template );
        this.bindUIElements();
        this.fillSecondsTable();
        this.initOnChangeHandlers();
    },

    /**
     *
     */
    fillSecondsTable: function() {
        var model = this.model;
        var second = model.get( 'second' );

        this.ui.second.each( function( i, el ) {
            var $el = $( el );
            var second = $el.attr( 'data-second' );
            markSelected( $el, parseInt( second, 10 ) );
            markAvailable( $el, parseInt( second, 10 ) );
        } );

        function markSelected( $el, value ) {
            $el.toggleClass( 'second-selected', value === second );
        }

        function markAvailable( $el, value ) {
            var date = moment( model.get( 'date' ) ).seconds( value );
            $el.toggleClass( 'second-unavailable', !model.checkRange( date ) );
        }
    },

    /**
     *
     */
    initOnChangeHandlers: function() {
        this.listenTo( this.model, 'change:date', this.fillSecondsTable );
    },

    /**
     *
     * @param event
     */
    useSecond: function( event ) {
        var $el = $( event.target );
        var model = this.model;
        var date = model.get( 'date' );
        var second = parseInt( $el.attr( 'data-second' ), 10 );
        var newDate = InfinniUI.DateUtils.cloneDate( date );

        newDate.setSeconds( second );
        this.trigger( 'second', newDate );
    }

} );

InfinniUI.SelectSeconds = SelectSeconds;

//####app/controls/dateTimePicker/components/selectTimes.js
/**
 *
 * @constructor
 */
var SelectTimesModel = SelectComponentModel.extend( {

    /**
     *
     */
    initialize: function() {
        SelectComponentModel.prototype.initialize.call( this );
        this.on( 'change:hour', this.updateDatePart.bind( this, 'hour' ) );
        this.on( 'change:minute', this.updateDatePart.bind( this, 'minute' ) );
        this.on( 'change:second', this.updateDatePart.bind( this, 'second' ) );
        this.on( 'change:millisecond', this.updateDatePart.bind( this, 'millisecond' ) );
    },

    /**
     *
     */
    nextHour: function() {
        var hour = this.get( 'hour' );
        hour += 1;

        //@TODO Границу использовать в зависимости от 12/24 формата записи даты из настроек локализации
        if( hour > 23 ) {
            return;
        }

        this.set( 'hour', hour );
        this.keepDateInRange();
    },

    /**
     *
     */
    prevHour: function() {
        var hour = this.get( 'hour' );
        hour -= 1;

        if( hour < 0 ) {
            return;
        }

        this.set( 'hour', hour );
        this.keepDateInRange();
    },

    /**
     *
     */
    nextMinute: function() {
        var minute = this.get( 'minute' );
        minute += 1;

        if( minute >= 60 ) {
            return;
        }

        this.set( 'minute', minute );
        this.keepDateInRange();
    },

    /**
     *
     */
    prevMinute: function() {
        var minute = this.get( 'minute' );
        minute -= 1;

        if( minute < 0 ) {
            return;
        }

        this.set( 'minute', minute );
        this.keepDateInRange();
    },

    /**
     *
     */
    nextSecond: function() {
        var second = this.get( 'second' );
        second += 1;

        if( second >= 60 ) {
            return;
        }

        this.set( 'second', second );
        this.keepDateInRange();
    },

    /**
     *
     */
    prevSecond: function() {
        var second = this.get( 'second' );
        second -= 1;

        if( second < 0 ) {
            return;
        }

        this.set( 'second', second );
        this.keepDateInRange();
    },

    /**
     *
     * @param attr
     * @returns {string|*}
     */
    validate: function( attr ) {
        var value = InfinniUI.DateUtils.cloneDate( attr.date );
        value.setHours( attr.hour, attr.minute, attr.second, attr.millisecond );

        if( !this.checkRange( value ) ) {
            return 'Out of range';
        }
    }

} );

InfinniUI.SelectTimesModel = SelectTimesModel;

/**
 *
 * @constructor
 */
var SelectTimes = SelectComponent.extend( {

    modelClass: SelectTimesModel,

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/time/time.tpl.html' ],

    events: {
        'click .time-spin-down.time-spin-hour': 'prevHour',
        'click .time-spin-up.time-spin-hour': 'nextHour',

        'click .time-spin-down.time-spin-minute': 'prevMinute',
        'click .time-spin-up.time-spin-minute': 'nextMinute',

        'click .time-spin-down.time-spin-second': 'prevSecond',
        'click .time-spin-up.time-spin-second': 'nextSecond',

        'click .time-segment-hour': 'selectHour',
        'click .time-segment-minute': 'selectMinute',
        'click .time-segment-second': 'selectSecond',
        'click .days': 'selectDay'
    },

    UI: {
        month: '.month',
        year: '.year',
        hour: '.time-segment-hour',
        minute: '.time-segment-minute',
        second: '.time-segment-second'
    },

    /**
     *
     */
    render: function() {
        var template = this.template();
        this.$el.html( template );
        this.bindUIElements();
        this.updateHour();
        this.updateMinute();
        this.updateSecond();
        this.initOnChangeHandlers();
    },

    /**
     *
     */
    selectHour: function() {
        var model = this.model;
        var date = model.get( 'date' );
        var hour = model.get( 'hour' );
        var minute = model.get( 'minute' );
        var second = model.get( 'second' );

        date.setHours( hour, minute, second );
        this.trigger( 'hour', date );
    },

    /**
     *
     */
    selectMinute: function() {
        var model = this.model;
        var date = model.get( 'date' );
        var hour = model.get( 'hour' );
        var minute = model.get( 'minute' );
        var second = model.get( 'second' );

        date.setHours( hour, minute, second );
        this.trigger( 'minute', date );
    },

    /**
     *
     */
    selectSecond: function() {
        var model = this.model;
        var date = model.get( 'date' );
        var hour = model.get( 'hour' );
        var minute = model.get( 'minute' );
        var second = model.get( 'second' );

        date.setHours( hour, minute, second );
        this.trigger( 'second', date );
    },

    /**
     *
     */
    initOnChangeHandlers: function() {
        this.listenTo( this.model, 'change:hour', this.updateHour );
        this.listenTo( this.model, 'change:minute', this.updateMinute );
        this.listenTo( this.model, 'change:second', this.updateSecond );
        this.listenTo( this.model, 'change:date', this.useTime );
    },

    /**
     *
     */
    updateHour: function() {
        var hour = this.model.get( 'hour' );
        this.ui.hour.text( stringUtils.padLeft( hour, 2, '0' ) );
    },

    /**
     *
     */
    updateMinute: function() {
        var minute = this.model.get( 'minute' );
        this.ui.minute.text( stringUtils.padLeft( minute, 2, '0' ) );
    },

    /**
     *
     */
    updateSecond: function() {
        var second = this.model.get( 'second' );
        this.ui.second.text( stringUtils.padLeft( second, 2, '0' ) );
    },

    /**
     *
     */
    prevHour: function() {
        this.model.prevHour();
    },

    /**
     *
     */
    nextHour: function() {
        this.model.nextHour();
    },

    /**
     *
     */
    prevMinute: function() {
        this.model.prevMinute();
    },

    /**
     *
     */
    nextMinute: function() {
        this.model.nextMinute();
    },

    /**
     *
     */
    prevSecond: function() {
        this.model.prevSecond();
    },

    /**
     *
     */
    nextSecond: function() {
        this.model.nextSecond();
    },

    /**
     *
     */
    useTime: function() {
        var date = this.model.get( 'date' );

        this.trigger( 'date', date );
    },

    /**
     *
     */
    selectDay: function() {
        var date = this.model.get( 'date' );

        this.trigger( 'day', date );
    }

} );

InfinniUI.SelectTimes = SelectTimes;

//####app/controls/dateTimePicker/components/selectYears.js
/**
 *
 * @constructor
 */
var SelectYearsModel = SelectComponentModel.extend( {

    /**
     *
     * @returns {*}
     */
    defaults: function() {
        var defaults = SelectComponentModel.prototype.defaults.call( this );

        return _.defaults( {
            pageSize: 20,
            page: 0
        }, defaults );
    },

    /**
     *
     */
    initialize: function() {
        SelectComponentModel.prototype.initialize.call( this );
        this.on( 'change:year', this.updateDatePart.bind( this, 'year' ) );
        this.on( 'change:year', this.onChangeYearHandler );
    },

    /**
     *
     */
    prevPage: function() {
        var page = this.get( 'page' );
        this.set( 'page', page - 1 );
    },

    /**
     *
     */
    nextPage: function() {
        var page = this.get( 'page' );
        this.set( 'page', page + 1 );
    },

    /**
     *
     */
    resetPage: function() {
        this.set( 'page', 0 );
    },

    /**
     *
     * @param model
     */
    onChangeYearHandler: function( model ) {
        this.keepDateInRange();
        model.set( 'page', 0 );
    }

} );

InfinniUI.SelectYearsModel = SelectYearsModel;

/**
 *
 * @constructor
 */
var SelectYears = SelectComponent.extend( {

    modelClass: SelectYearsModel,

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/date/years.tpl.html' ],

    events: {
        'click .btn-year-prev': 'prevPage',
        'click .btn-year-next': 'nextPage',
        'click .today-year': 'showTodayYear',
        'click .year:not(".year-unavailable")': 'useYear'
    },

    UI: {
        years: '.year',
        yearBegin: '.year-begin',
        yearEnd: '.year-end'
    },

    /**
     *
     */
    initOnChangeHandlers: function() {
        this.listenTo( this.model, 'change:page', this.fillYearsTable );
        this.listenTo( this.model, 'change:year', this.fillYearsTable );
    },

    /**
     *
     */
    render: function() {
        var template = this.template();
        this.$el.html( template );
        this.bindUIElements();
        //this.fillCalendar();
        this.fillYearsTable();
        this.initOnChangeHandlers();
    },

    /**
     *
     */
    fillYearsTable: function() {
        var model = this.model;
        var page = model.get( 'page' );
        var pageSize = model.get( 'pageSize' );
        var year = model.get( 'year' );
        var todayYear = model.get( 'todayYear' );
        var startYear = Math.ceil( year - pageSize / 2 ) + page * pageSize;

        this.ui.years.each( function( i, el ) {
            var $el = $( el );
            var year = startYear + i;
            $el.text( year );
            $el.attr( 'data-year', year );
            markTodayYear( $el, year );
            markSelected( $el, year );
            markAvailable( $el, year );
        } );

        this.ui.yearBegin.text( startYear );
        this.ui.yearEnd.text( startYear + pageSize - 1 );

        function markTodayYear( $el, value ) {
            $el.toggleClass( 'year-today', value === todayYear );
        }

        function markSelected( $el, value ) {
            $el.toggleClass( 'year-selected', value === year );
        }

        function markAvailable( $el, value ) {
            var date = moment( [ value ] );
            $el.toggleClass( 'year-unavailable', !model.checkRange( date, 'year' ) );
        }
    },

    /**
     *
     */
    prevPage: function() {
        this.model.prevPage();
    },

    /**
     *
     */
    nextPage: function() {
        this.model.nextPage();
    },

    /**
     *
     */
    showTodayYear: function() {
        this.today();
    },

    /**
     *
     */
    today: function() {
        this.model.resetPage();
    },

    /**
     *
     * @param event
     */
    useYear: function( event ) {
        var $el = $( event.target );
        var model = this.model;

        model.set( {
            year: parseInt( $el.attr( 'data-year' ), 10 )
        } );

        this.trigger( 'year', model.get( 'date' ) );
    }

} );

InfinniUI.SelectYears = SelectYears;

//####app/controls/dateTimePicker/dateTimePickerControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments TextEditorBaseControl
 */
function DateTimePickerControl( parent ) {
    _.superClass( DateTimePickerControl, this, parent );
}

InfinniUI.DateTimePickerControl = DateTimePickerControl;

_.inherit( DateTimePickerControl, TextEditorBaseControl );

_.extend( DateTimePickerControl.prototype, {

    /**
     *
     * @returns {DateTimePickerModel}
     */
    createControlModel: function() {
        return new DateTimePickerModel();
    },

    /**
     *
     * @param model
     * @returns {DateTimePickerView}
     */
    createControlView: function( model ) {
        return new DateTimePickerView( { model: model } );
    }

} );

InfinniUI.DateTimePickerControl = DateTimePickerControl;

//####app/controls/dateTimePicker/dateTimePickerModel.js
/**
 * @class
 * @augments TextEditorBaseModel
 * @constructor
 */
var DateTimePickerModel = TextEditorBaseModel.extend( {

    defaults: _.extend(
        {
            expandOnEnter: true,
            dropdown: null
        },
        TextEditorBaseModel.prototype.defaults,
        {
            mode: 'Date'
            //today: new Date()
        }
    ),

    /**
     *
     */
    initialize: function() {
        TextEditorBaseModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
        this.set( 'today', new Date() );
        this.set( 'timeZone', InfinniUI.DateUtils.getDefaultTimeZone() );
    },

    /**
     *
     * @param attributes
     * @returns {boolean}
     */
    validate: function( attributes/*, options*/ ) {
        var isValid = InfinniUI.DateUtils.checkRangeDate( attributes.value, attributes.minValue, attributes.maxValue );

        if( !isValid ) {
            return 'Значение выходит за пределы допустимого диапазона';
        }
    }

} );

InfinniUI.DateTimePickerModel = DateTimePickerModel;

//####app/controls/dateTimePicker/dateTimePickerStrategy.js
/**
 *
 * @type {{Date, DateTime, Time}}
 */
var dateTimePickerStrategy = ( function() {

    return {
        Date: dateTimePickerModeDate,
        DateTime: dateTimePickerModeDateTime,
        Time: dateTimePickerModeTime
    };

} )();

InfinniUI.dateTimePickerStrategy = dateTimePickerStrategy;

//####app/controls/dateTimePicker/dateTimePickerView.js
/**
 * @class
 * @augments TextEditorBaseView
 * @constructor
 */
var DateTimePickerView = TextEditorBaseView.extend( {

    className: 'pl-datepicker form-group',

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/date.tpl.html' ],

    UI: _.extend( {}, TextEditorBaseView.prototype.UI, {
        dropdownButton: '.pl-datepicker-calendar',
        controlWrap: '.control-wrap',
        editorWrap: '.editor-wrap'
    } ),

    events: _.extend( {}, TextEditorBaseView.prototype.events, {
        'click .pl-datepicker-calendar': 'onClickDropdownHandler',
        'keydown .pl-control': 'onKeyDownControlHandler'
    } ),

    editMaskStrategies: {
        DateTimeEditMask: 'iso8601'
    },

    /**
     *
     */
    initialize: function() {
        TextEditorBaseView.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
        this.updateMode();
        this.listenTo( this.model, 'change:mode', this.updateMode );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        TextEditorBaseView.prototype.initHandlersForProperties.call( this );

        this.listenTo( this.model, 'change:minValue', this.updateMinValue );
        this.listenTo( this.model, 'change:maxValue', this.updateMaxValue );
    },

    /**
     *
     */
    updateProperties: function() {
        TextEditorBaseView.prototype.updateProperties.call( this );
    },

    /**
     *
     */
    updateMode: function() {
        var mode = this.model.get( 'mode' );
        _.extend( this, dateTimePickerStrategy[ mode ] );

        this.rerender();
    },

    /**
     *
     */
    updateMinValue: function() {
        var mode = this.model.get( 'mode' );
        _.extend( this, dateTimePickerStrategy[ mode ] );

        this.rerender();
    },

    /**
     *
     */
    updateMaxValue: function() {
        var mode = this.model.get( 'mode' );
        _.extend( this, dateTimePickerStrategy[ mode ] );

        this.rerender();
    },

    /**
     *
     */
    updateEnabled: function() {
        TextEditorBaseView.prototype.updateEnabled.call( this );

        var isEnabled = this.model.get( 'enabled' );
        this.ui.dropdownButton.prop( 'disabled', !isEnabled );
    },

    /**
     *
     * @returns {DateTimePickerView}
     */
    render: function() {
        this.prerenderingActions();

        this.renderTemplate( this.getTemplate() );
        this.updateProperties();

        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     * @returns {*}
     */
    getData: function() {
        var model = this.model;

        return _.extend( {},
            TextEditorBaseView.prototype.getData.call( this ), {
                minValue: model.get( 'minValue' ),
                maxValue: model.get( 'maxValue' ),
                mode: model.get( 'mode' )
            } );
    },

    /**
     *
     */
    getTemplate: function() {
        throw new Error( 'Не перекрыт getTemplate' );
    },

    /**
     *
     */
    onClickDropdownHandler: function() {
        this.toggleDropdown();
    },

    /**
     *
     * @returns {boolean}
     */
    toggleDropdown: function() {
        var dropdown = this.model.get( 'dropdown' );

        if( dropdown !== null ) {
            this.closeDropdown();
        } else {
            this.openDropdown();
        }
    },

    /**
     *
     */
    openDropdown: function() {
    },

    /**
     *
     */
    closeDropdown: function() {
        var dropdown = this.model.get( 'dropdown' );
        dropdown.onClickBackdropHandler();
    },

    /**
     *
     * @param event
     * @returns {*}
     */
    onKeyDownControlHandler: function( event ) {
        var enabled = this.model.get( 'enabled' );
        var expandOnEnter = this.model.get( 'expandOnEnter' );

        if( !enabled ) {
            event.preventDefault();
            return;
        }

        if( event.ctrlKey || event.altKey ) {
            return;
        }
        switch( event.which ) {
            case 13:    //Enter
                if( expandOnEnter ) {
                    event.preventDefault();
                    this.toggleDropdown();
                }
                break;
            default:
                break;
        }
    }

} );

InfinniUI.DateTimePickerView = DateTimePickerView;

//####app/controls/dateTimePicker/selectDate.js
/**
 *
 * @constructor
 */
var SelectDate = Backbone.View.extend( {

    className: 'pl-datepicker-dropdown pl-dropdown-container',

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/select.date.tpl.html' ],

    UI: {
        days: '.days',
        months: '.months',
        years: '.years'
    },

    events: {
        'click .backdrop': 'onClickBackdropHandler',
        'click .datepicker-clear': 'onClickClearValueHandler',
        'click .today-date': 'onClickTodayHandler'
    },

    /**
     *
     */
    render: function() {
        var template = this.template();
        this.$el.html( template );
        this.bindUIElements();
        this.renderComponents();
    },

    /**
     *
     */
    renderComponents: function() {
        var model = this.model;
        var value = InfinniUI.DateUtils.createDate( model.get( 'value' ) );
        var today = InfinniUI.DateUtils.createDate( model.get( 'today' ) );
        var timeZone = model.get( 'timeZone' );
        var m = moment( value );

        if( m.isValid() ) {
            value = m.toDate();
        } else {
            value = null;
        }

        value = InfinniUI.DateUtils.changeTimezoneOffset( value, timeZone );

        var options = {
            value: value,
            today: today || new Date(),
            //date: value,
            max: model.get( 'maxValue' ),
            min: model.get( 'minValue' )
        };

        options.el = this.ui.months;
        var months = new SelectMonths( options );

        options.el = this.ui.years;
        var years = new SelectYears( options );

        options.el = this.ui.days;
        var days = new SelectDays( options );

        this.months = months;
        this.years = years;
        this.days = days;

        this.workflow( days, months, years, value )( value );
    },

    /**
     *
     */
    onClickBackdropHandler: function() {
        this.remove();
    },

    /**
     *
     */
    onClickClearValueHandler: function() {
        this.clearValue();
    },

    /**
     *
     */
    clearValue: function() {
        this.useValue( null );
    },

    /**
     *
     * @param date
     */
    useValue: function( date ) {
        var model = this.model;
        var timeZone = model.get( 'timeZone' );
        var min = model.get( 'minValue' );
        var max = model.get( 'maxValue' );

        if( !InfinniUI.DateUtils.checkRangeDate( date, min, max ) ) {
            date = InfinniUI.DateUtils.getNearestDate( date, min, max );
        }

        this.trigger( 'date', InfinniUI.DateUtils.restoreTimezoneOffset( date, timeZone ) );
        this.remove();
    },

    /**
     *
     * @param days
     * @param months
     * @param years
     * @returns {showDays}
     */
    workflow: function( days, months, years ) {
        this
            .listenTo( days, 'date', this.useValue )
            .listenTo( days, 'year', function( date ) {
                showYears( date );//Needed select year from list
            } )
            .listenTo( years, 'year', function( date ) {
                showMonths( date );//Needed select month for year
            } )
            .listenTo( months, 'year', function( date ) {
                showYears( date );//Needed select year from list
            } )
            .listenTo( months, 'month', function( date ) {
                showDays( date );//Needed select day from calendar
            } );

        return showDays;

        function showDays( date ) {
            days.setDate( date );

            years.hide();
            months.hide();
            days.show();
        }

        function showMonths( date ) {
            months.setDate( date );

            days.hide();
            years.hide();
            months.show();
        }

        function showYears( date ) {
            years.setDate( date );

            days.hide();
            months.hide();
            years.show();
        }
    },

    /**
     *
     */
    onClickTodayHandler: function() {
        this.useValue( new Date() );
    },

    /**
     *
     * @param parentDOMElement
     */
    updatePosition: function( parentDOMElement ) {
        var direction = this.getDropdownDirection( parentDOMElement );
        this.setPositionFor( parentDOMElement, direction );
    },

    /**
     *
     * @param parentDOMElement
     * @param direction
     */
    setPositionFor: function( parentDOMElement, direction ) {
        clearInterval( this._intervalId );

        this.applyStyle( parentDOMElement, direction );
        this._intervalId = setInterval( this.applyStyle.bind( this, parentDOMElement, direction ), 100 );
    },

    /**
     *
     * @returns {*}
     */
    remove: function() {
        clearInterval( this._intervalId );
        this.trigger( 'remove' );
        return Backbone.View.prototype.remove.apply( this, arguments );
    },

    /**
     *
     * @param parentDOMElement
     * @returns {string}
     */
    getDropdownDirection: function( parentDOMElement ) {
        var windowHeight = $( window ).height();
        var rect = parentDOMElement.getBoundingClientRect();
        var height = this.$el.height();
        var direction = 'bottom';

        if( rect.bottom + height + 30 > windowHeight && rect.bottom > windowHeight / 2 && rect.top > height ) {
            direction = 'top';
        }

        return direction;
    },

    /**
     *
     * @param parentDOMElement
     * @param direction
     */
    applyStyle: function( parentDOMElement, direction ) {
        var rect = parentDOMElement.getBoundingClientRect();
        var rectDropdown = this.el.getBoundingClientRect();
        //@TODO Вынести общие стили в css
        var style = {
            position: 'absolute',
            left: window.pageXOffset + rect.right - Math.round( rectDropdown.width )
        };

        if( direction === 'bottom' ) {
            style.top = window.pageYOffset + rect.bottom;
        } else {
            style.top = window.pageYOffset + rect.top - this.$el.height();
        }

        this.$el.css( style );
    }

} );

_.extend( SelectDate.prototype, bindUIElementsMixin );

InfinniUI.SelectDate = SelectDate;

//####app/controls/dateTimePicker/selectDateTime.js
/**
 *
 * @constructor
 */
var SelectDateTime = SelectDate.extend( {

    className: 'pl-datepicker-dropdown pl-dropdown-container',

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/select.dateTime.tpl.html' ],

    UI: {
        days: '.days',
        months: '.months',
        years: '.years',
        times: '.times',
        hours: '.hours',
        minutes: '.minutes'
    },

    /**
     *
     */
    onClickToggleDateHandler: function() {
        this.trigger( 'days' );
    },

    /**
     *
     */
    onClickToggleTimeHandler: function() {
        this.trigger( 'time' );
    },

    /**
     *
     */
    renderComponents: function() {
        var model = this.model;
        var value = InfinniUI.DateUtils.createDate( model.get( 'value' ) );
        var today = InfinniUI.DateUtils.createDate( model.get( 'today' ) );
        var timeZone = model.get( 'timeZone' );
        var m = moment( value );

        if( m.isValid() ) {
            value = m.toDate();
        } else {
            value = null;
        }

        value = InfinniUI.DateUtils.changeTimezoneOffset( value, timeZone );

        var options = {
            value: value,
            today: today || new Date(),
            //date: value,
            max: model.get( 'maxValue' ),
            min: model.get( 'minValue' )
        };

        options.el = this.ui.months;
        var months = new SelectMonths( options );

        options.el = this.ui.years;
        var years = new SelectYears( options );

        options.el = this.ui.days;
        var days = new SelectDays( options );

        options.el = this.ui.times;
        var time = new SelectTimes( options );
        //time.setDate(undefined);

        options.el = this.ui.hours;
        var hours = new SelectHours( options );

        options.el = this.ui.minutes;
        var minutes = new SelectMinutes( options );

        this.workflow( days, months, years, time, hours, minutes )( value );
    },

    /**
     *
     * @param date
     * @returns {*}
     */
    useTime: function( date ) {
        var model = this.model;
        var timeZone = model.get( 'timeZone' );
        var min = model.get( 'minValue' );
        var max = model.get( 'maxValue' );

        if( !InfinniUI.DateUtils.checkRangeDate( date, min, max ) ) {
            date = InfinniUI.DateUtils.getNearestDate( date, min, max );
        }

        this.trigger( 'date', InfinniUI.DateUtils.restoreTimezoneOffset( date, timeZone ) );

        return date;
    },

    /**
     *
     * @param days
     * @param months
     * @param years
     * @param time
     * @param hours
     * @param minutes
     * @returns {showDays}
     */
    workflow: function( days, months, years, time, hours, minutes ) {
        var useTime = this.useTime.bind( this );
        var components = Array.prototype.slice.call( arguments );

        this
            .listenTo( days, 'date', this.useValue )
            .listenTo( days, 'year', function( date ) {
                showYears( date );//Needed select year from list
            } )
            .listenTo( days, 'time', function( date ) {
                showTime( date );
            } )
            .listenTo( years, 'year', function( date ) {
                showMonths( date );//Needed select month for year
            } )
            .listenTo( months, 'year', function( date ) {
                showYears( date );//Needed select year from list
            } )
            .listenTo( months, 'month', function( date ) {
                showDays( date );//Needed select day from calendar
            } );

        this.listenTo( time, 'hour', function( date ) {
            showHours( date );
        } )
            .listenTo( time, 'minute', function( date ) {
                showMinutes( date );
            } )
            .listenTo( time, 'day', function( date ) {
                showDays( date );
            } )
            .listenTo( time, 'date', function( date ) {
                useTime( date );
            } )
            .listenTo( hours, 'hour', function( date ) {
                var newDate = useTime( date );
                showTime( newDate );
            } )
            .listenTo( minutes, 'minute', function( date ) {
                var newDate = useTime( date );
                showTime( newDate );
            } );

        //Переключатель режима Date/Time
        this
            .on( 'days', function( date ) {
                showDays( date );
            } )
            .on( 'time', function( date ) {
                showTime( date );
            } );

        return showDays;

        function switchComponent( component ) {
            components.forEach( function( c ) {
                if( c !== component ) {
                    c.hide();
                }
            } );
            component.show();
        }

        function showDays( date ) {
            days.setDate( date );
            switchComponent( days );
        }

        function showMonths( date ) {
            months.setDate( date );
            switchComponent( months );
        }

        function showYears( date ) {
            years.setDate( date );
            switchComponent( years );
        }

        function showHours( date ) {
            hours.setDate( date );
            switchComponent( hours );
        }

        function showMinutes( date ) {
            minutes.setDate( date );
            switchComponent( minutes );
        }

        function showTime( date ) {
            time.setDate( date );
            switchComponent( time );
        }
    }

} );

InfinniUI.SelectDateTime = SelectDateTime;

//####app/controls/dateTimePicker/selectTime.js
/**
 *
 * @constructor
 */
var SelectTime = SelectDate.extend( {

    className: 'pl-timepicker-dropdown pl-dropdown-container',

    template: InfinniUI.Template[ 'controls/dateTimePicker/template/select.time.tpl.html' ],

    UI: {
        times: '.times',
        hours: '.hours',
        minutes: '.minutes',
        seconds: '.seconds'
    },

    /**
     *
     */
    renderComponents: function() {
        var model = this.model;
        var value = InfinniUI.DateUtils.createDate( model.get( 'value' ) );
        var today = InfinniUI.DateUtils.createDate( model.get( 'today' ) );
        var timeZone = model.get( 'timeZone' );
        var m = moment( value );

        if( m.isValid() ) {
            value = m.toDate();
        } else {
            value = null;
        }

        value = InfinniUI.DateUtils.changeTimezoneOffset( value, timeZone );

        var options = {
            value: value,
            today: today,
            //date: date,
            max: model.get( 'maxValue' ),
            min: model.get( 'minValue' )
        };

        options.el = this.ui.times;
        var time = new SelectTimes( options );

        options.el = this.ui.hours;
        var hours = new SelectHours( options );

        options.el = this.ui.minutes;
        var minutes = new SelectMinutes( options );

        options.el = this.ui.seconds;
        var seconds = new SelectSeconds( options );

        this.workflow( time, hours, minutes, seconds )( value );
    },

    /**
     *
     * @param date
     * @returns {*}
     */
    useTime: function( date ) {
        var model = this.model;
        var timeZone = model.get( 'timeZone' );
        var min = model.get( 'minValue' );
        var max = model.get( 'maxValue' );

        if( !InfinniUI.DateUtils.checkRangeDate( date, min, max ) ) {
            date = InfinniUI.DateUtils.getNearestDate( date, min, max );
        }

        this.trigger( 'date', InfinniUI.DateUtils.restoreTimezoneOffset( date, timeZone ) );
        return date;
    },

    /**
     *
     * @param time
     * @param hours
     * @param minutes
     * @param seconds
     * @returns {showTime}
     */
    workflow: function( time, hours, minutes, seconds ) {
        var useTime = this.useTime.bind( this );
        var components = Array.prototype.slice.call( arguments );

        this.listenTo( time, 'hour', function( date ) {
            showHours( date );
        } )
            .listenTo( time, 'minute', function( date ) {
                showMinutes( date );
            } )
            .listenTo( time, 'second', function( date ) {
                showSeconds( date );
            } )
            .listenTo( time, 'date', function( date ) {
                useTime( date );
            } )
            .listenTo( hours, 'hour', function( date ) {
                var value = useTime( date );
                showTime( value );
            } )
            .listenTo( minutes, 'minute', function( date ) {
                var value = useTime( date );
                showTime( value );
            } )
            .listenTo( seconds, 'second', function( date ) {
                var value = useTime( date );
                showTime( value );
            } );

        return showTime;

        function switchComponent( component ) {
            components.forEach( function( c ) {
                if( c !== component ) {
                    c.hide();
                }
            } );
            component.show();
        }

        function showHours( date ) {
            hours.setDate( date );
            switchComponent( hours );
        }

        function showMinutes( date ) {
            minutes.setDate( date );
            switchComponent( minutes );
        }

        function showSeconds( date ) {
            seconds.setDate( date );
            switchComponent( seconds );
        }

        function showTime( date ) {
            time.setDate( date );
            switchComponent( time );
        }
    }

} );

InfinniUI.SelectTime = SelectTime;

//####app/controls/datePicker/datePickerControl.js
/**
 *
 * @param parent
 * @constructor
 */
function DatePickerControl( parent ) {
    _.superClass( DatePickerControl, this, parent );
}

_.inherit( DatePickerControl, DateTimePickerControl );

_.extend( DatePickerControl.prototype, {

    /**
     *
     * @returns {DatePickerModel}
     */
    createControlModel: function() {
        return new DatePickerModel();
    },

    /**
     *
     * @param model
     * @returns {DatePickerView}
     */
    createControlView: function( model ) {
        return new DatePickerView( { model: model } );
    }

} );

InfinniUI.DatePickerControl = DatePickerControl;

//####app/controls/datePicker/datePickerModel.js
/**
 *
 * @constructor
 */
var DatePickerModel = DateTimePickerModel.extend( {

    /**
     *
     */
    initialize: function() {
        DateTimePickerModel.prototype.initialize.apply( this, arguments );
    }

} );

InfinniUI.DatePickerModel = DatePickerModel;

//####app/controls/datePicker/datePickerView.js
/**
 *
 * @constructor
 */
var DatePickerView = DateTimePickerView.extend( {
    editMaskStrategies: {
        DateTimeEditMask: 'timestamp'
    },

    initialize: function() {
        DateTimePickerView.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }
} );

InfinniUI.DatePickerView = DatePickerView;

//####app/controls/datePicker/dateTimePickerMode.datePicker.js
console.assert( dateTimePickerModeDate, 'dateTimePickerModeDate is undefined' );

/**
 *
 * @constructor
 */
var dateTimePickerModeDatePicker = _.extend( {}, dateTimePickerModeDate, {

    /**
     *
     * @param value
     * @returns {*}
     */
    convertValue: function( value ) {
        var _value = null;
        if ( value && value.constructor === Date ) {
            _value = InfinniUI.DateUtils.dateToTimestamp( value );
        }

        return _value;
    }

} );

dateTimePickerStrategy[ 'DatePicker' ] = dateTimePickerModeDatePicker;

InfinniUI.dateTimePickerModeDatePicker = dateTimePickerModeDatePicker;

//####app/controls/timePicker/dateTimePickerMode.timePicker.js
console.assert( dateTimePickerModeTime, 'dateTimePickerModeTime is undefined' );

/**
 * @constructor
 * @mixes dateTimePickerModeTime
 */
var dateTimePickerModeTimePicker = _.extend( {}, dateTimePickerModeTime, {

    /**
     *
     * @param value
     * @returns {*}
     */
    convertValue: function( value ) {
        var _value = null;
        if ( value && value.constructor === Date ) {
            _value = InfinniUI.DateUtils.dateToTimestampTime( value );
        }

        return _value;
    }

} );

dateTimePickerStrategy[ 'TimePicker' ] = dateTimePickerModeTimePicker;

InfinniUI.dateTimePickerModeTimePicker = dateTimePickerModeTimePicker;

//####app/controls/timePicker/timePickerControl.js
/**
 * @augments DateTimePickerControl
 * @param parent
 * @constructor
 */
function TimePickerControl( parent ) {
    _.superClass( TimePickerControl, this, parent );
}

_.inherit( TimePickerControl, DateTimePickerControl );

_.extend( TimePickerControl.prototype, {

    /**
     * @returns {TimePickerModel}
     */
    createControlModel: function() {
        return new TimePickerModel();
    },

    /**
     * @returns {TimePickerView}
     * @param model
     */
    createControlView: function( model ) {
        return new TimePickerView( { model: model } );
    }

} );

InfinniUI.TimePickerControl = TimePickerControl;

//####app/controls/timePicker/timePickerModel.js
/**
 * @constructor
 * @augments DateTimePickerModel
 */
var TimePickerModel = DateTimePickerModel.extend( {

    /**
     *
     */
    initialize: function() {
        DateTimePickerModel.prototype.initialize.apply( this, arguments );
        var date = new Date();
        date.setFullYear( 1970, 0, 1 );
        this.set( 'today', date );
    }

} );

InfinniUI.TimePickerModel = TimePickerModel;

//####app/controls/timePicker/timePickerView.js
/**
 * @constructor
 * @augments DateTimePickerView
 */
var TimePickerView = DateTimePickerView .extend( {

    className: 'pl-datepicker pl-timepicker form-group',

    editMaskStrategies: {
        DateTimeEditMask: 'timestamp'
    },

    initialize: function() {
        DateTimePickerView.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.TimePickerView = TimePickerView;

//####app/controls/button/commonView/buttonView.js
/**
 *
 * @augments ControlView
 * @constructor
 */
var CommonButtonView = ControlView.extend( {

    className: 'pl-button',

    template: InfinniUI.Template[ 'controls/button/commonView/template/button.tpl.html' ],

    UI: {
        button: 'button'
    },

    events: {
        'click button': 'onClickHandler'
    },

    /**
     *
     */
    initialize: function() {
        ControlView.prototype.initialize.apply( this, arguments );
        this.initHighlightMixin();
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );

        this.updateContent();
        this.updateType();
    },

    /**
     *
     */
    updateType: function() {
        var type = this.model.get( 'type' );

        this.getButtonElement().attr( 'type', type );
    },

    /**
     *
     */
    updateContent: function() {
        var contentTemplate = this.model.get( 'contentTemplate' );
        var content = this.model.get( 'content' );
        var args = {
            content: content
        };
        var contentElement;
        var $button = this.getButtonElement();

        if( contentTemplate ) {
            contentElement = contentTemplate( null, args );
            $button.html( contentElement.render() );

        } else if( typeof content !== 'undefined' && content !== null ) {
            $button.html( content );
        }
    },

    /**
     *
     */
    updateText: function() {
        var textForButton = this.model.get( 'text' );
        var $button = this.getButtonElement();

        if( $button ) {
            $button.html( textForButton );
        }
    },

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );

        if( !focusable ) {
            this.getButtonElement().attr( 'tabindex', -1 );
        } else {
            this.getButtonElement().removeAttr( 'tabindex' );
        }
    },

    /**
     *
     */
    updateEnabled: function() {
        ControlView.prototype.updateEnabled.call( this );

        var isEnabled = this.model.get( 'enabled' );
        this.getButtonElement().prop( 'disabled', !isEnabled );
    },

    /**
     *
     */
    updateBackground: function() {
        var customStyle = this.model.get( 'background' );

        if( this.currentBackground ) {
            this.getButtonElement()
                .removeClass( this.valueToBackgroundClassName( this.currentBackground ) );
        }

        if( customStyle ) {
            this.getButtonElement()
                .addClass( this.valueToBackgroundClassName( customStyle ) );
        }

        this.currentBackground = customStyle;
    },

    /**
     * @description render view
     * @returns {CommonButtonView}
     */
    render: function() {
        this.prerenderingActions();

        this.renderTemplate( this.template );
        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     * @returns {jQuery}
     */
    getButtonElement: function() {
        return this.ui.button;
    },

    /**
     *
     */
    setFocus: function() {
        this.getButtonElement().focus();
    }

} );

_.extend( CommonButtonView.prototype, highlightMixin.controlView );

InfinniUI.ObjectUtils.setPropertyValueDirect( InfinniUI, 'viewModes.Button.common', CommonButtonView );

//####app/controls/button/linkView/buttonView.js
/**
 *
 * @augments ControlView
 * @constructor
 */
var LinkButtonView = CommonButtonView.extend( {

    tagName: 'a',

    className: 'pl-button',

    attributes: {
        href: 'javascript:;'
    },

    events: {
        'click': 'onClickHandler'
    },

    /**
     *
     * @returns {string}
     */
    template: function() {return '';},

    UI: {
    },

    /**
     *
     * @returns {jQuery}
     */
    getButtonElement: function() {
        return this.$el;
    }

} );

InfinniUI.ObjectUtils.setPropertyValueDirect( InfinniUI, 'viewModes.Button.link', LinkButtonView );

//####app/controls/button/buttonControl.js
/**
 *
 * @param viewMode
 * @constructor
 * @augments Control
 */
function ButtonControl( viewMode ) {
    _.superClass( ButtonControl, this, viewMode );
}

_.inherit( ButtonControl, Control );

_.extend( ButtonControl.prototype, highlightMixin.control, {

    /**
     *
     * @returns {ButtonModel}
     */
    createControlModel: function() {
        return new ButtonModel();
    },

    /**
     *
     * @param model
     * @param viewMode
     * @returns {ViewClass}
     */
    createControlView: function( model, viewMode ) {
        if( !viewMode || !viewMode in InfinniUI.viewModes.Button ) {
            viewMode = 'common';
        }

        var ViewClass = InfinniUI.viewModes.Button[ viewMode ];

        return new ViewClass( { model: model } );
    },

    /**
     *
     * @param type
     */
    setType: function( type ) {
        this.controlModel.set( 'type', type );
    },

    /**
     *
     * @returns {string}
     */
    getType: function() {
        return this.controlModel.get( 'type' );
    }

}, buttonControlMixin );

InfinniUI.ButtonControl = ButtonControl;

//####app/controls/button/buttonModel.js
/**
 *
 * @augments ControlModel
 * @constructor
 */
var ButtonModel = ControlModel.extend( {

    defaults: _.defaults( {
        content: null,
        contentTemplate: null,
        horizontalAlignment: 'Left',
        type: 'button'
    }, ControlModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
    }

} );

InfinniUI.ButtonModel = ButtonModel;

//####app/controls/button/menuItemView/buttonView.js
/**
 *
 * @augments ControlView
 * @constructor
 */
var MenuItemButtonView = LinkButtonView.extend( {

    /**
     *
     */
    updateHorizontalAlignment: function() {
        var horizontalAlignment = this.model.get( 'horizontalAlignment' );
        var that = this;
        var $el;

        domHelper.whenReady(
            function() {
                $el = that.$el.parent().parent();
                return $el.length > 0;
            },

            function() {
                if( horizontalAlignment == 'Right' ) {
                    $el
                        .addClass( 'pull-right' );
                } else {
                    $el
                        .removeClass( 'pull-right' );
                }
            }
        );
    }

} );

InfinniUI.ObjectUtils.setPropertyValueDirect( InfinniUI, 'viewModes.Button.menuItem', MenuItemButtonView );

//####app/controls/buttonEdit/buttonEditControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments TextBoxControl
 */
function ButtonEditControl( parent ) {
    _.superClass( ButtonEditControl, this, parent );
}

_.inherit( ButtonEditControl, TextBoxControl );

_.extend( ButtonEditControl.prototype, {

    /**
     *
     * @returns {ButtonEditModel}
     */
    createControlModel: function() {
        return new ButtonEditModel();
    },

    /**
     *
     * @param model
     * @returns {ButtonEditView}
     */
    createControlView: function( model ) {
        return new ButtonEditView( { model: model } );
    },

    /**
     *
     * @param handler
     */
    onButtonClick: function( handler ) {
        this.controlView.on( 'buttonClick', handler );
    }

} );

InfinniUI.ButtonEditControl = ButtonEditControl;

//####app/controls/buttonEdit/buttonEditModel.js
/**
 *
 * @constructor
 */
var ButtonEditModel = TextBoxModel.extend( {

    defaults: _.defaults( {
        showClear: true,
        readOnly: true
    }, TextBoxModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        TextBoxModel.prototype.initialize.apply( this, arguments );
    },

    /**
     *
     */
    clearValue: function() {
        var enabled = this.get( 'enabled' );

        if ( enabled ) {
            this.set( 'value', null );
        }
    }

} );

InfinniUI.ButtonEditModel = ButtonEditModel;

//####app/controls/buttonEdit/buttonEditView.js
/**
 *
 * @constructor
 */
var ButtonEditView = TextBoxView.extend( {

    template: {
        oneline: InfinniUI.Template[ 'controls/buttonEdit/template/textBoxInput.tpl.html' ],
        multiline: InfinniUI.Template[ 'controls/buttonEdit/template/textBoxArea.tpl.html' ]
    },

    className: 'pl-button-edit form-group',

    UI: _.extend( {}, TextBoxView.prototype.UI, {
        iconAction: '.pl-button-edit-button__icon_action',
        buttonClear: '.pl-button-edit-button_clear',
        buttons: '.pl-button-edit-button'
    } ),

    events: _.extend( {}, TextBoxView.prototype.events, {
        'click .pl-button-edit-button_action': 'onClickButtonHandler',
        'click .pl-button-edit-button_clear': 'onClickClearHandler'
    } ),

    /**
     *
     */
    initHandlersForProperties: function() {
        TextBoxView.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:icon', this.updateIcon );
        this.listenTo( this.model, 'change:showClear', this.updateShowClear );
        this.listenTo( this.model, 'change:readOnly', this.updateReadOnly );
    },

    /**
     *
     */
    updateProperties: function() {
        TextBoxView.prototype.updateProperties.call( this );
        this.updateIcon();
        this.updateShowClear();
        this.updateReadOnly();
    },

    /**
     *
     */
    updateIcon: function() {
        var icon = this.model.get( 'icon' );

        this.switchClass( 'fa', icon, this.ui.iconAction );
    },

    /**
     *
     */
    updateShowClear: function() {
        var showClear = this.model.get( 'showClear' );
        var value = this.model.get( 'value' );

        this.ui.buttonClear.toggleClass( 'hidden',  !showClear || _.isEmpty( value ) );
    },

    /**
     *
     */
    updateReadOnly: function() {
        var readOnly = this.model.get( 'readOnly' );

        this.ui.control.prop( 'readonly', readOnly );
    },

    /**
     *
     */
    updateEnabled: function() {
        var enabled = this.model.get( 'enabled' );

        TextBoxView.prototype.updateEnabled.call( this );

        //@TODO Update button states
        this.ui.buttons.toggleClass( 'pl-button-edit-button_disabled', !enabled );
    },

    /**
     *
     */
    updateValue: function() {
        TextBoxView.prototype.updateValue.call( this );
        this.updateShowClear();
    },

    /**
     *
     * @param event
     */
    onClickButtonHandler: function( event ) {
        var enabled = this.model.get( 'enabled' );

        if ( enabled ) {
            this.trigger( 'buttonClick', event );
        }
    },

    /**
     *
     */
    onClickClearHandler: function() {
        this.model.clearValue();
    }

} );

InfinniUI.ButtonEditView = ButtonEditView;

//####app/controls/comboBox/dropdown/comboBoxDropdownView.js
/**
 *
 * @constructor
 */
var ComboBoxDropdownView = Backbone.View.extend( {

    className: 'pl-dropdown-container',

    events: {
        'click .backdrop': 'onClickBackdropHandler',
        'keyup .pl-combobox-filter-text': 'onKeyUpHandler',
        'keydown .pl-combobox-filter-text': 'onFilterKeyDownHandler'
    },

    UI: {
        items: '.pl-combobox-items',
        filter: '.pl-combobox-filter',
        text: '.pl-combobox-filter-text',
        noItems: '.pl-combobox-items-empty'
    },

    /**
     *
     */
    initialize: function() {
        var groupValueSelector = this.model.get( 'groupValueSelector' );
        var isGrouped = groupValueSelector !== null && typeof groupValueSelector !== 'undefined';

        if( isGrouped ) {
            this.strategy = new ComboBoxGroupViewStrategy( this );
        } else {
            this.strategy = new ComboBoxPlainViewStrategy( this );
        }

        this.listenTo( this.model, 'change:noItemsMessage', this.updateNoItemsMessage );
        this.listenTo( this.model, 'change:dropdown', this.onChangeDropdownHandler );
        this.listenTo( this.model, 'change:autocompleteValue', this.onChangeSearchHandler );
        this.listenTo( this.model, 'change:autocomplete', this.updateAutocomplete );
        this.listenTo( this.model, 'change:selectedItem', this.onChangeSelectedItem );
        this.listenTo( this.strategy, 'click', this.onClickItemHandler );
        this.listenTo( this.strategy, 'mouseenter', this.onMouseEnterItemHandler );
        this.model.onValueChanged( this.onChangeValueHandler.bind( this ) );

        var items = this.model.get( 'items' );

        var view = this;
        items.onChange( function() {
            view.renderItems();
        } );
    },

    /**
     *
     */
    updateProperties: function() {
        this.updateAutocomplete();
        this.updateNoItemsMessage();
    },

    /**
     *
     */
    updateNoItemsMessage: function() {
        var model = this.model;
        var noItemsMessage = model.get( 'noItemsMessage' ) || localized.strings.ComboBox.noItemsMessage;
        this.ui.noItems.html( noItemsMessage );
    },

    /**
     *
     * @returns {jQuery}
     */
    render: function() {
        var template = this.strategy.getTemplate();
        this.$el.html( template( {
            multiSelect: this.model.get( 'multiSelect' )
        } ) );
        this.bindUIElements();
        this.updateProperties();
        this.renderItems();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this.$el;
    },

    /**
     *
     */
    renderItems: function() {
        this.$el.hide();
        this.$items = this.strategy.renderItems();
        var items = this.model.get( 'items' );
        var isInitialized = this.model.get( 'isInitialized' );

        var noItems = ( isInitialized && items && items.length == 0 );
        this.ui.noItems.toggleClass( 'hidden', !noItems );

        this.markSelectedItems();
        this.markCheckedItems();

        this.trigger( 'itemsRendered2' );
        this.$el.show();
    },

    /**
     *
     * @param content
     */
    setItemsContent: function( content ) {
        var $items = this.ui.items;
        $items.empty();
        $items.append( content );
    },

    /**
     *
     */
    close: function() {
        this.model.set( 'dropdown', false );
    },

    /**
     *
     */
    setSearchFocus: function() {
        this.ui.text.focus();
    },

    /**
     *
     */
    onClickBackdropHandler: function() {
        this.close();
    },

    /**
     *
     */
    onChangeValueHandler: function() {
        this.markCheckedItems();
    },

    /**
     *
     */
    markSelectedItems: function() {
        var model = this.model;
        if( !Array.isArray( this.$items ) ) {
            return;
        }

        var $items = this.$items;
        var selectedItem = model.getSelectedItem();

        $items.forEach( function( $item ) {
            var selected = selectedItem === $item.data( 'pl-data-item' );
            $item.toggleClass( 'pl-combobox-selected', selected );
        } );

        this.ensureVisibleSelectedItem();
    },

    /**
     *
     */
    ensureVisibleSelectedItem: function() {
        if( !Array.isArray( this.$items ) ) {
            return;
        }

        var $container = this.ui.items;
        var $items = this.$items;
        var selectedItem = this.model.getSelectedItem();

        $items.some( function( $item ) {
            var selected = selectedItem === $item.data( 'pl-data-item' );
            if( selected ) {
                ensureItem( $container, $item );
            }
            return selected;
        } );

        function ensureItem( $container, $item ) {
            var newScrollTop;
            var scrollTop = $container.scrollTop();
            var itemTop = $item.position().top;
            var itemHeight = $item.outerHeight();
            var viewHeight = $container.innerHeight();

            if( itemTop + itemHeight > viewHeight ) {
                newScrollTop = scrollTop + itemTop + itemHeight - viewHeight;
            } else if( itemTop < 0 ) {
                newScrollTop = scrollTop + itemTop;
            }

            if( typeof newScrollTop !== 'undefined' ) {
                $container.scrollTop( newScrollTop );
            }
        }
    },

    /**
     *
     */
    markCheckedItems: function() {
        var model = this.model;
        var value = model.getValue();

        if( !Array.isArray( this.$items ) ) {
            return;
        }

        var $items = this.$items;
        var isMultiSelect = !!model.get( 'multiSelect' );
        var items = [];

        if( isMultiSelect && Array.isArray( value ) ) {
            items = value.map( function( val ) {
                return model.itemByValue( val );
            } );
        } else {
            items = [ model.itemByValue( value ) ];
        }

        $items.forEach( function( $item ) {
            var selected = items.indexOf( $item.data( 'pl-data-item' ) ) !== -1;
            $item.toggleClass( 'pl-combobox-checked', selected );
        } );
    },

    /**
     *
     * @param model
     * @param dropdown
     */
    onChangeDropdownHandler: function( model, dropdown ) {
        if( !dropdown ) {
            this.remove();
        }
    },

    /**
     *
     */
    updateAutocomplete: function() {
        var autocomplete = this.model.get( 'autocomplete' );
        this.ui.filter.toggleClass( 'hidden', !autocomplete );
    },

    /**
     *
     * @param item
     */
    onMouseEnterItemHandler: function( item ) {
        this.model.setSelectedItem( item );
    },

    /**
     *
     * @param item
     */
    onClickItemHandler: function( item ) {
        var isEnabled = !this.model.isDisabledItem( item );

        if( isEnabled ) {
            this.model.toggleItem( item );
            this.close();
        }
    },

    /**
     *
     */
    onKeyUpHandler: function() {
        //@TODO grow input
        var text = this.ui.text.val();
        this.trigger( 'search', text );
    },

    /**
     *
     * @param event
     */
    onKeyDownHandler: function( event ) {
        var model = this.model;
        event.preventDefault();
        this.onFilterKeyDownHandler( event );
    },

    /**
     *
     * @param event
     */
    onFilterKeyDownHandler: function( event ) {
        var model = this.model;

        switch( event.which ) {
            case 36://Home;
                model.selectFirstItem();
                break;
            case 35: //End
                model.selectLastItem();
                break;
            case 38: //Up
                model.selectPrevItem();
                break;
            case 40: //Down
                model.selectNextItem();
                break;
            case 13:
                this.onClickItemHandler( model.getSelectedItem() );
                break;
            case 9:
                this.close();
                break;
            case 27://Escape
                this.close();
                event.stopPropagation();
                break;
            default:
                break;
        }
    },

    /**
     *
     * @param model
     * @param value
     */
    onChangeSearchHandler: function( model, value ) {
        var search = this.ui.noItems.find( '.search-message' );

        if( search.length ) {
            search.text( value );
        }

        this.model.set( 'isInitialized', false );
        this.renderItems();
    },

    /**
     *
     */
    onChangeSelectedItem: function() {
        this.markSelectedItems();
    },

    /**
     *
     * @param baseWidthDOMElement
     * @param basePositionDOMElement
     */
    updatePosition: function( baseWidthDOMElement, basePositionDOMElement ) {
        var direction = this.getDropdownDirection( baseWidthDOMElement );
        this.setPositionFor( baseWidthDOMElement, basePositionDOMElement, direction );
    },

    /**
     *
     * @param baseWidthDOMElement
     * @param basePositionDOMElement
     * @param direction
     */
    setPositionFor: function( baseWidthDOMElement, basePositionDOMElement, direction ) {
        clearInterval( this._intervalId );

        this.applyStyle( baseWidthDOMElement, basePositionDOMElement, direction );
        this._intervalId = setInterval( this.applyStyle.bind( this, baseWidthDOMElement, basePositionDOMElement, direction ), 100 );
    },

    /**
     *
     * @returns {*}
     */
    remove: function() {
        clearInterval( this._intervalId );
        return Backbone.View.prototype.remove.apply( this, arguments );
    },

    /**
     *
     * @param parentDOMElement
     * @returns {string}
     */
    getDropdownDirection: function( parentDOMElement ) {
        var windowHeight = $( window ).height();
        var rect = parentDOMElement.getBoundingClientRect();
        var height = this.$el.height();
        var direction = 'bottom';

        if( rect.bottom + height + 30 > windowHeight && rect.bottom > windowHeight / 2 ) {
            direction = 'top';
        }

        return direction;
    },

    /**
     *
     * @param baseWidthDOMElement
     * @param basePositionDOMElement
     * @param direction
     */
    applyStyle: function( baseWidthDOMElement, basePositionDOMElement, direction ) {
        var widthElementRect = baseWidthDOMElement.getBoundingClientRect();
        var positionElementRect = basePositionDOMElement.getBoundingClientRect();
        var style = {
            left: window.pageXOffset + positionElementRect.left,
            width: Math.round( widthElementRect.width )
        };

        if( direction === 'bottom' ) {
            style.top = window.pageYOffset + positionElementRect.bottom;
        } else {
            style.top = window.pageYOffset + positionElementRect.top - this.$el.height();
        }

        this.$el.css( style );
    }

} );

_.extend( ComboBoxDropdownView.prototype, bindUIElementsMixin );

InfinniUI.ComboBoxDropdownView = ComboBoxDropdownView;

//####app/controls/comboBox/dropdown/viewBaseStrategy.js
/**
 * @abstract
 * @param dropdownView
 * @constructor
 */
function ComboBoxBaseViewStrategy( dropdownView ) {
    this.dropdownView = dropdownView;
}

/**
 *
 * @param {string} attributeName
 * @returns {*}
 */
ComboBoxBaseViewStrategy.prototype.getModelAttribute = function( attributeName ) {
    var model = this.dropdownView.model;

    return model.get( attributeName );
};

/**
 *
 * @param item
 * @returns {boolean}
 */
ComboBoxBaseViewStrategy.prototype.isEnabledItem = function( item ) {
    return !this.dropdownView.model.isDisabledItem( item );
};

/**
 * @description Рендеринг элементов списка
 * @abstract
 * @returns {Array.<jQuery>} Элементы списка
 */
ComboBoxBaseViewStrategy.prototype.renderItems = function() {
    throw new Error( 'Method renderItems not implemented' );
};

/**
 * @abstract
 */
ComboBoxBaseViewStrategy.prototype.getTemplate = function() {
};

/**
 * Рендеринг заданных элементов списка
 * @param {Array.<Object>} items
 * @returns {Array.<jQuery>}
 * @private
 */
ComboBoxBaseViewStrategy.prototype._renderItems = function( items ) {
    var $items;
    var collection = this.getModelAttribute( 'items' );
    var itemTemplate = this.getModelAttribute( 'itemTemplate' );

    $items = items.map( function( item ) {
        var itemEl = itemTemplate( undefined, {
            value: item,
            index: collection.indexOf( item )
        } );
        var $item = itemEl.render();

        if ( typeof item !== 'undefined' ) {
            $item.data( 'pl-data-item', item );
        }

        this.addOnClickEventListener( $item, item );
        this.addOnHoverEventListener( $item, item );

        itemEl.setEnabled( this.isEnabledItem( item ) );

        return $item;
    }, this );

    return $items;
};

/**
 *
 * @param {jQuery} $el
 */
ComboBoxBaseViewStrategy.prototype.addOnClickEventListener = function( $el ) {
    var el = $el[ 0 ];
    var params = Array.prototype.slice.call( arguments, 1 );
    var handler = this.trigger.bind( this, 'click' );

    el.addEventListener( 'click', function() {
        handler.apply( this, params );
    } );
};

/**
 *
 * @param $el
 */
ComboBoxBaseViewStrategy.prototype.addOnHoverEventListener = function( $el ) {
    var params = Array.prototype.slice.call( arguments, 1 );
    var handler = this.trigger.bind( this, 'mouseenter' );

    $el.on( 'mouseenter', function() {
        handler.apply( this, params );
    } );
};

_.extend( ComboBoxBaseViewStrategy.prototype, Backbone.Events );

InfinniUI.ComboBoxBaseViewStrategy = ComboBoxBaseViewStrategy;

//####app/controls/comboBox/dropdown/viewGroupStrategy.js
/**
 *
 * @param {ComboBoxDropdownView} dropdownView
 * @augments ComboBoxBaseViewStrategy
 * @constructor
 */
function ComboBoxGroupViewStrategy( dropdownView ) {
    ComboBoxBaseViewStrategy.call( this, dropdownView );
}

ComboBoxGroupViewStrategy.prototype = Object.create( ComboBoxBaseViewStrategy.prototype );
ComboBoxGroupViewStrategy.prototype.constructor = ComboBoxGroupViewStrategy;

ComboBoxGroupViewStrategy.prototype.template = InfinniUI.Template[ 'controls/comboBox/dropdown/template/group/template.tpl.html' ];

/**
 *
 * @returns {Array.<jQuery>|*}
 */
ComboBoxGroupViewStrategy.prototype.renderItems = function() {
    var collection = this.getModelAttribute( 'items' );
    var groupingFunction = this.getModelAttribute( 'groupValueSelector' );
    var groups = {};
    var $items;

    collection.forEach( function( item, index ) {
        var groupKey = groupingFunction( undefined, { value: item, index: index } );

        if( !( groupKey in groups ) ) {
            groups[ groupKey ] = [];
        }

        groups[ groupKey ].push( item );
    } );

    $items = this.renderGroups( groups );

    return $items;
};

/**
 * @description Рендереинг группированных элементов
 * @param {Array.<Object>} groups
 * @returns {Array.<jQuery>} Элементы групп
 */
ComboBoxGroupViewStrategy.prototype.renderGroups = function( groups ) {
    var groupItemTemplate = this.getModelAttribute( 'groupItemTemplate' );
    var collection = this.getModelAttribute( 'items' );
    var $items = [];
    var $groupItems;
    var $groups = [];

    for( var name in groups ) {
        var items = groups[ name ];
        //Шаблонизированный заголовок группы
        var $header = groupItemTemplate( undefined, {
            index: collection.indexOf( items[ 0 ] ),
            item: items[ 0 ]
        } );
        //Шаблонизированные элементы группы
        $groupItems = this._renderItems( items );

        var groupView = new ComboBoxGroupView( {
            header: $header.render(),
            items: $groupItems
        } );

        Array.prototype.push.apply( $items, $groupItems );
        $groups.push( groupView.render() );
    }

    this.dropdownView.setItemsContent( $groups );

    return $items;
};

/**
 *
 * @returns {*}
 */
ComboBoxGroupViewStrategy.prototype.getTemplate = function() {
    return this.template;
};

InfinniUI.ComboBoxGroupViewStrategy = ComboBoxGroupViewStrategy;

//####app/controls/comboBox/dropdown/viewPlainStrategy.js
/**
 *
 * @param {ComboBoxDropdownView} dropdownView
 * @augments ComboBoxBaseViewStrategy
 * @constructor
 */
function ComboBoxPlainViewStrategy( dropdownView ) {
    ComboBoxBaseViewStrategy.call( this, dropdownView );
}

ComboBoxPlainViewStrategy.prototype = Object.create( ComboBoxBaseViewStrategy.prototype );
ComboBoxPlainViewStrategy.prototype.constructor = ComboBoxPlainViewStrategy;

/**
 *
 * @returns {Array}
 */
ComboBoxPlainViewStrategy.prototype.renderItems = function() {
    var $items = [];
    var items = this.getModelAttribute( 'items' );

    if ( items ) {
        $items = this._renderItems( items.toArray() );
    }

    this.dropdownView.setItemsContent( $items );

    return $items;
};

ComboBoxPlainViewStrategy.prototype.template = InfinniUI.Template[ 'controls/comboBox/dropdown/template/plain/template.tpl.html' ];

/**
 *
 * @returns {*}
 */
ComboBoxPlainViewStrategy.prototype.getTemplate = function() {
    return this.template;
};

InfinniUI.ComboBoxPlainViewStrategy = ComboBoxPlainViewStrategy;

//####app/controls/comboBox/dropdown/group/groupView.js
/**
 *
 * @constructor
 */
var ComboBoxGroupView = Backbone.View.extend( {

    template: InfinniUI.Template[ 'controls/comboBox/dropdown/group/template/template.tpl.html' ],

    UI: {
        header: '.pl-combobox-group__header',
        items: '.pl-combobox-group__items'
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        this.options = {
            header: options.header,
            items: options.items
        };
    },

    /**
     *
     * @returns {jQuery}
     */
    render: function() {
        var options = this.options;
        this.$el.html( this.template() );
        this.bindUIElements();
        this.ui.header.append( options.header );
        this.ui.items.append( options.items );

        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop

        return this.$el;
    }

} );

_.extend( ComboBoxGroupView.prototype, bindUIElementsMixin );

InfinniUI.ComboBoxGroupView = ComboBoxGroupView;

//####app/controls/comboBox/values/comboBoxValue.js
/**
 *
 * @constructor
 */
var ComboBoxValueModel = Backbone.Model.extend( {
} );

InfinniUI.ComboBoxValueModel = ComboBoxValueModel;

/**
 *
 * @constructor
 */
var ComboBoxValue = Backbone.View.extend( {

    template: InfinniUI.Template[ 'controls/comboBox/values/template/value.tpl.html' ],

    tagName: 'li',

    className: 'pl-combobox-value',

    events: {
        'click .pl-combobox-value-remove': 'onClickRemoveHandler'
    },

    UI: {
        item: '.pl-combobox-value-item'
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        this.model = new ComboBoxValueModel( options );
    },

    /**
     *
     * @returns {jQuery}
     */
    render: function() {
        this.$el.html( this.template() );

        this.bindUIElements();
        var $value = this.model.get( '$value' );
        this.ui.item.append( $value );
        return this.$el;
    },

    /**
     *
     */
    onClickRemoveHandler: function() {
        var value = this.model.get( 'value' );
        this.trigger( 'remove', value );
    }

} );

_.extend( ComboBoxValue.prototype, bindUIElementsMixin );

InfinniUI.ComboBoxValue = ComboBoxValue;

//####app/controls/comboBox/values/comboBoxValues.js
/**
 *
 * @constructor
 */
var ComboBoxValuesModel = Backbone.Model.extend( {

    defaults: {
        enabled: true
    },

    initialize: function() {
        this.items = [];
    }

} );

InfinniUI.ComboBoxValuesModel = ComboBoxValuesModel;

/**
 *
 * @constructor
 */
var ComboBoxValues = Backbone.View.extend( {

    tagName: 'ul',

    className: 'pl-combobox-values',

    template: InfinniUI.Template[ 'controls/comboBox/values/template/values.tpl.html' ],

    events: {
        'keypress .pl-combobox-search-text': 'onKeyPressHandler',
        'keydown .pl-combobox-search-text': 'onKeyDownHandler',
        'keyup .pl-combobox-search-text': 'onKeyUpHandler',
        'click': 'onClickHandler'
    },

    UI: {
        search: '.pl-combobox-search',
        text: '.pl-combobox-search-text'
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        this.model = new ComboBoxValuesModel( options );
    },

    /**
     *
     * @returns {jQuery}
     */
    render: function() {
        this.$el.empty();
        this.$el.html( this.template() );
        this.bindUIElements();

        var model = this.model;
        var $items = model.get( 'items' )
            .map( function( item ) {
                var view = new ComboBoxValue( {
                    '$value': item.$value,
                    'value': item.value
                } );

                this.listenTo( view, 'remove', this.onRemoveValueHandler );
                return view.render();
            }, this );

        this.ui.search.before( $items );

        return this.$el;
    },

    KeyCode: {
        enter: 13,
        backspace: 8,
        left: 37,
        right: 39,
        home: 36,
        end: 35,
        tab: 9
    },

    /**
     *
     */
    setFocus: function() {
        this.ui.text.focus();
    },

    /**
     *
     * @param event
     */
    onKeyPressHandler: function( event ) {
        var key = event.which;

        if( key === this.KeyCode.enter ) {

        }

        console.log( 'onKeyPressHandler', event.which, this.ui.text.val() );
    },

    /**
     *
     * @param event
     */
    onKeyDownHandler: function( event ) {
        //handle left/right/tab/Shift-tab/backspace/end/home
        var key = event.which;
        if( key === this.KeyCode.left ) {

        } else {

        }
        console.log( 'onKeyDownHandler', event.which, this.ui.text.val() );
    },

    /**
     *
     */
    onKeyUpHandler: function() {
        //@TODO grow input
        var text = this.ui.text.val();
        this.trigger( 'search', text );
    },

    /**
     *
     * @param value
     */
    onRemoveValueHandler: function( value ) {
        this.trigger( 'remove', value );
    },

    /**
     *
     */
    onClickHandler: function() {
        this.setFocus();
    }

} );

_.extend( ComboBoxValues.prototype, bindUIElementsMixin );

InfinniUI.ComboBoxValues = ComboBoxValues;

//####app/controls/dataGrid/dataGridControl.js
/**
 *
 * @constructor
 * @augments ListEditorBaseControl
 */
function DataGridControl() {
    _.superClass( DataGridControl, this );
}

_.inherit( DataGridControl, ListEditorBaseControl );

_.extend( DataGridControl.prototype, {

    /**
     *
     * @returns {DataGridModel}
     */
    createControlModel: function() {
        return new DataGridModel();
    },

    /**
     *
     * @param model
     * @returns {DataGridView}
     */
    createControlView: function( model ) {
        return new DataGridView( { model: model } );
    },

    /**
     *
     * @param handler
     */
    onCheckAllChanged: function( handler ) {
        this.controlModel.onCheckAllChanged( handler );
    },

    /**
     *
     * @param value
     */
    setEnabled: function( value ) {
        this.controlModel.set( 'enabled', value );
    },

    /**
     *
     * @param callback
     */
    onRowClick: function( callback ) {
        this.controlView.$el.on( 'click', 'tbody .pl-datagrid-row', callback );
    },

    /**
     *
     * @param callback
     */
    onRowDoubleClick: function( callback ) {
        this.controlView.$el.on( 'dblclick', 'tbody .pl-datagrid-row', callback );
    }

} );

InfinniUI.DataGridControl = DataGridControl;

//####app/controls/dataGrid/dataGridModel.js
/**
 * @constructor
 * @augments ListEditorBaseModel
 */
var DataGridModel = ListEditorBaseModel.extend( {

    defaults: _.defaults( {
        showSelectors: true,
        checkAllVisible: false,
        checkAll: false,
        focusable: false,
        verticalAlignment: 'Top',
        sortedColumn: null,
        scroll: true
    }, ListEditorBaseModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ListEditorBaseModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
        this.initColumns();
    },

    /**
     *
     */
    toggleCheckAll: function() {
        this.set( 'checkAll', !this.get( 'checkAll' ) );
    },

    /**
     *
     * @param handler
     */
    onCheckAllChanged: function( handler ) {
        this.on( 'change:checkAll', function( model, checkAll ) {
            handler.call( null, { value: checkAll } );
        } );
    },

    /**
     * @protected
     */
    initColumns: function() {
        this.set( 'columns', new Collection() );
    }

} );

InfinniUI.DataGridModel = DataGridModel;

//####app/controls/dataGrid/dataGridView.js
/**
 * @constructor
 * @augments ListEditorBaseView
 */
var DataGridView = ListEditorBaseView.extend( {

    template: {
        'grid': InfinniUI.Template[ 'controls/dataGrid/template/dataGrid.tpl.html' ],
        'gridWithoutScroll': InfinniUI.Template[ 'controls/dataGrid/template/dataGridWithoutScroll.tpl.html' ],
        'headerCell': InfinniUI.Template[ 'controls/dataGrid/template/headerCell.tpl.html' ],
        'sizeCell': InfinniUI.Template[ 'controls/dataGrid/template/sizeCell.tpl.html' ]
    },

    className: 'pl-datagrid',

    events: _.extend( {},
        ListEditorBaseView.prototype.events,
        {
            'click .pl-datagrid-toggle_all': 'onClickCheckAllHandler',
            'click thead .pl-datagrid-row__cell': 'onClickToHeaderCellHandler'
        }
    ),

    UI: _.defaults( {
        body: '.pl-datagrid__body',
        head: '.pl-datagrid__head',
        headContainer: '.pl-datagrid-container_head',
        header: '.pl-datagrid-row_header',
        firstRows: '.pl-datagrid-row_first',
        toggleCell: '.pl-toggle-cell',
        checkAll: '.pl-datagrid-toggle__button',
        items: 'tbody'
    }, ListEditorBaseView.prototype.UI ),

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ListEditorBaseView.prototype.initialize.call( this, options );
        this.rowElements = new HashMap();
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ListEditorBaseView.prototype.initHandlersForProperties.call( this );

        this.listenTo( this.model, 'change:showSelectors', this.updateShowSelectors );
        this.listenTo( this.model, 'change:checkAllVisible', this.updateCheckAllVisible );
        this.listenTo( this.model, 'change:checkAll', this.updateCheckAll );
        this.listenTo( this.model, 'change:verticalAlignment', this.updateVerticalAlignment );
        this.listenTo( this.model, 'change:scroll', this.updateScroll );

        /** Update hash item => element when item changed **/
        var rowElements = this.rowElements;

        this.model.get( 'items' ).onChange( function( event ) {
            if( event.action === 'replace' ) {
                event.oldItems.forEach( function( oldItem, index ) {
                    rowElements.add( event.newItems[ index ], rowElements.get( oldItem ) );
                    rowElements.remove( oldItem );
                } );
            }
        } );
    },

    /**
     *
     */
    updateScroll: function() {
        var model = this.model;
        var scrollValue = model.get( 'scroll' );
        var scrollableClass = 'pl-datagrid-scrollable';
        var adaptableBody = 'pl-adaptable-by-height';
        var $head = this.ui.head;

        if( scrollValue ) {
            this.$el.addClass( scrollableClass );
            this.ui.body.addClass( adaptableBody );
            $head.css( 'padding-right', this.getHorizontalScrollBarWidth() + 'px' );
        } else {
            this.$el.removeClass( scrollableClass );
            this.ui.body.removeClass( adaptableBody );
            $head.css( 'padding-right', '' );
        }
    },

    /**
     *
     */
    updateProperties: function() {
        ListEditorBaseView.prototype.updateProperties.call( this );
        this.updateShowSelectors();
        this.updateCheckAllVisible();
        this.updateCheckAll();
        this.updateDisabledItem();
        this.updateVerticalAlignment();
        this.updateScroll();
    },

    /**
     *
     */
    updateShowSelectors: function() {
        var showSelectors = this.model.get( 'showSelectors' );

        this.$el.toggleClass( 'pl-datagrid_selectors_show', showSelectors );
        this.$el.toggleClass( 'pl-datagrid_selectors_hide', !showSelectors );
    },

    /**
     *
     */
    updateGrouping: function() {
    },

    /**
     *
     */
    updateVerticalAlignment: function() {
        this.switchClass( 'verticalAlignment', this.model.get( 'verticalAlignment' ), this.$el, false );
        this.switchClass( 'verticalAlignment', this.model.get( 'verticalAlignment' ), this.ui.body, false );
    },

    /**
     *
     */
    updateCheckAll: function() {
        var checkAll = this.model.get( 'checkAll' );

        this.ui.checkAll.prop( 'checked', checkAll );
    },

    /**
     *
     * @returns {number|*}
     */
    getHorizontalScrollBarWidth: function() {
        if( typeof DataGridView.scrollbarWidth === 'undefined' ) {
            var scrollDiv = document.createElement( 'div' );
            var body = document.body;

            scrollDiv.className = 'modal-scrollbar-measure';
            var style = {
                position: 'absolute',
                top: '-9999px',
                width: '50px',
                height: '50px',
                overflow: 'scroll'
            };

            for( var name in style ) {
                scrollDiv.style[ name ] = style[ name ];
            }

            body.appendChild( scrollDiv );
            DataGridView.scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            body.removeChild( scrollDiv );
        }

        return DataGridView.scrollbarWidth;
    },

    /**
     *
     */
    updateCheckAllVisible: function() {
        var checkAllVisible = this.model.get( 'checkAllVisible' );

        this.ui.checkAll.toggleClass( 'hidden', !checkAllVisible );
    },

    /**
     *
     */
    updateMultiSelect: function() {
        ListEditorBaseView.prototype.updateMultiSelect.call( this );

        var multiSelect = this.model.get( 'multiSelect' );
        this.$el.toggleClass( 'pl-datagrid_select_multi', multiSelect === true );
        this.$el.toggleClass( 'pl-datagrid_select_single', multiSelect !== true );
    },

    /**
     *
     */
    updateValue: function() {
        var model = this.model;
        var value = model.get( 'value' );
        var indices = [];
        var items = model.get( 'items' );

        if( !model.get( 'multiSelect' ) && typeof value !== 'undefined' && value !== null ) {
            value = [ value ];
        }

        if( Array.isArray( value ) ) {
            indices = value
                .map( function( val ) {
                    return model.itemIndexByValue( val );
                } )
                .filter( function( index ) {
                    return index !== -1;
                } );
        }

        this.rowElements.forEach( function( rowElement, item ) {
            var index = items.indexOf( item );
            var toggle = indices.indexOf( index ) !== -1;

            rowElement.toggle( toggle );
        } );
    },

    /**
     *
     */
    updateSelectedItem: function() {
        var model = this.model;
        var selectedItem = model.get( 'selectedItem' );

        this.rowElements.forEach( function( rowElement, item ) {
            rowElement.setSelected( item === selectedItem );
        } );
    },

    /**
     *
     */
    updateDisabledItem: function() {
        var model = this.model;
        var disabledItemCondition = model.get( 'disabledItemCondition' );
        var isEnabled;

        if( disabledItemCondition !== null && typeof disabledItemCondition !== 'undefined' ) {
            this.rowElements.forEach( function( rowElement, item ) {
                isEnabled = !disabledItemCondition( undefined, { value: item } );
                if( rowElement.getSelected() === item && isEnabled === false ) {
                    model.set( 'selectedItem', null );
                }
                rowElement.setEnabled( isEnabled );
            } );
        } else {
            this.rowElements.forEach( function( rowElement, item ) {
                rowElement.setEnabled( true );
            } );
        }
    },

    /**
     *
     */
    updateEnabled: function() {
        var isEnabled = this.model.get( 'enabled' );

        if( isEnabled ) {
            this.updateDisabledItem();
        } else {
            this.disableDataGridItems();
        }
    },

    /**
     *
     */
    disableDataGridItems: function() {
        this.model.set( 'selectedItem', null );
        this.rowElements.forEach( function( rowElement, item ) {
            rowElement.setEnabled( false );
        } );
    },

    /**
     *
     * @returns {DataGridView}
     */
    render: function() {
        var that = this;
        this.prerenderingActions();

        var verticalAlignment = this.model.get( 'verticalAlignment' );
        var scrollValue = this.model.get( 'scroll' );
        var template = this.template.grid;

        if( !scrollValue ) {
            template = this.template.gridWithoutScroll;
        }

        this.$el.html( template() );

        this.bindUIElements();

        this.renderHeaders();
        this.renderItems();

        this.trigger( 'render' );

        this.applyColumnWidth();
        this.syncBodyAndHead();
        this.postrenderingActions();
        setTimeout( function() {
            that.updateProperties();
            //devblockstart
            InfinniUI.global.messageBus.send( 'render', { element: that } );
            //devblockstop
        }, 0 );
        return this;
    },

    /**
     *
     */
    applyColumnWidth: function() {
        var columns = this.model.get( 'columns' );
        var fixedTableLayout = false;

        this.ui.firstRows.children().each( function( i, el ) {
            var columnIndex = i % ( columns.length + 1 );

            if( columnIndex === 0 ) {
                //skip columns with checkbox/radiobutton
                return;
            }

            var column = columns.getByIndex( columnIndex - 1 );
            var width = column && column.getWidth();

            if( width ) {
                $( el ).css( 'width', width );
                fixedTableLayout = true;
            }
        } );

        this.$el.toggleClass( 'pl-datagrid_layout_fixed', fixedTableLayout );
    },

    /**
     *
     */
    syncBodyAndHead: function() {
        var $head = this.ui.head;

        $head.css( 'padding-right', this.getHorizontalScrollBarWidth() + 'px' );

        this.ui.body
            .off( 'scroll' )
            .on( 'scroll', this.onScrollBodyHandler.bind( this ) );
    },

    /**
     *
     */
    onScrollBodyHandler: function() {
        this.ui.headContainer.scrollLeft( this.ui.body.scrollLeft() );
    },

    /**
     *
     */
    renderHeaders: function() {
        var that = this;
        var columns = this.model.get( 'columns' );
        var sizeCells = [];
        var templateSizeCells = this.template.sizeCell();
        var $headers = columns.toArray().map( function( column ) {
            sizeCells.push( templateSizeCells );
            // @TODO remove hardcoded template when the memory leaks of dataBindings would have fixed
            // bug related to task JK-4516
            var $th = $( '<th class="pl-datagrid-row__cell"></th>' );
            var headerTemplate = column.getHeaderTemplate();
            var header = column.getHeader();

            $th.data( 'pl-column', column );

            if( column.getSortable() ) {
                $th.addClass( 'sortable' );

                if( column.getSortDirection() ) {
                    setTimeout( function() {
                        that.setUpColumnSort( column, $th, column.getSortDirection(), false );
                    }, 0 );
                }
            }

            var headerElement;

            if( headerTemplate ) {
                headerElement = headerTemplate( null, { value: header } );
                $th.append( headerElement.render() );
            } else {
                $th.append( header );
            }
            return $th;
        } );

        this.ui.header.append( $headers );
        this.ui.firstRows.append( sizeCells );
    },

    /**
     *
     */
    renderItems: function() {
        var model = this.model;
        var valueSelector = model.get( 'valueSelector' );
        var itemTemplate = model.get( 'itemTemplate' );
        var items = model.get( 'items' );
        var $items = this.ui.items;
        var that = this;

        this.removeRowElements();

        items.forEach( function( item, index ) {
            setTimeout( function() {
                var element = itemTemplate( undefined, { index: index, item: item } );

                element.onBeforeClick( function() {
                    var items = model.get( 'items' );
                    var item = items.getByIndex( index );
                    var rowItem = that.rowElements.get( item );

                    if( rowItem.getEnabled() !== false ) {
                        model.set( 'selectedItem', item );
                    }
                } );

                element.onToggle( function() {
                    var enabled = model.get( 'enabled' );
                    var items = model.get( 'items' );

                    if( enabled ) {
                        model.toggleValue( valueSelector( undefined, { value: items.getByIndex( index ) } ) );
                    }
                } );
                that.addRowElement( item, element );

                var $element = element.render();

                $items.append( $element );
            }, 0 );
        }, this );
    },

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );

        this.rowElements.values.forEach( function( element ) {
            if( focusable ) {
                element.control.controlView.$el.attr( 'tabindex', 0 );
            } else {
                element.control.controlView.$el.removeAttr( 'tabindex' );
            }
        } );
    },

    /**
     *
     * @param item
     * @param element
     */
    addRowElement: function( item, element ) {
        this.addChildElement( element );
        this.rowElements.add( item, element );
    },

    /**
     *
     */
    removeRowElements: function() {
        this.removeChildElements();
        this.rowElements.clear();
    },

    /**
     *
     */
    onClickCheckAllHandler: function() {
        this.model.toggleCheckAll();
    },

    /**
     *
     * @param e
     */
    onClickToHeaderCellHandler: function( e ) {
        var $th = $( e.currentTarget );
        var column = $th.data( 'pl-column' );

        if( column && column.isSortable() ) {
            if( column.getSortDirection() === null ) {
                this.resetSort();
                this.setUpColumnSort( column, $th, 'asc' );
            } else if( column.getSortDirection() === 'asc' ) {
                this.resetSort( 'asc' );
                this.setUpColumnSort( column, $th, 'desc' );
            } else if( column.getSortDirection() === 'desc' ) {
                this.resetSort( 'desc' );
                this.setUpColumnSort( column, $th, 'asc' );
            }
        }
    },

    /**
     *
     * @param column
     * @param $th
     * @param direction
     * @param triggerEvent
     */
    setUpColumnSort: function( column, $th, direction, triggerEvent ) {
        column.setSortDirection( direction );
        this.model.set( 'sortedColumn', column );
        if( !column.getIsHeaderTemplateEmpty() ) {
            $th.addClass( 'sorted headerTemplate-sorted-' + direction );
        } else {
            $th.addClass( 'sorted sorted-' + direction );
        }
        if( triggerEvent !== false ) {
            column.trigger( 'onSort', { sortDirection: direction } );
        }
    },

    /**
     *
     * @param direction
     */
    resetSort: function( direction ) {
        var $sortableCell;

        if( !direction ) {
            $sortableCell = this.$el.find( '.sorted' );
            $sortableCell.removeClass( 'sorted headerTemplate-sorted-asc headerTemplate-sorted-desc sorted-asc sorted-desc' );
            var sortedCell = this.model.get( 'sortedColumn' );

            if( sortedCell ) {
                sortedCell.setSortDirection( null );
            }
        } else {
            $sortableCell = this.$el.find( '.sorted' );
            $sortableCell.removeClass( 'headerTemplate-sorted-' + direction + ' sorted-' + direction );
        }
    }

} );

InfinniUI.DataGridView = DataGridView;

//####app/controls/dataGrid/dataGridRow/dataGridRowControl.js
/**
 *
 * @constructor
 * @augments Control
 */
function DataGridRowControl() {
    _.superClass( DataGridRowControl, this );
}

_.inherit( DataGridRowControl, Control );

_.extend( DataGridRowControl.prototype, {

    /**
     *
     * @param handler
     */
    onToggle: function( handler ) {
        this.controlView.on( 'toggle', handler );
    },

    /**
     *
     * @returns {DataGridModel}
     */
    createControlModel: function() {
        return new DataGridRowModel();
    },

    /**
     *
     * @param model
     * @returns {DataGridRowView}
     */
    createControlView: function( model ) {
        return new DataGridRowView( { model: model } );
    }

} );

InfinniUI.DataGridRowControl = DataGridRowControl;

//####app/controls/dataGrid/dataGridRow/dataGridRowModel.js
/**
 *
 * @constructor
 */
var DataGridRowModel = ControlModel.extend( {
} );

InfinniUI.DataGridRowModel = DataGridRowModel;

//####app/controls/dataGrid/dataGridRow/dataGridRowView.js
/**
 *
 * @constructor
 */
var DataGridRowView = ControlView.extend( {

    className: 'pl-datagrid-row pl-datagrid-row_data',

    classNameSelected: 'info',

    tagName: 'tr',

    events: {},

    template: {
        singleSelect: InfinniUI.Template[ 'controls/dataGrid/dataGridRow/template/singleSelect.tpl.html' ],
        multiSelect: InfinniUI.Template[ 'controls/dataGrid/dataGridRow/template/multiSelect.tpl.html' ],
        dataCell: InfinniUI.Template[ 'controls/dataGrid/dataGridRow/template/dataCell.tpl.html' ]
    },

    UI: {
        toggleCell: '.pl-datagrid-row__cell_toggle',
        toggle: '.pl-datagrid-toggle',
        toggleControl: '.pl-datagrid-toggle input'
    },

    /**
     *
     */
    initialize: function() {
        ControlView.prototype.initialize.call( this );

        this.on( 'render', function() {
            this.ui.toggleCell.on( 'click', this.onToggleHandler.bind( this ) );
        }, this );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:toggle', this.updateToggle );
        this.listenTo( this.model, 'change:selected', this.updateSelected );
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );
        this.updateToggle();
        this.updateSelected();
        this.updateShowSelectors();
    },

    /**
     *
     */
    updateVerticalAlignment: function() {
    },

    /**
     *
     * @returns {DataGridRowView}
     */
    render: function() {
        this.prerenderingActions();

        var $el = this.$el;
        var templateName = this.model.get( 'multiSelect' ) ? 'multiSelect' : 'singleSelect';
        var template = this.template[ templateName ];

        $el.html( template() );
        this.bindUIElements();

        var cellElements = this.model.get( 'cellElements' );
        // var templateDataCell = this.template.dataCell();
        if( Array.isArray( cellElements ) ) {
            cellElements.forEach( function( cellElement, index ) {
                // @TODO remove hardcoded template when the memory leaks of dataBindings would have fixed
                // bug related to task JK-4516
                var $cell = $( '<td class="pl-datagrid-row__cell"></td>' );
                $cell.append( cellElement.render() );
                $el.append( $cell );
            } );
        }
        this.updateProperties();

        this.trigger( 'render' );

        this.postrenderingActions();
        return this;
    },

    /**
     *
     */
    updateShowSelectors: function() {
        var showSelectors = this.model.get( 'showSelectors' );

        this.ui.toggleCell.toggleClass( 'hidden', !showSelectors );
    },

    /**
     *
     */
    updateToggle: function() {
        var toggle = this.model.get( 'toggle' );

        this.ui.toggleControl.prop( 'checked', !!toggle );
    },

    /**
     *
     */
    updateSelected: function() {
        var selected = this.model.get( 'selected' );

        this.$el.toggleClass( this.classNameSelected, !!selected );
    },

    /**
     *
     */
    updateEnabled: function() {
        ControlView.prototype.updateEnabled.call( this );

        var enabled = this.model.get( 'enabled' );

        this.ui.toggleControl.attr( 'disabled', enabled ? null : 'disabled' );
    },

    /**
     *
     */
    onToggleHandler: function() {
        this.trigger( 'toggle' );
    }

} );

InfinniUI.DataGridRowView = DataGridRowView;

//####app/controls/dataNavigation/buttons/dataNavigationBaseButton.js
/**
 *
 * @constructor
 */
var DataNavigationBaseButtonModel = Backbone.Model.extend( {

    /**
     *
     */
    initialize: function() {
        this.on( 'change:parent', this.subscribeToParent, this );
    },

    /**
     *
     */
    subscribeToParent: function() {
    }

} );

InfinniUI.DataNavigationBaseButtonModel = DataNavigationBaseButtonModel;

/**
 *
 * @constructor
 */
var DataNavigationBaseButton = Backbone.View.extend( {

    tagName: 'li',

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        Backbone.View.prototype.initialize.call( this, options );
        this.once( 'render', function() {
            this.initHandlersForProperties();
        }, this );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
    },

    /**
     *
     */
    updateProperties: function() {
    },

    /**
     *
     * @returns {*}
     */
    getData: function() {
        return this.model.toJSON();
    },

    /**
     *
     * @param parent
     */
    setParent: function( parent ) {
        this.model.set( 'parent', parent );
        this.subscribeForParent( parent );
    },

    /**
     *
     * @returns {DataNavigationBaseButton}
     */
    render: function() {
        var template = this.template( this.getData() );

        this.$el.html( template );
        this.trigger( 'render' );
        this.updateProperties();

        return this;
    },

    /**
     *
     */
    subscribeForParent: function() {
    }

} );

InfinniUI.DataNavigationBaseButton = DataNavigationBaseButton;

//####app/controls/dataNavigation/buttons/dataNavigationNextButton.js
/**
 *
 * @constructor
 */
var DataNavigationNextButton = DataNavigationBaseButton.extend( {

    template: InfinniUI.Template[ 'controls/dataNavigation/buttons/template/next.tpl.html' ],

    events: {
        'click': 'onClickHandler'
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        this.model = new DataNavigationBaseButtonModel();
        DataNavigationBaseButton.prototype.initialize.call( this, options );
    },

    /**
     *
     */
    onClickHandler: function() {
        this.trigger( 'command', 'next' );
    }

} );

InfinniUI.DataNavigationNextButton = DataNavigationNextButton;

//####app/controls/dataNavigation/buttons/dataNavigationPageButton.js
/**
 *
 * @constructor
 */
var DataNavigationPageButton = DataNavigationBaseButton.extend( {

    template: InfinniUI.Template[ 'controls/dataNavigation/buttons/template/page.tpl.html' ],

    events: {
        'click': 'onClickHandler'
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        this.model = new DataNavigationPageButtonModel();
        DataNavigationBaseButton.prototype.initialize.call( this, options );
        this.model.set( 'pageNumber', options.pageNumber );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        DataNavigationBaseButton.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:isCurrent', this.updateIsCurrent );
    },

    /**
     *
     */
    updateProperties: function() {
        DataNavigationBaseButton.prototype.updateProperties.call( this );
        this.updateIsCurrent();
    },

    /**
     *
     */
    updateIsCurrent: function() {
        this.$el.toggleClass( 'active', this.model.get( 'isCurrent' ) );
    },

    /**
     *
     */
    onClickHandler: function() {
        this.trigger( 'command', 'page', { pageNumber: this.model.get( 'pageNumber' ) } );
    }

} );

InfinniUI.DataNavigationPageButton = DataNavigationPageButton;

/**
 *
 * @constructor
 */
var DataNavigationPageButtonModel = DataNavigationBaseButtonModel.extend( {

    defaults: {
        isCurrent: false
    },

    /**
     *
     */
    subscribeToParent: function() {
        DataNavigationBaseButtonModel.prototype.subscribeToParent.call( this );

        var parent = this.get( 'parent' );

        this.listenTo( parent.model, 'change:pageNumber', function() {
            this.updateIsCurrent();
        } );
        this.updateIsCurrent();
    },

    /**
     *
     */
    updateIsCurrent: function() {
        var parent = this.get( 'parent' );
        var isCurrent = parent.model.get( 'pageNumber' ) === this.get( 'pageNumber' );

        this.set( 'isCurrent', isCurrent );
    }

} );

InfinniUI.DataNavigationPageButtonModel = DataNavigationPageButtonModel;

//####app/controls/dataNavigation/buttons/dataNavigationPrevButton.js
/**
 *
 * @constructor
 */
var DataNavigationPrevButton = DataNavigationBaseButton.extend( {

    template: InfinniUI.Template[ 'controls/dataNavigation/buttons/template/prev.tpl.html' ],

    events: {
        'click': 'onClickHandler'
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        this.model = new DataNavigationBaseButtonModel();
        DataNavigationBaseButton.prototype.initialize.call( this, options );
    },

    /**
     *
     */
    onClickHandler: function() {
        this.trigger( 'command', 'prev' );
    }

} );

InfinniUI.DataNavigationPrevButton = DataNavigationPrevButton;

//####app/controls/dataNavigation/dataNavigationButtonFactory.js
/**
 *
 * @param dataNavigation
 * @constructor
 */
function DataNavigationButtonFactory( dataNavigation ) {
    this._dataNavigation = dataNavigation;
}

DataNavigationButtonFactory.prototype.buttons = {
    'prev': DataNavigationPrevButton,
    'page': DataNavigationPageButton,
    'next': DataNavigationNextButton
};

/**
 *
 * @param type
 * @param options
 * @returns {*}
 */
DataNavigationButtonFactory.prototype.createButton = function( type, options ) {
    var buttonConstructor = this.buttons[ type ];

    if ( typeof buttonConstructor !== 'function' ) {
        console.error( 'Wrong button type: ' + type );
        return;
    }

    var button = new buttonConstructor( options );
    button.setParent( this._dataNavigation );

    return button;
};

InfinniUI.DataNavigationButtonFactory = DataNavigationButtonFactory;

//####app/controls/dataNavigation/dataNavigationControl.js
/**
 *
 * @param parent
 * @constructor
 */
function DataNavigationControl( parent ) {
    _.superClass( DataNavigationControl, this, parent );
}

_.inherit( DataNavigationControl, Control );

_.extend( DataNavigationControl.prototype, {

    /**
     *
     * @returns {DataNavigationModel}
     */
    createControlModel: function() {
        return new DataNavigationModel();
    },

    /**
     *
     * @param model
     * @returns {DataNavigationView}
     */
    createControlView: function( model ) {
        return new DataNavigationView( { model: model } );
    },

    /**
     *
     * @param handler
     */
    onPageNumberChanged: function( handler ) {
        this.controlModel.onPageNumberChanged( handler );
    },

    /**
     *
     * @param handler
     */
    onPageSizeChanged: function( handler ) {
        this.controlModel.onPageSizeChanged( handler );
    }

} );

InfinniUI.DataNavigationControl = DataNavigationControl;

//####app/controls/dataNavigation/dataNavigationModel.js
/**
 *
 * @constructor
 */
var DataNavigationModel = ControlModel.extend( {

    defaults: _.defaults( {
        pageNumber: 0,
        pageStart: 0,
        _buttonsCount: 5,
        _buttonsTemplate: ['prev', 'page', 'next'],
        pageCount: null,
        isDataReady: false
    },
        ControlModel.prototype.defaults
    ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
        this.set( 'availablePageSizes', new Collection() );
        this.on( 'change:pageNumber', this.updatePageStart, this );
        this.on( 'change:pageSize', this.updatePageSize, this );
    },

    /**
     *
     */
    updatePageStart: function() {
        var pageNumber = this.get( 'pageNumber' );
        var pageStart = this.get( 'pageStart' );
        var buttonsCount = this.get( '_buttonsCount' );

        if ( pageNumber + 1 >= pageStart + buttonsCount ) {
            //Выбрана последняя страница по кнопкам навигации. переместить ее в центр
            pageStart = pageStart + Math.floor( buttonsCount / 2 );
        } else if ( pageNumber === pageStart ) {
            //Сдвинуть кнопки навигации вправо, чтобы выбранная страница была в центре
            pageStart = Math.max( 0, pageStart - Math.floor( buttonsCount / 2 ) );
        } else if ( pageNumber + 1 < pageStart ) {
            pageStart = Math.max( 0, pageNumber - 1 );
        }
        this.set( 'pageStart', pageStart );
    },

    /**
     *
     */
    updatePageSize: function() {
        //сьрос навигации
        this.set( 'pageNumber', 0 );
    },

    /**
     *
     */
    nextPage: function() {
        var pageNumber = this.get( 'pageNumber' );

        this.set( 'pageNumber', pageNumber + 1 );
    },

    /**
     *
     */
    prevPage: function() {
        var pageNumber = this.get( 'pageNumber' );

        if ( pageNumber > 0 ) {
            this.set( 'pageNumber', pageNumber - 1 );
        }
    },

    /**
     *
     * @param handler
     */
    onPageNumberChanged: function( handler ) {
        this.on( 'change:pageNumber', function( model, value ) {
            handler.call( null, { value: value } );
        } );
    },

    /**
     *
     * @param handler
     */
    onPageSizeChanged: function( handler ) {
        this.on( 'change:pageSize', function( model, value ) {
            handler.call( null, { value: value } );
        } );
    }

} );

InfinniUI.DataNavigationModel = DataNavigationModel;

//####app/controls/dataNavigation/dataNavigationView.js
/**
 *
 * @constructor
 */
var DataNavigationView = ControlView.extend( {

    template: InfinniUI.Template[ 'controls/dataNavigation/template/dataNavigation.tpl.html' ],

    className: 'pl-data-navigation',

    UI: {
        buttons: 'ul',
        sizes: '.pl-page-size'
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ControlView.prototype.initialize.call( this, options );
        this._childViews = [];
        this.buttonsFactory = new DataNavigationButtonFactory( this );
        this._pageSizes = new DataNavigationPageSizes();
        this._pageSizes.setParent( this );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:pageStart', this.updateButtons );
        this.listenTo( this.model, 'change:pageCount', this.updateButtons );
        this.listenTo( this.model, 'change:isDataReady', this.updateButtons );
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );
        this.updateButtons();
    },

    /**
     *
     * @returns {DataNavigationView}
     */
    render: function() {
        this.prerenderingActions();

        this.renderTemplate( this.template );
        this.updateProperties();
        this.trigger( 'render' );
        this.renderPageSizes();
        this.postrenderingActions();

        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    renderPageSizes: function() {
        this.ui.sizes.append( this._pageSizes.render().$el );
    },

    /**
     *
     */
    renderButtons: function() {
        var model = this.model;
        var template = model.get( '_buttonsTemplate' );
        var buttonsCount = model.get( '_buttonsCount' );
        var pageCount = model.get( 'pageCount' );
        var pageNumber = model.get( 'pageNumber' );
        var pageStart = model.get( 'pageStart' );
        var isDataReady = model.get( 'isDataReady' );
        var buttons;
        var nowManyElementsRemove;

        this._removeChildViews();

        if( !isDataReady ) {
            return;
        }

        var buttonsFactory = this.buttonsFactory;

        buttons = template.reduce( function( buttons, buttonType ) {
            var button;

            if( buttonType === 'page' ) {
                for( var i = 0; i < buttonsCount; i = i + 1 ) {
                    button = buttonsFactory.createButton( buttonType, { pageNumber: pageStart + i } );
                    buttons.push( button );
                }
            } else {
                button = buttonsFactory.createButton( buttonType );
                buttons.push( button );
            }

            return buttons;
        }, [] );

        if( typeof pageCount == 'number' && pageStart + buttonsCount >= pageCount ) {
            nowManyElementsRemove = pageStart + buttonsCount - pageCount + 1;

            if( pageCount == 0 ) {
                nowManyElementsRemove += 1;
            }

            buttons.splice( buttons.length - nowManyElementsRemove, 100 );
        }

        var $buttons = buttons.map( function( button ) {
            this.listenTo( button, 'command', this.onCommandHandler );
            this._appendChildView( button );
            return button.render().$el;
        }, this );

        this.ui.buttons.append( $buttons );
    },

    /**
     *
     */
    updateButtons: function() {
        this.renderButtons();
    },

    /**
     *
     * @param name
     * @param options
     */
    onCommandHandler: function( name, options ) {
        switch( name ) {
            case 'prev':
                this.model.prevPage();
                break;
            case 'next':
                this.model.nextPage();
                break;
            case 'page':
                this.model.set( 'pageNumber', options.pageNumber );
                break;
            default:
                break;
        }
    },

    /**
     *
     * @private
     */
    _removeChildViews: function() {
        this._childViews.forEach( function( view ) {
            this.stopListening( view );
            view.remove();
        }, this );
        this._childViews.length = 0;
    },

    /**
     *
     * @param view
     * @private
     */
    _appendChildView: function( view ) {
        this._childViews.push( view );
    }

} );

InfinniUI.DataNavigationView = DataNavigationView;

//####app/controls/dataNavigation/pageSizes/dataNavigationPageSizes.js
/**
 *
 * @constructor
 */
var DataNavigationPageSizes = Backbone.View.extend( {

    className: 'btn-group',

    template: InfinniUI.Template[ 'controls/dataNavigation/pageSizes/template/pageSizes.tpl.html' ],

    events: {
        'click button': 'onClickButtonHandler'
    },

    /**
     *
     * @param parent
     */
    setParent: function( parent ) {
        this.model = parent.model;
        var collection = this.model.get( 'availablePageSizes' );
        collection.onChange( this.onAvailablePageSizesChanged.bind( this ) );
        this.model.on( 'change:pageSize', this.renderButtons, this );
    },

    /**
     *
     * @returns {DataNavigationPageSizes}
     */
    render: function() {
        this.renderButtons();
        return this;
    },

    /**
     *
     */
    renderButtons: function() {
        var collection = this.model.get( 'availablePageSizes' );
        var pageSize = this.model.get( 'pageSize' );
        var html = collection.toArray().map( function( size ) {
            return this.template( { size: size, active: pageSize === size } );
        }, this );

        this.$el.html( html );
    },

    /**
     *
     */
    onAvailablePageSizesChanged: function() {
        this.renderButtons();
    },

    /**
     *
     * @param event
     */
    onClickButtonHandler: function( event ) {
        var $el = $( event.target );
        var pageSize = parseInt( $el.attr( 'data-size' ), 10 );

        this.model.set( 'pageSize', pageSize );
    }

} );

InfinniUI.DataNavigationPageSizes = DataNavigationPageSizes;

//####app/controls/label/commonView/labelView.js
/**
 * @constructor
 * @augments ControlView
 * @mixes editorBaseViewMixin
 */
var CommonLabelView = ControlView.extend( _.extend( {}, editorBaseViewMixin, {

    className: 'pl-label',

    template: InfinniUI.Template[ 'controls/label/commonView/template/label.tpl.html' ],

    UI: _.extend( {}, editorBaseViewMixin.UI, {
        control: '.label-control'
    } ),

    /**
     *
     */
    initialize: function() {
        ControlView.prototype.initialize.apply( this );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );
        editorBaseViewMixin.initHandlersForProperties.call( this );

        this.listenTo( this.model, 'change:displayFormat', this.updateDisplayFormat );
        this.listenTo( this.model, 'change:textWrapping', this.updateTextWrapping );
        this.listenTo( this.model, 'change:textTrimming', this.updateTextTrimming );
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );
        editorBaseViewMixin.updateProperties.call( this );

        this.updateDisplayFormat();
        this.updateTextWrapping();
        this.updateTextTrimming();
    },

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );

        if( focusable ) {
            this.ui.control.attr( 'tabindex', 0 );
        } else {
            this.ui.control.removeAttr( 'tabindex' );
        }
    },

    /**
     *
     */
    updateValue: function() {
        var escapeHtml = this.model.get( 'escapeHtml' );
        var setContent = escapeHtml ? 'text' : 'html';
        var textForLabel = this.getLabelText();
        var $label = this.getLabelElement();

        $label[ setContent ]( textForLabel );
        var title = String( textForLabel );
        $label.attr( 'title', title.replace( /<\/?[^>]+>/g, '' ) ); //strip html tags
    },

    /**
     *
     */
    updateDisplayFormat: function() {
        this.updateValue();
    },

    /**
     *
     */
    updateTextWrapping: function() {
        var textWrapping = this.model.get( 'textWrapping' );
        this.getLabelElement().toggleClass( 'pl-text-wrapping', textWrapping );
    },

    /**
     *
     */
    updateTextTrimming: function() {
        var textTrimming = this.model.get( 'textTrimming' );
        this.getLabelElement().toggleClass( 'pl-text-trimming', textTrimming );
    },

    /**
     *
     */
    updateText: function() {
        this.updateValue();
    },

    /**
     * @returns {*}
     */
    getData: function() {
        return _.extend(
            {},
            ControlView.prototype.getData.call( this ),
            editorBaseViewMixin.getData.call( this ),
            {
                text: this.getLabelText()
            }
        );
    },

    /**
     *
     * @returns {CommonLabelView}
     */
    render: function() {
        this.prerenderingActions();
        this.renderTemplate( this.template );

        this.updateProperties();

        this.trigger( 'render' );
        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     * @returns {*}
     */
    getLabelText: function() {
        var model = this.model;
        var value = model.get( 'value' );
        var text;
        var format = model.get( 'displayFormat' );

        if( typeof value !== 'undefined' && value !== null ) {
            text = typeof format === 'function' ? format( null, { value: value } ) : value;
        } else {
            text = this.model.get( 'text' );
            if( typeof text === 'undefined' || text === null ) {
                text = '';
            }
        }

        return text;
    },

    /**
     * @returns {*}
     */
    getLabelElement: function() {
        return this.ui.control;
    }

} ) );

InfinniUI.ObjectUtils.setPropertyValueDirect( InfinniUI, 'viewModes.Label.common', CommonLabelView );

//####app/controls/label/label.js
/**
 * @augments Control
 * @param viewMode
 * @constructor
 * @mixes editorBaseControlMixin
 */
var LabelControl = function( viewMode ) {
    _.superClass( LabelControl, this, viewMode );
    this.initialize_editorBaseControl();
};

_.inherit( LabelControl, Control );

_.extend( LabelControl.prototype, {

    /**
     * @returns {LabelModel}
     */
    createControlModel: function() {
        return new LabelModel();
    },

    /**
     * @returns {*}
     * @param model
     * @param viewMode
     */
    createControlView: function( model, viewMode ) {
        if( !viewMode || ! ( viewMode in InfinniUI.viewModes.Label ) ) {
            viewMode = 'simple';
        }

        var ViewClass = InfinniUI.viewModes.Label[ viewMode ];

        return new ViewClass( { model: model } );
    },

    /**
     * @returns {*}
     */
    getDisplayValue: function() {
        return this.controlView.getLabelText();
    }

}, editorBaseControlMixin );

InfinniUI.LabelControl = LabelControl;

//####app/controls/label/labelModel.js
/**
 * @constructor
 * @augments ControlModel
 * @mixes editorBaseModelMixin
 */
var LabelModel = ControlModel.extend( _.extend( {

    defaults: _.defaults( {
        horizontalTextAlignment: 'Left',
        textWrapping: true,
        textTrimming: true,
        escapeHtml: true,
        focusable: false
    }, ControlModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
        this.initialize_editorBaseModel();
    }

}, editorBaseModelMixin ) );

InfinniUI.LabelModel = LabelModel;

//####app/controls/label/simpleView/labelView.js
/**
 * @constructor
 * @augments ControlView
 */
var SimpleLabelView = CommonLabelView.extend( {

    tagName: 'span',

    template: function() {
        return '';
    },

    /**
     * @mixes editorBaseViewMixin
     */
    UI: _.extend( {}, editorBaseViewMixin.UI, {
    } ),

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );

        if ( focusable ) {
            this.$el.attr( 'tabindex', 0 );
        } else {
            this.$el.removeAttr( 'tabindex' );
        }
    },

    /**
     *
     * @returns {*}
     */
    getLabelElement: function() {
        return this.$el;
    }

} );

InfinniUI.ObjectUtils.setPropertyValueDirect( InfinniUI, 'viewModes.Label.simple', SimpleLabelView );

//####app/controls/listBox/baseView/listBoxView.js
/**
 * @constructor
 * @augments ListEditorBaseView
 */
var BaseListBoxView = ListEditorBaseView.extend( {

    template: {
        plain: InfinniUI.Template[ 'controls/listBox/baseView/template/listBox.tpl.html' ],
        grouped: InfinniUI.Template[ 'controls/listBox/baseView/template/listBoxGrouped.tpl.html' ]
    },

    className: 'pl-listbox',

    events: {
        'change .pl-listbox-input': 'onChangeHandler'
    },

    UI: _.defaults( {
        items: '.pl-listbox-i',
        checkingInputs: '.pl-listbox-input input'
    }, ListEditorBaseView.prototype.UI ),

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        //@TODO Реализовать обработку значений по умолчанию!
        ListEditorBaseView.prototype.initialize.call( this, options );
    },

    /**
     *
     */
    updateGrouping: function() {
        var groupValueSelector = this.model.get( 'groupValueSelector' );
        var isGrouped = groupValueSelector !== null && typeof groupValueSelector !== 'undefined';

        if( isGrouped ) {
            this.strategy = new ListBoxViewGroupStrategy( this );
        } else {
            this.strategy = new ListBoxViewPlainStrategy( this );
        }
    },

    /**
     *
     */
    updateValue: function() {
        this.ui.items.removeClass( 'pl-listbox-i-chosen' );
        this.ui.checkingInputs.prop( 'checked', false );

        var value = this.model.get( 'value' );
        var choosingItem, $choosingItem;

        if( !this.isMultiselect() && typeof value !== 'undefined' && value !== null ) {
            value = [ value ];
        }

        if( Array.isArray( value ) ) {
            for( var i = 0, ii = value.length; i < ii; i++ ) {
                choosingItem = this.model.itemByValue( value[ i ] );
                $choosingItem = this._getElementByItem( choosingItem );

                if( $choosingItem ) {
                    $choosingItem.addClass( 'pl-listbox-i-chosen' );
                    $choosingItem.find( '.pl-listbox-input input' ).prop( 'checked', true );
                }
            }
        }
    },

    /**
     *
     * @param ignoreWasRendered
     */
    updateSelectedItem: function( ignoreWasRendered ) {
        if( !this.wasRendered && ignoreWasRendered != true ) {
            return;
        }

        this.ui.items.removeClass( 'pl-listbox-i-selected' );

        var selectedItem = this.model.get( 'selectedItem' );
        var $selectedItem = this._getElementByItem( selectedItem );

        if( $selectedItem && !$selectedItem.hasClass( 'pl-disabled-list-item' ) ) {
            $selectedItem.addClass( 'pl-listbox-i-selected' );
        }
    },

    /**
     *
     * @returns {BaseListBoxView}
     */
    render: function() {
        this.prerenderingActions();

        var preparedItems = this.strategy.prepareItemsForRendering();
        var template = this.strategy.getTemplate();

        this.removeChildElements();

        this.$el.html( template( preparedItems ) );
        this.bindUIElements();

        this.strategy.appendItemsContent( preparedItems );

        this.updateProperties();

        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     * @returns {*}
     */
    getItems: function() {
        return this.model.get( 'items' );
    },

    /**
     * @returns {*}
     */
    getItemTemplate: function() {
        return this.model.get( 'itemTemplate' );
    },

    /**
     * @returns {*}
     */
    getGroupValueSelector: function() {
        return this.model.get( 'groupValueSelector' );
    },

    /**
     * @returns {*}
     */
    isMultiselect: function() {
        return this.model.get( 'multiSelect' );
    },

    /**
     * @returns {*}
     */
    isFocusable: function() {
        return this.model.get( 'focusable' );
    },

    /**
     * @returns {*}
     */
    getGroupItemTemplate: function() {
        return this.model.get( 'groupItemTemplate' );
    },

    /**
     *
     */
    onChangeHandler: function() {
        var $checked = this.ui.checkingInputs.filter( ':checked' ).parent().parent();
        var valueForModel = null;
        var model = this.model;
        var val;

        if( this.isMultiselect() ) {
            valueForModel = [];

            $checked.each( function( i, el ) {
                val = $( el ).data( 'pl-data-item' );
                valueForModel.push( model.valueByItem( val ) );
            } );

        } else {
            if( $checked.length > 0 ) {
                valueForModel = model.valueByItem( $checked.data( 'pl-data-item' ) );
            }
        }

        this.model.set( 'value', valueForModel );
    },

    /**
     *
     */
    updateDisabledItem: function() {
        var model = this.model;
        var enabled = model.get( 'enabled' );
        var disabledItemCondition = model.get( 'disabledItemCondition' );

        this.ui.items.removeClass( 'pl-disabled-list-item' );
        this.ui.checkingInputs.attr( 'disabled', null );

        if( !enabled ) {
            disabledItemCondition = function() {
                return true;
            };
        }

        if( disabledItemCondition !== null && typeof disabledItemCondition !== 'undefined' ) {
            var that = this;

            this.ui.items.each( function( i, el ) {
                var $el = $( el );
                var item = $el.data( 'pl-data-item' );
                var isDisabled = disabledItemCondition( undefined, { value: item } );

                if( isDisabled || !enabled ) {
                    if( $el.hasClass( 'pl-listbox-i-selected' ) ) {
                        that.model.set( 'selectedItem', null );
                    }
                    $el.toggleClass( 'pl-disabled-list-item', true );
                    $el.find( 'input' ).attr( 'disabled', 'disabled' );
                    $el.find( 'button' ).attr( 'disabled', 'disabled' );
                }
            } );
        }
    },

    /**
     *
     * @param item
     * @returns {jQuery|HTMLElement}
     * @private
     */
    _getElementByItem: function( item ) {
        var element = _.find( this.ui.items, function( listboxItem ) {
            return $( listboxItem ).data( 'pl-data-item' ) == item;
        } );

        return $( element );
    }

} );

InfinniUI.ObjectUtils.setPropertyValueDirect( InfinniUI, 'viewModes.ListBox.base', BaseListBoxView );

//####app/controls/listBox/baseView/viewGroupStrategy.js
/**
 * @param listbox
 * @constructor
 */
function ListBoxViewGroupStrategy( listbox ) {
    this.listbox = listbox;
}

_.extend( ListBoxViewGroupStrategy.prototype, {

    /**
     *
     * @returns {*}
     */
    prepareItemsForRendering: function() {
        var items = this.listbox.getItems();
        var inputName = 'listbox-' + guid();
        var result = {
            isMultiselect: this.listbox.isMultiselect(),
            focusable: this.listbox.isFocusable(),
            inputName: inputName,
            groups: []
        };
        var groups = {};
        var groupingFunction = this.listbox.getGroupValueSelector();

        items.forEach( function( item, index ) {
            var groupKey = groupingFunction( undefined, { value: item } );

            if( !( groupKey in groups ) ) {
                groups[ groupKey ] = [];
            }

            groups[ groupKey ].push( { index: index, item: item } );
        } );

        for( var k in groups ) {
            result.groups.push( {
                items: groups[ k ]
            } );
        }

        return result;
    },

    /**
     *
     * @returns {*}
     */
    getTemplate: function() {
        return this.listbox.template.grouped;
    },

    /**
     *
     * @param preparedItems
     */
    appendItemsContent: function( preparedItems ) {
        var $listbox = this.listbox.$el;
        var itemTemplate = this.listbox.getItemTemplate();
        var groupTitleTemplate = this.listbox.getGroupItemTemplate();
        var groups = preparedItems.groups;
        var listbox = this.listbox;
        var item, itemEl, titleEl, $el, group;

        $listbox.find( '.pl-listbox-group-i' ).each( function( i, el ) {
            group = groups[ i ];
            titleEl = groupTitleTemplate( undefined, { index: group.items[ 0 ].index, item: group } );
            listbox.addChildElement( titleEl );

            $el = $( el );
            $el.find( '.pl-listbox-group-title' ).append( titleEl.render() );

            $el.find( '.pl-listbox-body' ).each( function( j, bodyEl ) {
                item = group.items[ j ].item;
                itemEl = itemTemplate( undefined, { index: group.items[ j ].index, item: item } );

                listbox.addChildElement( itemEl );

                $( bodyEl ).append( itemEl.render() );
                $( bodyEl ).parent()
                    .data( 'pl-data-item', item );
            } );
        } );
    }

} );

InfinniUI.ListBoxViewGroupStrategy = ListBoxViewGroupStrategy;

//####app/controls/listBox/baseView/viewPlainStrategy.js
/**
 *
 * @param listbox
 * @constructor
 */
function ListBoxViewPlainStrategy( listbox ) {
    this.listbox = listbox;
}

_.extend( ListBoxViewPlainStrategy.prototype, {

    /**
     *
     * @returns {{isMultiselect: *, focusable: *, inputName: string, items}}
     */
    prepareItemsForRendering: function() {
        var items = this.listbox.getItems();
        var inputName = 'listbox-' + guid();
        var result = {
            isMultiselect: this.listbox.isMultiselect(),
            focusable: this.listbox.isFocusable(),
            inputName: inputName,
            items: items.toArray()
        };

        return result;
    },

    /**
     *
     * @returns {*}
     */
    getTemplate: function() {
        return this.listbox.template.plain;
    },

    /**
     *
     * @param preparedItems
     */
    appendItemsContent: function( preparedItems ) {
        var $listbox = this.listbox.$el;
        var itemTemplate = this.listbox.getItemTemplate();
        var items = preparedItems.items;
        var listbox = this.listbox;
        var itemEl, $el;

        $listbox.find( '.pl-listbox-body' ).each( function( i, el ) {
            $el = $( el );
            itemEl = itemTemplate( undefined, { index: i, item: items[ i ] } );
            listbox.addChildElement( itemEl );
            $el.append( itemEl.render() );

            $el.parent().data( 'pl-data-item', items[ i ] );
        } );
    }

} );

InfinniUI.ListBoxViewPlainStrategy = ListBoxViewPlainStrategy;

//####app/controls/listBox/listBoxControl.js
/**
 * @augments ListEditorBaseControl
 * @param viewMode
 * @constructor
 */
function ListBoxControl( viewMode ) {
    _.superClass( ListBoxControl, this, viewMode );
}

_.inherit( ListBoxControl, ListEditorBaseControl );

_.extend( ListBoxControl.prototype, {

    /**
     * @returns {ListBoxModel}
     */
    createControlModel: function() {
        return new ListBoxModel();
    },

    /**
     * @returns {*}
     * @param model
     * @param viewMode
     */
    createControlView: function( model, viewMode ) {
        if( !viewMode || ! viewMode in InfinniUI.viewModes.ListBox ) {
            viewMode = 'common';
        }

        var ViewClass = InfinniUI.viewModes.ListBox[ viewMode ];

        return new ViewClass( { model: model } );
    }

} );

InfinniUI.ListBoxControl = ListBoxControl;

//####app/controls/listBox/listBoxModel.js
/**
 * @constructor
 * @augments ListEditorBaseModel
 */
var ListBoxModel = ListEditorBaseModel.extend( {

    /**
     *
     */
    initialize: function() {
        ListEditorBaseModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.ListBoxModel = ListBoxModel;

//####app/controls/listBox/checkingView/listBoxView.js
/**
 * @constructor
 * @augments BaseListBoxView
 */
var CheckingListBoxView = BaseListBoxView.extend( {

    className: 'pl-listbox',

    template: {
        plain: InfinniUI.Template[ 'controls/listBox/checkingView/template/listBox.tpl.html' ],
        grouped: InfinniUI.Template[ 'controls/listBox/checkingView/template/listBoxGrouped.tpl.html' ]
    },

    events: _.extend( {

    }, BaseListBoxView.prototype.events ),

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        BaseListBoxView.prototype.initialize.call( this, options );
        this.initDomHandlers();
    },

    /**
     *
     */
    updateEnabled: function() {
        ListEditorBaseView.prototype.updateEnabled.call( this );

        var enabled = this.model.get( 'enabled' );

        this.ui.checkingInputs.attr( 'disabled', !enabled );
    },

    /**
     *
     */
    initDomHandlers: function() {
        var $listBox = this.$el;
        var that = this;

        $listBox.get( 0 ).addEventListener( 'click', function( e ) {
            e = $.event.fix( e );
            var $el = $( e.target );
            var $currentListItem, item, isDisabledItem;

            if ( !that.model.get( 'enabled' ) ) {
                return;
            }

            while( $el.get( 0 ) != $listBox.get( 0 ) ) {
                if( $el.hasClass( 'pl-listbox-i' ) ) {
                    $currentListItem = $el;
                }

                $el = $el.parent();
            }

            if( $currentListItem && $currentListItem.length > 0 ) {
                item = $currentListItem.data( 'pl-data-item' );
                isDisabledItem = that.model.isDisabledItem( item );

                if( !isDisabledItem ) {
                    that.model.toggleValue( item );
                }

                that.model.set( 'selectedItem', item );
            }

        }, true );
    }

} );

InfinniUI.ObjectUtils.setPropertyValueDirect( InfinniUI, 'viewModes.ListBox.checking', CheckingListBoxView );

//####app/controls/listBox/commonView/listBoxView.js
/**
 * @constructor
 * @augments BaseListBoxView
 */
var CommonListBoxView = BaseListBoxView.extend( {

    className: 'pl-listbox pl-listbox-common-mode',

    events: _.extend( {}, BaseListBoxView.prototype.events ),

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        BaseListBoxView.prototype.initialize.call( this, options );
        this.initDomHandlers();
    },

    /**
     *
     */
    initDomHandlers: function() {
        var $listBox = this.$el;
        var that = this;

        $listBox.get( 0 ).addEventListener( 'click', function( e ) {
            e = $.event.fix( e );
            var $el = $( e.target );
            var $currentListItem, item, isDisabledItem;

            while( $el.get( 0 ) != $listBox.get( 0 ) ) {
                if( $el.hasClass( 'pl-listbox-i' ) ) {
                    $currentListItem = $el;
                }

                $el = $el.parent();
            }

            if( $currentListItem.length > 0 ) {
                item = $currentListItem.data( 'pl-data-item' );
                isDisabledItem = that.model.isDisabledItem( item );

                if( !isDisabledItem ) {
                    that.model.toggleValue( item );
                }

                that.model.set( 'selectedItem', item );
            }
        }, true );
    }

} );

InfinniUI.ObjectUtils.setPropertyValueDirect( InfinniUI, 'viewModes.ListBox.common', CommonListBoxView );

//####app/controls/popupButton/commonView/popupButtonView.js
/**
 * @constructor
 * @augments ContainerView
 */
var CommonPopupButtonView = ContainerView.extend( {

    className: 'pl-popup-button',

    template: InfinniUI.Template[ 'controls/popupButton/commonView/template/popupButton.tpl.html' ],
    dropdownTemplate: InfinniUI.Template[ 'controls/popupButton/commonView/template/popupButton.dropdown.tpl.html' ],

    events: {
        'click': 'onClickHandler'
    },

    UI: {
        button: '.pl-popup-button__button',
        grip: '.pl-popup-button__grip'
    },

    /**
     *
     */
    updateProperties: function() {
        ContainerView.prototype.updateProperties.call( this );

        this.updateContent();
    },

    updateContent: CommonButtonView.prototype.updateContent,

    updateText: CommonButtonView.prototype.updateText,

    /**
     *
     */
    updateBackground: function() {
        var styleValue = this.model.get( 'background' );
        var newBackground = this.valueToBackgroundClassName( styleValue );
        var oldBackground = this.valueToBackgroundClassName( this.currentBackground );

        if( newBackground !== '' ) {
            this.ui.button.removeClass( oldBackground ).addClass( newBackground );
            this.ui.grip.removeClass( oldBackground ).addClass( newBackground );
        }

        this.currentBackground = styleValue;
    },

    /**
     *
     */
    getButtonElement: function() {
        return this.ui.button;
    },

    /**
     *
     * @returns {CommonPopupButtonView}
     */
    render: function() {
        this.prerenderingActions();

        var items = this.model.get( 'items' ).toArray();
        var template = this.template;

        this.removeChildElements();

        this.$el.html( template( { items: items } ) );
        this.bindUIElements();

        this.$dropdown = this.renderDropdown();

        this.$dropdown.on( 'click', this.close.bind( this ) );

        this.updateProperties();

        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     * @returns {jQuery|HTMLElement}
     */
    renderDropdown: function() {
        var template = this.dropdownTemplate;
        var items = this.model.get( 'items' ).toArray();
        var $result = $( template( { items: items } ) );

        this.appendItemsContent( $result, items );

        return $result;
    },

    /**
     *
     * @param $dropdown
     * @param items
     */
    appendItemsContent: function( $dropdown, items ) {
        var that = this;
        var itemTemplate = this.model.get( 'itemTemplate' );
        var itemEl, $el;

        $dropdown.find( '.pl-popup-button__item' ).each( function( i, el ) {
            $el = $( el );
            itemEl = itemTemplate( undefined, { index: i, item: items[ i ] } );
            that.addChildElement( itemEl );
            $el.append( itemEl.render() );
        } );
    },

    /**
     *
     */
    open: function() {
        var that = this;

        $( 'body' ).append( this.$dropdown );

        this.$dropdown.addClass( 'open' );
        this.alignDropdown();

        var $ignoredElements = this.$dropdown.add( this.ui.grip );
    },

    /**
     *
     */
    close: function() {
        this.$dropdown.removeClass( 'open' );
        this.$dropdown.detach();
    },

    /**
     *
     */
    alignDropdown: function() {
        var offset = this.$el.offset();
        var $elHeight = this.$el.height();
        var $elWidth = this.$el.width();
        var dropdownList = this.$dropdown.find( '.pl-popup-button__items' )[ 0 ];
        var $dropdownHeight = dropdownList.offsetHeight;
        var $dropdownWidth = dropdownList.offsetWidth;
        var left = offset.left;
        var top = offset.top + $elHeight;

        if( ( offset.left + $dropdownWidth ) >= window.innerWidth ) {
            left += ( $elWidth - $dropdownWidth );
        }

        if( ( top + $dropdownHeight ) >= window.innerHeight ) {
            top -= ( $elHeight + $dropdownHeight + 2 );
        }

        this.$dropdown.offset( {
            top: top,
            left: left
        } );
    },

    /**
     *
     */
    toggle: function() {
        if( !this.$dropdown.hasClass( 'open' ) ) {
            this.open();
        }else{
            this.close();
        }
    },

    /**
     *
     */
    onClickHandler: function() {
        this.toggle();
    },

    /**
     *
     */
    updateGrouping: function() {
    }

} );

InfinniUI.ObjectUtils.setPropertyValueDirect( InfinniUI, 'viewModes.PopupButton.common', CommonPopupButtonView );

//####app/controls/popupButton/popupButtonControl.js
/**
 * @augments ContainerControl
 * @param viewMode
 * @constructor
 * @mixes buttonControlMixin
 */
function PopupButtonControl( viewMode ) {
    _.superClass( PopupButtonControl, this, viewMode );
}

_.inherit( PopupButtonControl, ContainerControl );

_.extend( PopupButtonControl.prototype, {

    /**
     * @returns {PopupButtonModel}
     */
    createControlModel: function() {
        return new PopupButtonModel();
    },

    /**
     * @returns {*}
     * @param model
     * @param viewMode
     */
    createControlView: function( model, viewMode ) {
        if( !viewMode || !viewMode in InfinniUI.viewModes.PopupButton ) {
            viewMode = 'common';
        }

        var ViewClass = InfinniUI.viewModes.PopupButton[ viewMode ];

        return new ViewClass( { model: model } );
    }

}, buttonControlMixin );

InfinniUI.PopupButtonControl = PopupButtonControl;

//####app/controls/popupButton/popupButtonModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var PopupButtonModel = ContainerModel.extend( {
} );

InfinniUI.PopupButtonModel = PopupButtonModel;

//####app/controls/popupButton/forMenuView/popupButtonView.js
/**
 * @constructor
 * @augments CommonPopupButtonView
 */
var ForMenuPopupButtonView = CommonPopupButtonView.extend( {

    tagName: 'a',

    className: 'pl-popup-button',

    attributes: {
        href: 'javascript:;'
    },

    template: InfinniUI.Template[ 'controls/popupButton/forMenuView/template/popupButton.tpl.html' ],

    dropdownTemplate: InfinniUI.Template[ 'controls/popupButton/commonView/template/popupButton.dropdown.tpl.html' ],

    events: {
        'click': 'onClickGripHandler'
        //'click .pl-popup-button__button': 'onClickHandler'
    },

    UI: {
        button: '.pl-popup-button__button',
        grip: '.pl-popup-button__grip'
    },

    /**
     *
     */
    updateProperties: function() {
        ContainerView.prototype.updateProperties.call( this );

        this.updateContent();
    },

    updateContent: CommonButtonView.prototype.updateContent,

    updateText: CommonButtonView.prototype.updateText,

    /**
     *
     */
    updateHorizontalAlignment: function() {
        var horizontalAlignment = this.model.get( 'horizontalAlignment' );
        var that = this;
        var $el;

        this.whenReady(
            function() {
                $el = that.$el.parent().parent();
                return $el.length > 0;
            },

            function() {
                if( horizontalAlignment == 'Right' ) {
                    $el
                        .addClass( 'pull-right' );
                } else {
                    $el
                        .removeClass( 'pull-right' );
                }
            }
        );
    },

    /**
     *
     */
    updateBackground: function() {
        var styleValue = this.model.get( 'background' );
        var newBackground = this.valueToBackgroundClassName( styleValue );
        var oldBackground = this.valueToBackgroundClassName( this.currentBackground );

        if( newBackground !== '' ) {
            this.$el.removeClass( oldBackground ).addClass( newBackground );
        }

        this.currentBackground = styleValue;
    },

    /**
     * @returns {jQuery}
     */
    getButtonElement: function() {
        return this.ui.button;
    },

    /**
     *
     * @returns {ForMenuPopupButtonView}
     */
    render: function() {
        this.prerenderingActions();

        var items = this.model.get( 'items' ).toArray();
        var template = this.template;

        this.removeChildElements();

        this.$el.html( template( { items: items } ) );
        this.bindUIElements();

        this.$dropdown = this.renderDropdown();

        this.updateProperties();

        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     * @returns {jQuery|HTMLElement}
     */
    renderDropdown: function() {
        var template = this.dropdownTemplate;
        var items = this.model.get( 'items' ).toArray();
        var $result = $( template( { items: items } ) );

        this.appendItemsContent( $result, items );
        $result.on( 'click', function() {
            this.close();
        }.bind( this ) );

        return $result;
    },

    /**
     *
     * @param $dropdown
     * @param items
     */
    appendItemsContent: function( $dropdown, items ) {
        var that = this;
        var itemTemplate = this.model.get( 'itemTemplate' );
        var itemEl, $el;

        $dropdown.find( '.pl-popup-button__item' ).each( function( i, el ) {
            $el = $( el );
            itemEl = itemTemplate( undefined, { index: i, item: items[ i ] } );
            that.addChildElement( itemEl );
            $el.append( itemEl.render() );
        } );
    },

    /**
     *
     */
    open: function() {
        var that = this;
        var $parent = this.$el.parent();

        $( 'body' ).append( this.$dropdown );

        this.$dropdown.addClass( 'open' );
        $parent.addClass( 'open' );

        this.alignDropdown();

        var $ignoredElements = this.$dropdown.add( this.$el );
        new ActionOnLoseFocus( $ignoredElements, function() {
            that.close();
        } );
    },

    /**
     *
     */
    close: function() {
        this.$dropdown.removeClass( 'open' );
        this.$el.parent().removeClass( 'open' );
        this.$dropdown.detach();
    },

    /**
     *
     */
    alignDropdown: function() {
        var horizontalAlignment = this.model.get( 'horizontalAlignment' );
        var $el = this.$el.parent();
        var offset = $el.offset();
        var top = offset.top + $el.height() - 2;
        var $dropdownMenu = this.$dropdown.find( '.dropdown-menu' );
        var left;

        if( horizontalAlignment == 'Right' ) {
            left = offset.left - ( $dropdownMenu.width() - $el.width() );
        } else {
            left = offset.left;
        }

        this.$dropdown.offset( {
            top: top,
            left: left
        } );
    },

    /**
     *
     */
    onClickGripHandler: function() {
        this.toggle();
    },

    /**
     *
     */
    updateGrouping: function() {
    },

    /**
     *
     * @param conditionFunction
     * @param onConditionFunction
     * @param n
     */
    whenReady: function( conditionFunction, onConditionFunction, n ) {
        var that = this;

        if( n === null || typeof n === 'undefined' ) {
            n = 100;
        }

        if( !conditionFunction() ) {
            if( n > 0 ) {
                setTimeout( function() {
                    that.whenReady( conditionFunction, onConditionFunction, n - 1 );
                }, 10 );
            }
        } else {
            onConditionFunction();
        }
    }

} );

InfinniUI.ObjectUtils.setPropertyValueDirect( InfinniUI, 'viewModes.PopupButton.forMenu', ForMenuPopupButtonView );

//####app/controls/stackPanel/stackPanelControl.js
/**
 *
 * @param viewMode
 * @constructor
 * @augments ContainerControl
 */
function StackPanelControl( viewMode ) {
    _.superClass( StackPanelControl, this, viewMode );
}

_.inherit( StackPanelControl, ContainerControl );

_.extend( StackPanelControl.prototype, {

    /**
     * @returns {StackPanelModel}
     */
    createControlModel: function() {
        return new StackPanelModel();
    },

    /**
     * @returns {StackPanelView}
     * @param model
     * @param viewMode
     */
    createControlView: function( model, viewMode ) {
        var view = new StackPanelView( { model: model } );

        view.viewMode = viewMode;

        return view;
    }

} );

InfinniUI.StackPanelControl = StackPanelControl;

//####app/controls/stackPanel/stackPanelModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var StackPanelModel = ContainerModel.extend( {

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.StackPanelModel = StackPanelModel;

//####app/controls/stackPanel/baseView/stackPanelView.js
/**
 * @constructor
 * @augments ControlView
 */
var StackPanelView = ContainerView.extend( {

    tagName: 'ul',

    className: 'pl-stack-panel pl-clearfix',

    template: {
        plain: InfinniUI.Template[ 'controls/stackPanel/baseView/template/stackPanel.tpl.html' ],
        grouped: InfinniUI.Template[ 'controls/stackPanel/baseView/template/stackPanelGrouped.tpl.html' ]
    },

    UI: {
        items: '.stackpanel-items'
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ContainerView.prototype.initialize.call( this, options );

        this.initOrientation();
    },

    /**
     *
     */
    updateGrouping: function() {
        var groupValueSelector = this.model.get( 'groupValueSelector' );
        var isGrouped = groupValueSelector !== null && typeof groupValueSelector !== 'undefined';

        if( isGrouped ) {
            this.strategy = new StackPanelViewGroupStrategy( this );
        } else {
            this.strategy = new StackPanelViewPlainStrategy( this );
        }
    },

    /**
     *
     * @returns {StackPanelView}
     */
    render: function() {
        this.prerenderingActions();

        this.removeChildElements();

        var preparedItems = this.strategy.prepareItemsForRendering();
        var template = this.strategy.getTemplate();

        this.$el.html( template( preparedItems ) );

        this.strategy.appendItemsContent( preparedItems );

        this.bindUIElements();
        this.updateProperties();

        this.trigger( 'render' );
        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    initOrientation: function() {
        this.listenTo( this.model, 'change:orientation', this.updateOrientation );
        this.updateOrientation();
    },

    /**
     *
     */
    updateOrientation: function() {
        var orientation = this.model.get( 'orientation' );
        this.$el.toggleClass( 'horizontal-orientation', orientation == 'Horizontal' );
        this.$el.toggleClass( 'pl-stack-panel_horizontal', orientation == 'Horizontal' );
    },

    /**
     * @returns {*}
     */
    getItems: function() {
        return this.model.get( 'items' );
    },

    /**
     * @returns {*}
     */
    getItemTemplate: function() {
        return this.model.get( 'itemTemplate' );
    },

    /**
     * @returns {*}
     */
    getGroupValueSelector: function() {
        return this.model.get( 'groupValueSelector' );
    },

    /**
     * @returns {*}
     */
    getGroupItemTemplate: function() {
        return this.model.get( 'groupItemTemplate' );
    }

} );

InfinniUI.StackPanelView = StackPanelView;

//####app/controls/stackPanel/baseView/viewGroupStrategy.js
/**
 *
 * @param stackPanel
 * @constructor
 */
function StackPanelViewGroupStrategy( stackPanel ) {
    this.stackPanel = stackPanel;
}

_.extend( StackPanelViewGroupStrategy.prototype, {

    groupTemplate: InfinniUI.Template[ 'controls/stackPanel/baseView/template/stackPanelGroup.tpl.html' ],

    /**
     *
     * @returns {{inputName: string, groups: Array}}
     */
    prepareItemsForRendering: function() {
        var items = this.stackPanel.getItems();
        var inputName = 'listbox-' + guid();
        var result = {
            inputName: inputName,
            groups: []
        };
        var groups = {};
        var groupingFunction = this.stackPanel.getGroupValueSelector();

        items.forEach( function( item, index ) {
            var groupKey = groupingFunction( undefined, { value: item } );

            if( !( groupKey in groups ) ) {
                groups[ groupKey ] = [];
            }

            groups[ groupKey ].push( item );
        } );

        for( var k in groups ) {
            if( !groups.hasOwnProperty( k ) ) {
                continue;
            }
            result.groups.push( {
                items: groups[ k ],
                indices: groups[ k ].map( function( item ) {
                    return items.indexOf( item );
                } )
            } );
        }

        return result;
    },

    /**
     *
     * @returns {*}
     */
    getTemplate: function() {
        return this.stackPanel.template.grouped;
    },

    /**
     *
     * @param {Object} preparedItems
     * @param {Array} preparedItems.groups
     */
    appendItemsContent: function( preparedItems ) {
        var stackPanel = this.stackPanel;
        var $stackPanel = stackPanel.$el;
        var groupTemplate = this.groupTemplate;
        var groupHeaderTemplate = this.stackPanel.getGroupItemTemplate();
        var itemTemplate = this.stackPanel.getItemTemplate();
        var $groups;
        var groups = preparedItems.groups;

        $groups = groups.map( function( group, groupIndex ) {

            var $items;
            var items = group.items || [];
            var indices = group.indices || [];
            var $group = $( groupTemplate( { items: items } ) );
            var groupHeader = groupHeaderTemplate( null, {
                index: indices[ 0 ],  //Индекс любого элемента в этой группе
                item: group
            } );

            stackPanel.addChildElement( groupHeader );

            $items = items.map( function( item, itemIndex ) {
                var element = itemTemplate( null, { index: indices[ itemIndex ], item: item } );
                stackPanel.addChildElement( element );
                return element.render();
            } );

            $( '.pl-stack-panel-group__header', $group ).append( groupHeader.render() );

            $( '.pl-stack-panel-list__item', $group ).each( function( i, el ) {
                $( el ).append( $items[ i ] );
            } );

            return $group;
        } );

        $stackPanel.append( $groups );
    }

} );

InfinniUI.StackPanelViewGroupStrategy = StackPanelViewGroupStrategy;

//####app/controls/stackPanel/baseView/viewPlainStrategy.js
/**
 *
 * @param stackPanel
 * @constructor
 */
function StackPanelViewPlainStrategy( stackPanel ) {
    this.stackPanel = stackPanel;
}

_.extend( StackPanelViewPlainStrategy.prototype, {

    /**
     *
     * @returns {{items}}
     */
    prepareItemsForRendering: function() {
        var items = this.stackPanel.getItems();
        var result = {
            items: items.toArray()
        };

        return result;
    },

    /**
     *
     * @returns {*}
     */
    getTemplate: function() {
        return this.stackPanel.template.plain;
    },

    /**
     *
     * @param preparedItems
     * @param childElementsClass
     */
    appendItemsContent: function( preparedItems, childElementsClass ) {
        var $stackPanel = this.stackPanel.$el;
        var itemTemplate = this.stackPanel.getItemTemplate();
        var items = preparedItems.items;
        var stackPanel = this.stackPanel;
        var itemEl, $el;

        childElementsClass = childElementsClass || '.pl-stack-panel-i';

        $stackPanel.find( childElementsClass ).each( function( i, el ) {
            $el = $( el );
            itemEl = itemTemplate( undefined, { index: i, item: items[ i ] } );
            stackPanel.addChildElement( itemEl );
            $el.append( itemEl.render() );

            $el.parent().data( 'pl-data-item', items[ i ] );
        } );
    }

} );

InfinniUI.StackPanelViewPlainStrategy = StackPanelViewPlainStrategy;

//####app/controls/tablePanel/tablePanelControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function TablePanelControl( parent ) {
    _.superClass( TablePanelControl, this, parent );
}

_.inherit( TablePanelControl, ContainerControl );

_.extend( TablePanelControl.prototype, {

    /**
     * @returns {TablePanelModel}
     */
    createControlModel: function() {
        return new TablePanelModel();
    },

    /**
     * @returns {TablePanelView}
     * @param model
     */
    createControlView: function( model ) {
        return new TablePanelView( { model: model } );
    }

} );

InfinniUI.TablePanelControl = TablePanelControl;

//####app/controls/tablePanel/tablePanelModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var TablePanelModel = ContainerModel.extend( {

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.TablePanelModel = TablePanelModel;

//####app/controls/tablePanel/tablePanelView.js
/**
 * @constructor
 * @augments ControlView
 */
var TablePanelView = ContainerView.extend( {

    className: 'pl-table-panel',

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ContainerView.prototype.initialize.call( this, options );
    },

    /**
     *
     * @returns {TablePanelView}
     */
    render: function() {
        this.prerenderingActions();

        this.removeChildElements();

        this.renderItemsContents();
        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    renderItemsContents: function() {
        var items = this.model.get( 'items' );
        var itemTemplate = this.model.get( 'itemTemplate' );
        var that = this;
        var element;

        items.forEach( function( item, i ) {
            element = itemTemplate( undefined, { item: item, index: i } );
            that.addChildElement( element );
            that.$el
                .append( element.render() );
        } );
    },

    /**
     *
     */
    updateGrouping: function() {
    }

} );

InfinniUI.TablePanelView = TablePanelView;

//####app/controls/tablePanel/cell/cellControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function CellControl( parent ) {
    _.superClass( CellControl, this, parent );
}

_.inherit( CellControl, ContainerControl );

_.extend( CellControl.prototype, {

    /**
     * @returns {CellModel}
     */
    createControlModel: function() {
        return new CellModel();
    },

    /**
     * @retuns {CellView}
     * @param model
     */
    createControlView: function( model ) {
        return new CellView( { model: model } );
    }

} );

InfinniUI.CellControl = CellControl;

//####app/controls/tablePanel/cell/cellModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var CellModel = ContainerModel.extend( {

    defaults: _.defaults( {
        columnSpan: 1
    }, ContainerModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.CellModel = CellModel;

//####app/controls/tablePanel/cell/cellView.js
/**
 * @constructor
 * @augments ContainerView
 */
var CellView = ContainerView.extend( {

    className: 'pl-cell',

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ContainerView.prototype.initialize.call( this, options );

        this.initColumnSpan();
    },

    /**
     *
     * @returns {CellView}
     */
    render: function() {
        this.prerenderingActions();

        this.removeChildElements();

        this.renderItemsContents();

        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    renderItemsContents: function() {
        var items = this.model.get( 'items' );
        var itemTemplate = this.model.get( 'itemTemplate' );
        var that = this;
        var element, item;

        items.forEach( function( item, i ) {
            element = itemTemplate( undefined, { item: item, index: i } );
            that.addChildElement( element );
            that.$el
                .append( element.render() );
        } );
    },

    /**
     *
     */
    initColumnSpan: function() {
        this.listenTo( this.model, 'change:columnSpan', this.updateColumnSpan );
        this.updateColumnSpan();
    },

    /**
     *
     */
    updateColumnSpan: function() {
        var columnSpan = this.model.get( 'columnSpan' );
        var currentColumnSpan = this.columnSpan;

        if( columnSpan != currentColumnSpan ) {

            if( currentColumnSpan ) {
                this.$el
                    .removeClass( 'col-xs-' + currentColumnSpan );
            }

            this.$el
                .addClass( 'col-xs-' + columnSpan );

            this.columnSpan = columnSpan;
        }
    },

    /**
     *
     */
    updateGrouping: function() {
    }

} );

InfinniUI.CellView = CellView;

//####app/controls/tablePanel/row/rowControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function RowControl( parent ) {
    _.superClass( RowControl, this, parent );
}

_.inherit( RowControl, ContainerControl );

_.extend( RowControl.prototype, {

    /**
     * @returns {RowModel}
     */
    createControlModel: function() {
        return new RowModel();
    },

    /**
     * @returns {RowView}
     * @param model
     */
    createControlView: function( model ) {
        return new RowView( { model: model } );
    }

} );

InfinniUI.RowControl = RowControl;

//####app/controls/tablePanel/row/rowModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var RowModel = ContainerModel.extend( {

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.RowModel = RowModel;

//####app/controls/tablePanel/row/rowView.js
/**
 * @constructor
 * @augments ContainerView
 */
var RowView = ContainerView.extend( {

    className: 'pl-row row',

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ContainerView.prototype.initialize.call( this, options );
    },

    /**
     *
     * @returns {RowView}
     */
    render: function() {
        this.prerenderingActions();

        this.removeChildElements();

        this.renderItemsContents();

        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    renderItemsContents: function() {
        var items = this.model.get( 'items' );
        var itemTemplate = this.model.get( 'itemTemplate' );
        var that = this;
        var element;

        items.forEach( function( item, i ) {
            element = itemTemplate( undefined, { item: item, index: i } );
            that.addChildElement( element );
            that.$el
                .append( element.render() );
        } );
    },

    /**
     *
     */
    updateGrouping: function() {
    }

} );

InfinniUI.RowView = RowView;

//####app/controls/tabPanel/tabPanelControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function TabPanelControl( parent ) {
    _.superClass( TabPanelControl, this, parent );
}

_.inherit( TabPanelControl, ContainerControl );

_.extend( TabPanelControl.prototype, {

    /**
     *
     * @param value
     */
    setSelectedItem: function( value ) {
        /**
         * @TODO Отрефакторить! Временное решение т.к. коллекция model.items содержит не экземпляры страниц а метаданные! см. templating в Container
         */
        var selectedItem = null;
        var model = this.controlModel;
        var elements = this.controlView.childElements;
        var items = model.get( 'items' );

        if ( value instanceof TabPage ) {
            model.set( 'selectedItem', value );
        } else if ( Array.isArray( elements ) ) {
            var index = items.indexOf( value );
            if ( index !== -1 ) {
                selectedItem = elements[ index ];
            }
            this.controlModel.set( 'selectedItem', selectedItem );
        }
    },

    /**
     * @returns {TabPanelModel}
     */
    createControlModel: function() {
        return new TabPanelModel();
    },

    /**
     * @returns {TabPanelView}
     * @param model
     */
    createControlView: function( model ) {
        return new TabPanelView( { model: model } );
    }

} );

InfinniUI.TabPanelControl = TabPanelControl;

//####app/controls/tabPanel/tabPanelModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var TabPanelModel = ContainerModel.extend( {

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    },

    defaults: _.defaults(
        {
            headerLocation: InfinniUI.TabHeaderLocation.top,
            headerOrientation: InfinniUI.TabHeaderOrientation.horizontal
        },
        ContainerModel.prototype.defaults
    )

} );

InfinniUI.TabPanelModel = TabPanelModel;

//####app/controls/tabPanel/tabPanelView.js
/**
 * @constructor
 * @augments ContainerView
 */
var TabPanelView = ContainerView.extend( {

    className: 'pl-tabpanel',

    template: {
        top: InfinniUI.Template[ 'controls/tabPanel/template/tabPanel.top.tpl.html' ],
        right: InfinniUI.Template[ 'controls/tabPanel/template/tabPanel.right.tpl.html' ],
        bottom: InfinniUI.Template[ 'controls/tabPanel/template/tabPanel.bottom.tpl.html' ],
        left: InfinniUI.Template[ 'controls/tabPanel/template/tabPanel.left.tpl.html' ],
        none: InfinniUI.Template[ 'controls/tabPanel/template/tabPanel.none.tpl.html' ]
    },

    UI: {
        header: '.pl-tabpanel-header',
        content: '.pl-tabpanel-content'
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ContainerView.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:headerLocation', this.onChangeHeaderLocation );
        this.listenTo( this.model, 'change:headerOrientation', this.updateHeaderOrientation );
        this.listenTo( this.model, 'change:selectedItem', this.updateSelectedItem );
    },

    /**
     *
     * @returns {TabPanelView}
     */
    render: function() {
        this.prerenderingActions();

        this.renderTemplate( this.getTemplate() );

        this.renderItemsContents();
        this.initSelectedItem();

        this.postrenderingActions();

        this.trigger( 'render' );
        this.updateProperties();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     * @protected
     */
    renderItemsContents: function() {
        var items = this.model.get( 'items' );

        this.removeChildElements();
        this.ui.content.empty();
        this.model.set( 'selectedItemIndex', -1 );

        var data = [];
        items.forEach( function( item, index ) {
            data.push( {
                tabElement: this.renderTabContent( item, index ),
                item: item,
                index: index
            } );
        }, this );

        this.renderTabHeaders( data );
    },

    /**
     * @protected
     * @param {Array.<Object>} data
     */
    renderTabHeaders: function( data ) {
        var header;
        var model = this.model;
        var items = model.get( 'items' );
        var selectedItem = model.get( 'selectedItem' );

        if( Array.isArray( this.tabHeaders ) ) {
            while( header = this.tabHeaders.pop() ) {
                this.stopListening( header );
                header.remove();
            }
        }

        this.tabHeaders = data.map( function( data ) {
            var selected = items.indexOf( data.item ) !== -1;
            var header = this.renderTabHeader( data.tabElement, selected );

            this.listenTo( header, 'selected', function() {
                var isEnabled = data.tabElement.getEnabled();
                if( isEnabled ) {
                    model.set( 'selectedItem', data.tabElement );
                }
            } );

            this.listenTo( header, 'close', function() {
                var isEnabled = data.tabElement.getEnabled();
                if( isEnabled ) {
                    data.tabElement.close();
                }
            } );

            return header;
        }, this );

    },

    /**
     *
     * @param {TabPage} tabPageElement
     * @param {boolean} selected
     * @returns {TabHeaderView}
     */
    renderTabHeader: function( tabPageElement, selected ) {
        var that = this;
        var header = new TabHeaderView( {
            text: tabPageElement.getText(),
            canClose: tabPageElement.getCanClose(),
            enabled: tabPageElement.getEnabled(),
            selected: selected
        } );

        tabPageElement.onPropertyChanged( 'text', function() {
            header.setText( tabPageElement.getText() );
        } );

        tabPageElement.onPropertyChanged( 'canClose', function() {
            header.setCanClose( tabPageElement.getCanClose() );
        } );

        tabPageElement.onPropertyChanged( 'enabled', function() {
            header.setEnabled( tabPageElement.getEnabled() );

            var selectedTabPage = that.model.get( 'selectedItem' );
            if( tabPageElement == selectedTabPage ) { // если видимость поменяли у выбранного элемента
                that.resetDefaultSelectedItem();
            }
        } );

        this.ui.header.append( header.render().$el );
        return header;
    },

    /**
     *
     * @param item
     * @param index
     */
    renderTabContent: function( item, index ) {
        var itemTemplate = this.model.get( 'itemTemplate' );
        var element = itemTemplate( undefined, { item: item, index: index } );

        this.addChildElement( element );
        this.ui.content.append( element.render() );

        return element;
    },

    /**
     * @protected
     * @returns {Function}
     */
    getTemplate: function() {
        var template;
        var headerLocation = this.model.get( 'headerLocation' );

        switch( headerLocation ) {
            case InfinniUI.TabHeaderLocation.top:
                template = this.template.top;
                break;
            case InfinniUI.TabHeaderLocation.right:
                template = this.template.right;
                break;
            case InfinniUI.TabHeaderLocation.bottom:
                template = this.template.bottom;
                break;
            case InfinniUI.TabHeaderLocation.left:
                template = this.template.left;
                break;
            case InfinniUI.TabHeaderLocation.none:
            default:
                template = this.template.none;
                break;
        }

        return template;
    },

    /**
     * @protected
     */
    updateProperties: function() {
        ContainerView.prototype.updateProperties.call( this );
        this.updateHeaderOrientation();
        this.updateSelectedItem();
    },

    /**
     * @protected
     */
    onChangeHeaderLocation: function() {
        //При изменении положения вкладок меняется весь шаблон
        this.rerender();
    },

    /**
     * @protected
     */
    updateHeaderOrientation: function() {
        //@TODO Реализовать TabPanel.updateHeaderOrientation()
    },


    /**
     * @protected
     * @description Проверяет чтобы одна из вкладок была активна
     */
    initSelectedItem: function() {
        var model = this.model;
        var tabPages = this.childElements;
        var selectedItem = model.get( 'selectedItem' );

        if( !Array.isArray( tabPages ) || tabPages.length == 0 ) {
            model.set( 'selectedItem', null );
        } else {
            if( tabPages.indexOf( selectedItem ) === -1 ) {
                var firstEnabledPageIndex = this._getFirstEnabledPageIndex();
                if( firstEnabledPageIndex != -1 ) {
                    model.set( 'selectedItem', tabPages[ firstEnabledPageIndex ] );
                }
            }
        }
    },

    /**
     *
     */
    resetDefaultSelectedItem: function() {
        this.model.set( 'selectedItem', null );
        this.initSelectedItem();
    },

    /**
     *
     * @returns {number}
     * @private
     */
    _getFirstEnabledPageIndex: function() {
        var tabPages = this.childElements;

        for( var i = 0; i < tabPages.length; ++i ) {
            if( tabPages[ i ].getEnabled() ) {
                return i;
            }
        }

        return -1;
    },

    /**
     * @protected
     */
    updateSelectedItem: function() {
        if( !this.wasRendered ) {
            return;
        }

        var tabPages = this.childElements;
        var tabHeaders = this.tabHeaders;
        var selectedItem = this.model.get( 'selectedItem' );
        var selectedIndex = tabPages.indexOf( selectedItem );

        //TabPage
        if( Array.isArray( tabPages ) ) {
            tabPages.forEach( function( tabPage ) {
                tabPage.setSelected( false );
            } );

            if( selectedIndex !== -1 ) {
                tabPages[ selectedIndex ].setSelected( true );
            }
        }

        //TabHeader
        if( Array.isArray( tabHeaders ) ) {
            tabHeaders.forEach( function( tabHeader ) {
                tabHeader.setSelected( false );
            } );
            if( selectedIndex !== -1 ) {
                tabHeaders[ selectedIndex ].setSelected( true );
            }
        }
    },

    /**
     * @protected
     */
    updateGrouping: function() {
    }

} );

InfinniUI.TabPanelView = TabPanelView;

//####app/controls/tabPanel/tabHeader/tabHeaderView.js
/**
 * @constructor
 * @augments Backbone.Model
 */
var TabHeaderModel = Backbone.Model.extend( {

    defaults: {
        text: '',
        enabled: true,
        canClose: false
    }

} );

InfinniUI.TabHeaderModel = TabHeaderModel;

/**
 * @constructor
 * @augments Backbone.View
 * @mixes bindUIElementsMixin
 */
var TabHeaderView = Backbone.View.extend( {

    className: 'pl-tabheader',

    tagName: 'li',

    template: InfinniUI.Template[ 'controls/tabPanel/tabHeader/template/tabHeader.tpl.html' ],

    events: {
        'click': 'onClickHandler',
        'click .pl-close': 'onClickCloseHandler'
    },

    UI: {
        label: '.pl-tabheader-text',
        close: '.pl-close'
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        this.model = new TabHeaderModel( options );

        this.on( 'rendered', this.onRenderedHandler );
    },

    /**
     *
     * @returns {TabHeaderView}
     */
    render: function() {
        this.$el.html( this.template );
        this.bindUIElements();
        this.trigger( 'rendered' );
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     * @param {string} value
     */
    setText: function( value ) {
        this.model.set( 'text', value );
    },

    /**
     *
     * @param {boolean} value
     */
    setCanClose: function( value ) {
        this.model.set( 'canClose', value );
    },

    /**
     *
     * @param {boolean} value
     */
    setSelected: function( value ) {
        this.model.set( 'selected', value );
    },

    /**
     *
     * @param value
     */
    setEnabled: function( value ) {
        this.model.set( 'enabled', value );
    },

    /**
     * @protected
     */
    updateProperties: function() {
        this.updateTextHandler();
        this.updateCanClose();
        this.updateSelectedHandler();
        this.updateEnabled();
    },

    /**
     * @protected
     */
    onRenderedHandler: function() {
        this.updateProperties();
        this.listenTo( this.model, 'change:text', this.updateTextHandler );
        this.listenTo( this.model, 'change:selected', this.updateSelectedHandler );
        this.listenTo( this.model, 'change:canClose', this.updateCanClose );
        this.listenTo( this.model, 'change:enabled', this.updateProperties ); // нужно обновлять все свойства
    },

    /**
     * @protected
     */
    updateTextHandler: function() {
        var text = this.model.get( 'text' );

        this.ui.label.text( text );
    },

    /**
     * @protected
     */
    updateCanClose: function() {
        var canClose = this.model.get( 'canClose' );

        this.ui.close.toggleClass( 'hidden', !canClose );
    },

    /**
     * @protected
     */
    updateSelectedHandler: function() {
        var selected = this.model.get( 'selected' );

        this.$el.toggleClass( 'pl-active active', selected );
    },

    /**
     *
     */
    updateEnabled: function() {
        var isEnabled = this.model.get( 'enabled' );

        this.$el.toggleClass( 'pl-disabled', !isEnabled );
    },

    /**
     *
     * @param event
     */
    onClickHandler: function( event ) {
        this.trigger( 'selected' );
    },

    /**
     *
     * @param event
     */
    onClickCloseHandler: function( event ) {
        event.stopPropagation();
        this.trigger( 'close' );
    }

} );

_.extend( TabHeaderView.prototype, bindUIElementsMixin );

InfinniUI.TabHeaderView = TabHeaderView;

//####app/controls/tabPanel/tabPage/tabPageControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function TabPageControl( parent ) {
    _.superClass( TabPageControl, this, parent );
}

_.inherit( TabPageControl, ContainerControl );

_.extend( TabPageControl.prototype, {

    /**
     * @returns {TabPageModel}
     */
    createControlModel: function() {
        return new TabPageModel();
    },

    /**
     * @returns {TabPageView}
     * @param model
     */
    createControlView: function( model ) {
        return new TabPageView( { model: model } );
    }

} );

InfinniUI.TabPageControl = TabPageControl;

//####app/controls/tabPanel/tabPage/tabPageModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var TabPageModel = ContainerModel.extend( {

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    },

    defaults: _.defaults(
        {
            canClose: false,
            selected: false
        },
        ContainerModel.prototype.defaults
    )

} );

InfinniUI.TabPageModel = TabPageModel;

//####app/controls/tabPanel/tabPage/tabPageView.js
/**
 * @constructor
 * @augments ContainerView
 */
var TabPageView = ContainerView.extend( {

    className: 'pl-tabpage hidden',

    template: InfinniUI.Template[ 'controls/tabPanel/tabPage/template/tabPage.tpl.html' ],

    UI: {
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ContainerView.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:selected', this.updateSelected );
    },

    /**
     *
     */
    updateProperties: function() {
        ContainerView.prototype.updateProperties.call( this );
        this.updateSelected();
    },

    /**
     *
     * @returns {TabPageView}
     */
    render: function() {
        this.prerenderingActions();

        this.removeChildElements();

        this.$el.html( this.template( {
            items: this.model.get( 'items' )
        } ) );
        this.renderItemsContents();

        this.bindUIElements();

        this.postrenderingActions();

        this.trigger( 'render' );
        this.updateProperties();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    renderItemsContents: function() {
        var $items = this.$el.find( '.pl-tabpage-i' );
        var items = this.model.get( 'items' );
        var itemTemplate = this.model.get( 'itemTemplate' );
        var that = this;
        var element, item;

        $items.each( function( i, el ) {
            item = items.getByIndex( i );
            element = itemTemplate( undefined, { item: item, index: i } );
            that.addChildElement( element );
            $( el )
                .append( element.render() );
        } );
    },

    /**
     *
     */
    updateSelected: function() {
        var selected = this.model.get( 'selected' );
        this.$el.toggleClass( 'hidden', !selected );
    },

    /**
     * @protected
     */
    updateGrouping: function() {
    }

} );

InfinniUI.TabPageView = TabPageView;

//####app/controls/treeView/treeViewControl.js
/**
 * @augments ListEditorBaseControl
 * @constructor
 */
function TreeViewControl() {
    _.superClass( TreeViewControl, this );
}

_.inherit( TreeViewControl, ListEditorBaseControl );

_.extend( TreeViewControl.prototype, {

    /**
     * @returns {TreeViewModel}
     */
    createControlModel: function() {
        return new TreeViewModel();
    },

    /**
     * @returns {TreeViewView}
     * @param model
     */
    createControlView: function( model ) {
        return new TreeViewView( { model: model } );
    },

    /**
     *
     * @param key
     */
    expand: function( key ) {
        this.controlView.expandNode( key );
    },

    /**
     *
     * @param key
     */
    collapse: function( key ) {
        this.controlView.collapseNode( key );
    },

    /**
     *
     * @param key
     */
    toggle: function( key ) {
        this.controlView.toggleNode( key );
    }

} );

InfinniUI.TreeViewControl = TreeViewControl;

//####app/controls/treeView/treeViewModel.js
/**
 * @constructor
 * @augments ListEditorBaseModel
 */
var TreeViewModel = ListEditorBaseModel.extend( {

    defaults: _.defaults( {
        onExpand: null,
        onCollapse: null
    }, ListEditorBaseModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ListEditorBaseModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    },

    /**
     *
     * @param item
     * @param toggle
     */
    toggleItem: function( item, toggle ) {
        var value = this.valueByItem( item );

        this.toggleValue( value, toggle );
        this.trigger( 'toggle' );
    }

} );

InfinniUI.TreeViewModel = TreeViewModel;

//####app/controls/treeView/treeViewView.js
/**
 * @constructor
 * @augments ListEditorBaseView
 */
var TreeViewView = ListEditorBaseView.extend( {

    className: 'pl-treeview',

    classNameMultiSelect: 'pl-treeview_multi-select',

    classNameSingleSelect: 'pl-treeview_single-select',

    template: InfinniUI.Template[ 'controls/treeView/template/treeview.tpl.html' ],

    events: {},

    UI: _.defaults( {}, ListEditorBaseView.prototype.UI ),

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ListEditorBaseView.prototype.initialize.call( this, options );
        this.itemsMap = new HashMap();
        this.nodesMap = new HashMap();

    },

    /**
     *
     * @param node
     * @param item
     */
    addChildElement: function( node, item ) {
        this.nodesMap.add( item, node );
        ListEditorBaseView.prototype.addChildElement.call( this, node );
    },

    /**
     *
     */
    removeChildElements: function() {
        this.nodesMap.clear();
        this.itemsMap.clear();
        ListEditorBaseView.prototype.removeChildElements.call( this );
    },

    /**
     *
     * @returns {TreeViewView}
     */
    render: function() {
        this.prerenderingActions();
        this.removeChildElements();

        this.renderTemplate( this.getTemplate() );

        this.renderItems();
        this.updateProperties();

        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     * @param parentId
     */
    renderItems: function( parentId ) {
        var view = this;
        var $nodes;
        var model = this.model;
        var collection = model.get( 'items' );
        var parentSelector = model.get( 'parentSelector' );
        var keySelector = model.get( 'keySelector' );
        var nodeConstructor = this.getNodeConstructor();
        var itemTemplate = model.get( 'itemTemplate' );
        var itemsMap = this.itemsMap;

        $nodes = renderNodes();
        this.$el.append( $nodes );

        function renderNodes( parentId ) {
            return collection.toArray()
                .filter( function( item ) {
                    var parent = parentSelector( null, { value: item } );
                    return isEmpty( parentId ) ? isEmpty( parent ) : parent === parentId;
                } )
                .map( function( item ) {
                    var node = new nodeConstructor().render();
                    var $node = node.$el;
                    var $item = itemTemplate( null, {
                        value: item,
                        index: collection.indexOf( item )
                    } ).render();

                    $node.data( 'pl-data-item', item );

                    node.listenTo( model, 'change:selectedItem', function( model, selectedItem ) {
                        node.setSelected( selectedItem === item );
                    } );

                    node.listenTo( model, 'change:value', function( model, value ) {
                        var multiSelect = model.get( 'multiSelect' );

                        var checked;
                        if( !multiSelect ) {
                            checked = isValueForItem( value );
                        } else if( Array.isArray( value ) ) {
                            checked = value.some( isValueForItem );
                        } else {
                            checked = false;
                        }
                        node.setChecked( checked );
                    } );

                    view.listenTo( node, 'select', view.onSelectNodeHandler.bind( view, item, node ) );
                    view.listenTo( node, 'check', view.onCheckNodeHandler.bind( view, item, node ) );
                    view.listenTo( node, 'expand', view.onExpandNodeHandler.bind( view, item ) );
                    view.listenTo( node, 'collapse', view.onCollapseNodeHandler.bind( view, item ) );

                    node.setItemContent( $item );

                    var key = keySelector( null, { value: item } );
                    var $subitems = renderNodes( key );

                    node.setItemsContent( $subitems );

                    view.addChildElement( node, item );
                    itemsMap.add( key, item );

                    return $node;

                    function isValueForItem( value ) {
                        return model.itemByValue( value ) === item;
                    }
                } );
        }

        function isEmpty( value ) {
            return value === null || typeof value === 'undefined';
        }
    },

    /**
     *
     * @returns {*}
     */
    getNodeConstructor: function() {
        var multiSelect = this.model.get( 'multiSelect' );

        return ( multiSelect === true ) ? TreeViewNodeCheckbox : TreeViewNodeRadio;
    },

    /**
     *
     * @param item
     * @param index
     */
    onSelectNodeHandler: function( item, index ) {
        var model = this.model;
        var multiSelect = model.get( 'multiSelect' );

        model.set( 'selectedItem', item );
        if( !multiSelect ) {
            //Клик по элементу одновременно переключает значение и делает элемент выделенным
            this.tryToggleValue( item );
        }
    },

    /**
     *
     * @param item
     * @param index
     */
    onCheckNodeHandler: function( item, index ) {
        var model = this.model;
        var multiSelect = model.get( 'multiSelect' );

        this.tryToggleValue( item );

        if( !multiSelect ) {
            //Клик по элементу одновременно переключает значение и делает элемент выделенным
            model.set( 'selectedItem', item );
        }
    },

    /**
     *
     * @param item
     */
    tryToggleValue: function( item ) {
        var model = this.model;
        var isDisabledItem = this.isDisabledItem( item );

        if( !isDisabledItem ) {
            var value = model.valueByItem( item );
            model.toggleValue( value );
        }
    },

    /**
     *
     * @param item
     * @returns {*}
     */
    isDisabledItem: function( item ) {
        if( item === null || typeof item === 'undefined' ) {
            return false;
        }

        return this.model.isDisabledItem( item ) || this.isDisabledItem( this.getParent( item ) );
    },

    /**
     *
     * @param item
     * @returns {*}
     */
    getParent: function( item ) {
        var parentSelector = this.model.get( 'parentSelector' );
        var parentId = parentSelector( null, { value: item } );

        return parentId && this.itemsMap.get( parentId );
    },

    /**
     *
     * @returns {*}
     */
    getTemplate: function() {
        return this.template;
    },

    /**
     *
     */
    updateProperties: function() {
        ListEditorBaseView.prototype.updateProperties.call( this );
        this.updateMultiSelect();
    },

    /**
     *
     */
    updateMultiSelect: function() {
        var multiSelect = this.model.get( 'multiSelect' );
        this.$el.toggleClass( this.classNameMultiSelect, !!multiSelect );
        this.$el.toggleClass( this.classNameSingleSelect, !multiSelect );
    },

    /**
     *
     */
    updateEnabled: function() {
        ListEditorBaseView.prototype.updateEnabled.call( this );
    },

    /**
     *
     */
    updateValue: function() {
    },

    /**
     *
     */
    updateSelectedItem: function() {
    },

    /**
     *
     */
    updateGrouping: function() {
    },

    /**
     *
     */
    updateDisabledItem: function() {
        var model = this.model;
        var disabledItemCondition = model.get( 'disabledItemCondition' );
        var nodes = this.$el.find( '.pl-treeview-node' );

        nodes.removeClass( 'pl-disabled-list-item' );

        if( disabledItemCondition !== null && typeof disabledItemCondition !== 'undefined' ) {
            nodes.each( function( i, el ) {
                var $el = $( el );
                var item = $el.data( 'pl-data-item' );

                if( model.isDisabledItem( item ) ) {
                    $el.addClass( 'pl-disabled-list-item' );
                }
            } );
        }
    },

    /**
     *
     * @param key
     */
    collapseNode: function( key ) {
        var item = this.itemsMap.get( key );

        if( !item ) {
            return;
        }

        var node = this.nodesMap.get( item );
        if( node ) {
            node.collapse();
        }
    },

    /**
     *
     * @param key
     */
    toggleNode: function( key ) {
        var item = this.itemsMap.get( key );

        if( !item ) {
            return;
        }

        var node = this.nodesMap.get( item );
        if( node ) {
            var collapsed = node.getCollapsed();

            var toggle = collapsed ? this.expandNode : this.collapseNode;
            toggle.call( this, key );
        }
    },

    /**
     *
     * @param key
     */
    expandNode: function( key ) {
        var model = this.model;
        var item = this.itemsMap.get( key );

        if( !item ) {
            return;
        }

        var node = this.nodesMap.get( item );
        var parentSelector = model.get( 'parentSelector' );
        var keySelector = model.get( 'keySelector' );
        var parentId;
        var nodes = [ node ];

        while( parentId = parentSelector( null, { value: item } ) ) {
            if( !parentId ) {
                break;
            }
            item = this.itemsMap.get( parentId );
            node = this.nodesMap.get( item );
            nodes.push( node );
        }

        nodes.reverse().forEach( function( node ) {
            node.expand();
        } );
    },

    /**
     *
     * @param item
     */
    onExpandNodeHandler: function( item ) {
        var model = this.model;
        var onExpandNode = model.get( 'onExpand' );

        if( onExpandNode ) {
            onExpandNode( item );
        }
    },

    /**
     *
     * @param item
     */
    onCollapseNodeHandler: function( item ) {
        var model = this.model;
        var onCollapseNode = model.get( 'onCollapse' );

        if( onCollapseNode ) {
            onCollapseNode( item );
        }
    }

} );

InfinniUI.TreeViewView = TreeViewView;

//####app/controls/treeView/node/treeViewNodeBase.js
/**
 * @mixes bindUIElementsMixin
 * @constructor
 * @augments Backbone.View
 */
var TreeViewNodeBase = Backbone.View.extend( {

    className: 'pl-treeview-node',

    classNameCheckerChecked: 'pl-treeview-item__checker_checked',
    classNameCheckerUnchecked: 'pl-treeview-item__checker_unchecked',
    classNameContentSelected: 'pl-treeview-item__content_selected',
    classNameItemsExpanded: 'pl-treeview-node__items_expanded',
    classNameItemsCollapsed: 'pl-treeview-node__items_collapsed',
    classNameButtonCollapse: 'pl-treeview-node__button_collapse',
    classNameButtonExpand: 'pl-treeview-node__button_expand',
    classNameButtonNone: 'pl-treeview-node__button_none',
    classNameIsLeaf: 'pl-treeview-node_is-leaf',

    UI: {
        checker: '.pl-treeview-item__checker',
        content: '.pl-treeview-item__content',
        items: '.pl-treeview-node__items',
        button: '.pl-treeview-node__button'
    },

    /**
     *
     */
    initialize: function() {
        var model = new Backbone.Model( { collapsed: true, isLeaf: true } );
        this.model = model;
        this.listenTo( model, 'change:selected', this.updateSelected );
        this.listenTo( model, 'change:checked', this.updateChecked );
        this.listenTo( model, 'change:collapsed', this.updateCollapsed );
        this.listenTo( model, 'change:isLeaf', this.updateCollapsed );
    },

    /**
     *
     */
    updateChecked: function() {
        var checked = this.model.get( 'checked' );
        this.ui.checker.toggleClass( this.classNameCheckerChecked, checked === true );
        this.ui.checker.toggleClass( this.classNameCheckerUnchecked, checked !== true );
    },

    /**
     *
     */
    updateSelected: function() {
        var selected = this.model.get( 'selected' );
        this.ui.content.toggleClass( this.classNameContentSelected, selected === true );
    },

    /**
     *
     */
    updateCollapsed: function() {
        var isLeaf = this.model.get( 'isLeaf' );
        var collapsed = !!this.model.get( 'collapsed' );
        this.ui.items.toggleClass( this.classNameItemsExpanded, !collapsed && !isLeaf );
        this.ui.items.toggleClass( this.classNameItemsCollapsed, collapsed && !isLeaf );
        this.ui.button.toggleClass( this.classNameButtonCollapse, !collapsed && !isLeaf );
        this.ui.button.toggleClass( this.classNameButtonExpand, collapsed && !isLeaf );

        this.$el.toggleClass( this.classNameIsLeaf, isLeaf );
        this.ui.button.toggleClass( this.classNameButtonNone, isLeaf );
    },

    /**
     *
     */
    updateState: function() {
        this.updateCollapsed();
        this.updateSelected();
        this.updateChecked();
    },

    /**
     *
     * @returns {TreeViewNodeBase}
     */
    render: function() {
        this.$el.html( this.template );
        this.bindUIElements();
        this.updateState();
        this.initDomEventsHandlers();
        return this;
    },

    /**
     *
     */
    initDomEventsHandlers: function() {
        this.ui.button.on( 'click', this.onClickEventHandler.bind( this ) );
        this.ui.content[ 0 ].addEventListener( 'click', this.onClickItemHandler.bind( this ), true );
        this.ui.checker[ 0 ].addEventListener( 'click', this.onClickCheckHandler.bind( this ), true );
    },

    /**
     *
     * @param event
     */
    onClickItemHandler: function( event ) {
        this.trigger( 'select' );
    },

    /**
     *
     * @param event
     */
    onClickCheckHandler: function( event ) {
        this.trigger( 'check' );
    },

    /**
     *
     */
    toggle: function() {
        var model = this.model;
        var collapsed = model.get( 'collapsed' );

        if( !collapsed ) {
            this.collapse();
        } else {
            this.expand();
        }
    },

    /**
     *
     */
    expand: function() {
        this.model.set( 'collapsed', false );
        this.trigger( 'expand' );
    },

    /**
     *
     */
    collapse: function() {
        this.model.set( 'collapsed', true );
        this.trigger( 'collapse' );
    },

    /**
     * @returns {*}
     */
    getCollapsed: function() {
        return this.model.get( 'collapsed' );
    },

    /**
     *
     * @param $itemContent
     */
    setItemContent: function( $itemContent ) {
        this.ui.content.empty();
        this.ui.content.append( $itemContent );
    },

    /**
     *
     * @param $itemsContent
     */
    setItemsContent: function( $itemsContent ) {
        this.ui.items.empty();
        this.model.set( 'isLeaf', !$itemsContent.length );
        this.ui.items.append( $itemsContent );
    },

    /**
     *
     * @param event
     */
    onClickEventHandler: function( event ) {
        this.toggle();
    },

    /**
     *
     * @param selected
     */
    setSelected: function( selected ) {
        this.model.set( 'selected', selected );
    },

    /**
     *
     * @param checked
     */
    setChecked: function( checked ) {
        this.model.set( 'checked', checked );
    }

} );

_.extend( TreeViewNodeBase.prototype, bindUIElementsMixin );

InfinniUI.TreeViewNodeBase = TreeViewNodeBase;

//####app/controls/treeView/node/treeViewNodeCheckbox.js
/**
 * @constructor
 * @augments TreeViewNodeBase
 */
var TreeViewNodeCheckbox = TreeViewNodeBase.extend( {

    template: InfinniUI.Template[ 'controls/treeView/template/node-checkbox.tpl.html' ]

} );

InfinniUI.TreeViewNodeCheckbox = TreeViewNodeCheckbox;

//####app/controls/treeView/node/treeViewNodeRadio.js
/**
 * @constructor
 * @augments TreeViewNodeBase
 */
var TreeViewNodeRadio = TreeViewNodeBase.extend( {

    template: InfinniUI.Template[ 'controls/treeView/template/node-radio.tpl.html' ]

} );

InfinniUI.TreeViewNodeRadio = TreeViewNodeRadio;

//####app/controls/checkBox/checkBoxControl.js
/**
 *
 * @param parent
 * @constructor
 */
function CheckBoxControl( parent ) {
    _.superClass( CheckBoxControl, this, parent );
    this.initialize_editorBaseControl();
}

_.inherit( CheckBoxControl, Control );

_.extend( CheckBoxControl.prototype, {

    /**
     *
     * @returns {CheckBoxModel}
     */
    createControlModel: function() {
        return new CheckBoxModel();
    },

    /**
     *
     * @param model
     *
     */
    createControlView: function( model ) {
        return new CheckBoxView( { model: model } );
    }

}, editorBaseControlMixin );

InfinniUI.CheckBoxControl = CheckBoxControl;

//####app/controls/checkBox/checkBoxModel.js
/**
 *
 * @constructor
 */
var CheckBoxModel = ControlModel.extend( _.extend( {

    defaults: _.defaults( {
        value: false
    }, ControlModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
        this.initialize_editorBaseModel();
    }

}, editorBaseModelMixin ) );

InfinniUI.CheckBoxModel = CheckBoxModel;

//####app/controls/checkBox/checkBoxView.js
/**
 *
 * @augments ControlView
 * @mixes editorBaseViewMixin
 * @constructor
 */
var CheckBoxView = ControlView.extend( _.extend( {}, editorBaseViewMixin, {

    template: InfinniUI.Template[ 'controls/checkBox/template/checkBox.tpl.html' ],

    UI: _.extend( {}, editorBaseViewMixin.UI, {
        text: '.checkbox-label',
        input: 'input'
    } ),

    events: {
        'click input': 'onClickHandler'
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );
        editorBaseViewMixin.initHandlersForProperties.call( this );
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );
        editorBaseViewMixin.updateProperties.call( this );
    },

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );

        if ( !focusable ) {
            this.ui.input.attr( 'tabindex', -1 );
        } else {
            this.ui.input.removeAttr( 'tabindex' );
        }
    },

    /**
     *
     */
    updateText: function() {
        var text = this.model.get( 'text' );

        this.ui.text.text( text ? text : '' );
    },

    /**
     *
     */
    updateEnabled: function() {
        ControlView.prototype.updateEnabled.call( this );
        var enabled = this.model.get( 'enabled' );
        this.ui.input.prop( 'disabled', !enabled );
    },

    /**
     *
     * @returns {CheckBoxView}
     */
    render: function() {
        this.prerenderingActions();
        this.renderTemplate( this.template );
        this.updateProperties();

        this.trigger( 'render' );
        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    onClickHandler: function() {
        var model = this.model;

        var enabled = model.get( 'enabled' );
        if ( enabled ) {
            model.set( 'value', !model.get( 'value' ) );
        }
    },

    /**
     *
     */
    updateValue: function() {
        var value = this.model.get( 'value' );
        this.ui.input.prop( 'checked', !!value );
    },

    /**
     *
     */
    setFocus: function() {
        this.ui.input.focus();
    }

} ) );

InfinniUI.CheckBoxView = CheckBoxView;

//####app/controls/comboBox/comboBoxControl.js
/**
 *
 * @param viewMode
 * @constructor
 */
function ComboBoxControl( viewMode ) {
    _.superClass( ListBoxControl, this, viewMode );
}

_.inherit( ComboBoxControl, ListEditorBaseControl );

_.extend( ComboBoxControl.prototype, {

    /**
     *
     * @returns {ComboBoxModel}
     */
    createControlModel: function() {
        return new ComboBoxModel();
    },

    /**
     *
     * @param model
     * @returns {ComboBoxView}
     */
    createControlView: function( model ) {
        return new ComboBoxView( { model: model } );
    },

    /**
     *
     * @param message
     */
    setNoItemsMessage: function( message ) {
        this.controlModel.setNoItemsMessage( message );
    }

} );

InfinniUI.ComboBoxControl = ComboBoxControl;

//####app/controls/comboBox/comboBoxModel.js
/**
 *
 * @constructor
 */
var ComboBoxModel = ListEditorBaseModel.extend( {

    defaults: _.defaults( {
        expandOnEnter: true,
        noItemsMessage: null,
        showClear: true,
        autocomplete: false,
        autocompleteValue: '',
        isInitialized: false,
        valueTemplate: function( context, args ) {
            return {
                render: function() {
                    return args.value;
                }
            };
        }
    }, ListEditorBaseModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        var that = this;

        ListEditorBaseModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
        this.on( 'change:value', this.syncSelectedItem );
        this.get( 'items' ).onChange( function() {
            that.set( 'isInitialized', true );
        } );
    },

    /**
     *
     */
    setSelectedItemToValue: function() {
        var autocomplete = this.get( 'autocomplete' );
        var multiSelect = this.get( 'multiSelect' );

        if( autocomplete || multiSelect ) {
            return;
        }

        var selectedItem = this.getSelectedItem();
        var value = this.valueByItem( selectedItem );

        this.set( 'value', value );
    },

    /**
     *
     * @param model
     * @param value
     */
    syncSelectedItem: function( model, value ) {
        var selectedItem = this.itemByValue( value );
        this.setSelectedItem( selectedItem );
    },

    /**
     *
     * @returns {*}
     */
    getSelectedItem: function() {
        var selectedItem = this.get( 'selectedItem' );

        return selectedItem;
    },

    /**
     *
     * @param item
     */
    setSelectedItem: function( item ) {
        this.set( 'selectedItem', item );
    },

    /**
     *
     */
    selectNextItem: function() {
        var items = this.get( 'items' );
        var selectedItem = this.getSelectedItem();

        if( items.length > 0 ) {
            var itemIndex = 0;
            if( selectedItem ) {
                itemIndex = items.indexOf( selectedItem );
                if( itemIndex === -1 ) {
                    itemIndex = 0;
                } else {
                    itemIndex = Math.min( items.length - 1, itemIndex + 1 );
                }
            }
            selectedItem = items.getByIndex( itemIndex );
        } else {
            selectedItem = null;
        }
        this.setSelectedItem( selectedItem );
        this.setSelectedItemToValue();
    },

    /**
     *
     */
    selectPrevItem: function() {
        var items = this.get( 'items' );
        var selectedItem = this.getSelectedItem();

        if( items.length > 0 ) {
            var itemIndex = 0;
            if( selectedItem ) {
                itemIndex = items.indexOf( selectedItem );
                if( itemIndex === -1 ) {
                    itemIndex = 0;
                } else {
                    itemIndex = Math.max( 0, itemIndex - 1 );
                }
            }
            selectedItem = items.getByIndex( itemIndex );
        }
        this.setSelectedItem( selectedItem );
        this.setSelectedItemToValue();
    },

    /**
     *
     */
    selectFirstItem: function() {
        var items = this.get( 'items' );
        var selectedItem = null;

        if( items.length > 0 ) {
            selectedItem = items.getByIndex( 0 );
        }
        this.setSelectedItem( selectedItem );
        this.setSelectedItemToValue();
    },

    /**
     *
     */
    selectLastItem: function() {
        var items = this.get( 'items' );
        var selectedItem = null;

        if( items.length > 0 ) {
            selectedItem = items.getByIndex( items.length - 1 );
        }
        this.setSelectedItem( selectedItem );
        this.setSelectedItemToValue();
    },

    /**
     *
     * @param item
     * @param toggle
     */
    toggleItem: function( item, toggle ) {
        var value = this.valueByItem( item );
        this.toggleValue( value, toggle );
        this.trigger( 'toggle' );
    },

    /**
     *
     * @param message
     */
    setNoItemsMessage: function( message ) {
        this.set( 'noItemsMessage', message );
    }

} );

InfinniUI.ComboBoxModel = ComboBoxModel;

//####app/controls/comboBox/comboBoxView.js
/**
 *
 * @constructor
 */
var ComboBoxView = ListEditorBaseView.extend( {

    className: 'pl-combobox form-group',

    template: InfinniUI.Template[ 'controls/comboBox/template/combobox.tpl.html' ],

    events: {
        'click .pl-combobox__grip': 'onClickGripHandler',
        'click .pl-combobox__value': 'onClickValueHandler',
        'click .pl-combobox__clear': 'onClickClearHandler',
        'click .pl-control': 'onClickValueHandler',
        'keydown .pl-control': 'onKeyDownControlHandler'
    },

    UI: _.defaults( {
        control: '.pl-control',
        label: '.pl-control-label',
        value: '.pl-combobox__value',
        clear: '.pl-combobox__clear'
    }, ListEditorBaseView.prototype.UI ),

    /**
     *
     * @param el
     * @returns {*}
     */
    isControlElement: function( el ) {
        var res = ListEditorBaseView.prototype.isControlElement.call( this, el );

        if( res ) {
            return res;
        }

        if( !this.dropDownView ) {
            return false;
        }

        return $.contains( this.dropDownView.el, el );
    },

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );
        var enabled = this.model.get( 'enabled' );

        if( focusable && enabled ) {
            this.ui.control.attr( 'tabindex', 0 );
        } else {
            this.ui.control.removeAttr( 'tabindex' );
        }
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ListEditorBaseView.prototype.initialize.call( this, options );
        var model = this.model;
        var view = this;

        this.on( 'render', function() {
            view.renderValue();

            model.on( 'change:dropdown', function( model, dropdown ) {
                if( dropdown ) {
                    model.set( 'autocompleteValue', '' );//Сброс фильтра
                    model.set( 'focused', true );
                    if( view.dropDownView ) {
                        view.dropDownView.remove();
                    }
                    var dropdownView = new ComboBoxDropdownView( {
                        model: model
                    } );
                    view.dropDownView = dropdownView;

                    this.listenTo( dropdownView, 'search', _.debounce( view.onSearchValueHandler.bind( view ), 300 ) );

                    var $dropdown = dropdownView.render();
                    $( 'body' ).append( $dropdown );

                    var baseWidthDOMElement = view.el;
                    var basePositionDOMElement = view.ui.control.get( 0 );

                    dropdownView.updatePosition( baseWidthDOMElement, basePositionDOMElement );

                    view.dropDownView.on( 'itemsRendered2', function() {
                        dropdownView.updatePosition( baseWidthDOMElement, basePositionDOMElement );
                    } );

                    if( model.get( 'autocomplete' ) ) {
                        dropdownView.setSearchFocus();
                    } else {
                        view.ui.control.focus();
                    }
                    setTimeout( dropdownView.ensureVisibleSelectedItem.bind( dropdownView ), 0 );
                } else {
                    view.ui.control.focus();
                }
            } );
            model.onValueChanged( this.onChangeValueHandler.bind( this ) );

        }, this );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ListEditorBaseView.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:showClear', this.updateShowClear );
        this.listenTo( this.model, 'change:labelText', this.updateLabelText );
        this.listenTo( this.model, 'change:labelTextTitle', this.updateLabelTextTitle );
    },

    /**
     *
     * @returns {ComboBoxView}
     */
    render: function() {
        this.prerenderingActions();

        this.renderTemplate( this.getTemplate() );
        this.updateProperties();

        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     * @returns {*}
     */
    getTemplate: function() {
        return this.template;
    },

    /**
     *
     * @param event
     * @returns {*}
     */
    onKeyDownControlHandler: function( event ) {
        var enabled = this.model.get( 'enabled' );
        var expandOnEnter = this.model.get( 'expandOnEnter' );

        if( !enabled ) {
            event.preventDefault();
            return;
        }

        if( event.ctrlKey || event.altKey ) {
            return;
        }

        if( this.isDropdown() ) {
            return this.dropDownView.onKeyDownHandler.call( this.dropDownView, event );
        }
        switch( event.which ) {
            case 40:    //Down Arrow
            case 13:    //Enter
                if( expandOnEnter ) {
                    event.preventDefault();
                    this.toggleDropdown();
                }
                break;
            default:
                break;
        }
    },

    /**
     *
     */
    onClickClearHandler: function() {
        var enabled = this.model.get( 'enabled' );

        if( enabled ) {
            this.model.set( 'value', null );
            this.ui.control.focus();
        }
    },

    /**
     *
     */
    onClickGripHandler: function() {
        var enabled = this.model.get( 'enabled' );

        if( enabled ) {
            this.toggleDropdown();
        }
    },

    /**
     *
     */
    updateProperties: function() {
        ListEditorBaseView.prototype.updateProperties.call( this );

        this.updateLabelText();
        this.updateLabelTextTitle();
        this.updateShowClear();
    },

    /**
     *
     */
    updateGrouping: function() {
        this.toggleDropdown( false );
    },

    /**
     *
     */
    updateLabelText: function() {
        var labelText = this.model.get( 'labelText' );

        if( labelText !== null && typeof labelText !== 'undefined' && labelText !== '' ) {
            this.ui.label.toggleClass( 'hidden', false );
        } else {
            this.ui.label.toggleClass( 'hidden', true );
        }

        this.ui.label.text( labelText );
    },

    /**
     *
     */
    updateLabelTextTitle: function() {
        var labelTextTitle = this.model.get( 'labelTextTitle' );
        var labelText = this.model.get( 'labelText' );

        if( labelTextTitle && labelText && labelText !== '' ) {
            this.ui.label.attr( 'title', labelText );
        } else {
            this.ui.label.attr( 'title', null );
        }
    },

    /**
     *
     */
    updateEnabled: function() {
        ListEditorBaseView.prototype.updateEnabled.call( this );

        var enabled = this.model.get( 'enabled' );

        if( !enabled ) {
            //Prevent got focus
            this.ui.control.removeAttr( 'tabindex' );
        } else {
            this.updateFocusable();
        }

    },

    /**
     *
     */
    updateValue: function() {
        this.updateShowClear();
    },

    /**
     *
     */
    updateShowClear: function() {
        var model = this.model;
        var showClear = model.get( 'showClear' );
        var value = model.get( 'value' );
        var noValue = value === null || typeof value === 'undefined';

        this.ui.clear.toggleClass( 'hidden', !showClear || noValue );
    },

    /**
     *
     */
    updateSelectedItem: function() {
    },

    /**
     *
     */
    updateDisabledItem: function() {
        this.toggleDropdown( false );
    },

    /**
     *
     * @returns {boolean}
     */
    isDropdown: function() {
        var model = this.model;
        return !!model.get( 'dropdown' );
    },

    /**
     *
     * @param toggle
     */
    toggleDropdown: function( toggle ) {
        var model = this.model;
        if( typeof toggle === 'undefined' ) {
            toggle = !model.get( 'dropdown' );
        }
        model.set( 'dropdown', toggle );
    },

    /**
     *
     */
    onChangeValueHandler: function() {
        this.renderValue();
    },

    /**
     *
     */
    rerender: function() {
    },

    /**
     *
     */
    renderValue: function() {
        var model = this.model;
        var multiSelect = model.get( 'multiSelect' );
        var value = this.model.get( 'value' );
        var $value = [];
        var valueTemplate = this.model.get( 'valueTemplate' );

        if( multiSelect && Array.isArray( value ) ) {
            var valueView = new ComboBoxValues( {
                items: value.map( function( val, i ) {
                    return {
                        '$value': valueTemplate( null, { value: val, index: i } ).render(),
                        'value': val,
                        'index': i
                    };
                } )
            } );
            valueView.listenTo( model, 'toggle', valueView.setFocus );
            this.listenTo( valueView, 'remove', this.onRemoveValueHandler );
            this.listenTo( valueView, 'search', _.debounce( this.onSearchValueHandler.bind( this ), 300 ) );
            $value = valueView.render();
        } else {
            $value = valueTemplate( null, { value: value } ).render();
        }
        this.ui.value.empty();
        this.ui.value.append( $value );

        editorBaseViewMixin.updateValueState.call( this );
    },

    /**
     *
     * @param value
     */
    onRemoveValueHandler: function( value ) {
        this.model.toggleValue( value, false );
    },

    /**
     * @description Устанока фильтра быстрого выбора элемента из списка
     * @param {string} text
     */
    onSearchValueHandler: function( text ) {
        this.toggleDropdown( true );
        this.model.set( 'autocompleteValue', text );
    },

    /**
     *
     * @param event
     */
    onClickValueHandler: function( event ) {
        var enabled = this.model.get( 'enabled' );

        if( enabled ) {
            this.toggleDropdown( true );
        }
    }

} );

InfinniUI.ComboBoxView = ComboBoxView;

//####app/controls/contextMenu/contextMenuControl.js
/**
 *
 * @constructor
 */
function ContextMenuControl() {
    _.superClass( ContextMenuControl, this );
}

_.inherit( ContextMenuControl, ContainerControl );

_.extend( ContextMenuControl.prototype, {

    /**
     *
     * @returns {ContextMenuModel}
     */
    createControlModel: function() {
        return new ContextMenuModel();
    },

    /**
     *
     * @param model
     * @returns {ContextMenuView}
     */
    createControlView: function( model ) {
        return new ContextMenuView( { model: model } );
    }

} );

InfinniUI.ContextMenuControl = ContextMenuControl;

//####app/controls/contextMenu/contextMenuModel.js
/**
 *
 * @constructor
 */
var ContextMenuModel = ContainerModel.extend( {
} );

InfinniUI.ContextMenuModel = ContextMenuModel;

//####app/controls/contextMenu/contextMenuView.js
/**
 *
 * @constructor
 */
var ContextMenuView = ContainerView.extend( {

    contextMenuTemplate: InfinniUI.Template[ 'controls/contextMenu/template/contextMenu.tpl.html' ],

    /**
     *
     */
    updateHorizontalAlignment: function() {
        var horizontalAlignment = this.model.get( 'horizontalAlignment' );
        var that = this;
        var $el;

        this.whenReady(
            function() {
                $el = that.$el.parent().parent();
                return $el.length > 0;
            },

            function() {
                if( horizontalAlignment == 'Right' ) {
                    $el
                        .addClass( 'pull-right' );
                } else {
                    $el
                        .removeClass( 'pull-right' );
                }
            }
        );
    },

    /**
     *
     * @returns {ContextMenuView}
     */
    render: function() {
        var exchange = InfinniUI.global.messageBus;
        var that = this;

        this.prerenderingActions();

        this.removeChildElements();

        this.$el = this.renderDropdown();

        this.bindUIElements();

        this.updateProperties();

        this.trigger( 'render' );

        this.postrenderingActions();

        exchange.subscribe( messageTypes.onOpenContextMenu.name, function( context, args ) {
            that.open( args.value );
        } );

        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop

        return this;
    },

    /**
     *
     * @returns {jQuery|HTMLElement}
     */
    renderDropdown: function() {
        var template = this.contextMenuTemplate;
        var items = this.model.get( 'items' ).toArray();
        var $result = $( template( { items: items } ) );

        this.appendItemsContent( $result, items );
        $result.on( 'click', function() {
            this.close();
        }.bind( this ) );
        $result.on( 'contextmenu', function( event ) {
            event.preventDefault();
        }.bind( this ) );
        return $result;
    },

    /**
     *
     * @param $dropdown
     * @param items
     */
    appendItemsContent: function( $dropdown, items ) {
        var that = this;
        var itemTemplate = this.model.get( 'itemTemplate' );
        var itemEl, $el;

        $dropdown.find( '.pl-popup-button__item' ).each( function( i, el ) {
            $el = $( el );
            itemEl = itemTemplate( undefined, { index: i, item: items[ i ] } );
            that.addChildElement( itemEl );
            $el.append( itemEl.render() );
        } );
    },

    /**
     *
     * @param rightclickCoords
     */
    open: function( rightclickCoords ) {
        var that = this;

        $( 'body' ).append( this.$el );

        var $parent = this.$el.parent();

        this.$el.addClass( 'open' );
        $parent.addClass( 'open' );

        this.alignDropdown( rightclickCoords );

        var $ignoredElements = this.$el;
        new ActionOnLoseFocus( $ignoredElements, function() {
            that.close();
        } );
    },

    /**
     *
     */
    close: function() {
        this.$el.removeClass( 'open' );
        this.$el.parent().removeClass( 'open' );
        this.$el.detach();
    },

    /**
     *
     * @param rightclickCoords
     */
    alignDropdown: function( rightclickCoords ) {
        var horizontalAlignment = this.model.get( 'horizontalAlignment' );
        var $parent = this.$el.parent();
        var parentDimentions = { width: $parent.width(), height: $parent.height() };
        var elDimentions = {
            width: this.$el[ 0 ].children[ 0 ].clientWidth,
            height: this.$el[ 0 ].children[ 0 ].clientHeight
        };

        if( rightclickCoords.x + elDimentions.width > parentDimentions.width ) {
            rightclickCoords.x -= elDimentions.width;
        }
        if( rightclickCoords.y + elDimentions.height > parentDimentions.height ) {
            rightclickCoords.y -= elDimentions.height;
        }

        this.$el.offset( {
            top: rightclickCoords.y,
            left: rightclickCoords.x
        } );
    },

    /**
     *
     */
    updateGrouping: function() {
    },

    /**
     *
     * @param conditionFunction
     * @param onConditionFunction
     * @param n
     */
    whenReady: function( conditionFunction, onConditionFunction, n ) {
        var that = this;

        if( typeof n === 'undefined' ) {
            n = 100;
        }

        if( !conditionFunction() ) {
            if( n > 0 ) {
                setTimeout( function() {
                    that.whenReady( conditionFunction, onConditionFunction, n - 1 );
                }, 10 );
            }
        } else {
            onConditionFunction();
        }
    }

} );

InfinniUI.ContextMenuView = ContextMenuView;

//####app/controls/divider/dividerControl.js
/**
 *
 * @param parent
 * @constructor
 * @arguments Control
 */
function DividerControl( parent ) {
    _.superClass( DividerControl, this, parent );
}

_.inherit( DividerControl, Control );

_.extend( DividerControl.prototype, {

    /**
     *
     * @returns {DividerModel}
     */
    createControlModel: function() {
        return new DividerModel();
    },

    /**
     *
     * @param model
     * @returns {DividerView}
     */
    createControlView: function( model ) {
        return new DividerView( { model: model } );
    }

} );

InfinniUI.DividerControl = DividerControl;

//####app/controls/divider/dividerModel.js
/**
 *
 * @arguments ControlModel
 * @constructor
 */
var DividerModel = ControlModel.extend( {

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.DividerModel = DividerModel;

//####app/controls/divider/dividerView.js
/**
 *
 * @arguments ControlView
 * @constructor
 */
var DividerView = ControlView.extend( {

    tagName: 'hr',

    className: 'pl-divider',

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ControlView.prototype.initialize.call( this, options );
    },

    /**
     *
     * @returns {DividerView}
     */
    render: function() {
        this.prerenderingActions();

        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    }

} );

InfinniUI.DividerView = DividerView;

//####app/controls/extensionPanel/extensionPanel.js
/**
 * @augments ContainerControl
 * @constructor
 */
var ExtensionPanelControl = function() {
    _.superClass( ExtensionPanelControl, this );
};

_.inherit( ExtensionPanelControl, ContainerControl );

_.extend( ExtensionPanelControl.prototype, {

    /**
     * @returns {ExtensionPanelModel}
     */
    createControlModel: function() {
        return new ExtensionPanelModel();
    },

    /**
     *
     * @param model
     * @retunrs {ExtensionPanelView}
     */
    createControlView: function( model ) {
        return new ExtensionPanelView( { model: model } );
    }

} );

InfinniUI.ExtensionPanelControl = ExtensionPanelControl;

//####app/controls/extensionPanel/extensionPanelModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var ExtensionPanelModel = ContainerModel.extend( {

    defaults: _.defaults( {
        extensionName: null,
        context: null
    }, ContainerModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this );
    }

} );

InfinniUI.ExtensionPanelModel = ExtensionPanelModel;

//####app/controls/extensionPanel/extensionPanelView.js
/**
 * @constructor
 * @augments ContainerView
 */
var ExtensionPanelView = ContainerView.extend( {

    className: 'pl-extension-panel',

    /**
     *
     */
    initialize: function() {
        ContainerView.prototype.initialize.apply( this );
        this.extensionObject = null;
    },

    /**
     *
     * @returns {ExtensionPanelView}
     */
    render: function() {
        this.prerenderingActions();

        if ( !this.extensionObject ) {
            this.initExtensionObject();
        }

        this.extensionObject.render();

        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    updateGrouping: function() {
    },

    /**
     *
     */
    initExtensionObject: function() {
        var extensionName = this.model.get( 'extensionName' );
        var context = this.model.get( 'context' );
        var itemTemplate = this.model.get( 'itemTemplate' );
        var parameters = this.model.get( 'parameters' );
        var items = this.model.get( 'items' );
        var builder = this.model.get( 'builder' );
        var initializer = InfinniUI.extensionPanels.getByName( extensionName ) || window[ extensionName ];

        if( _.isFunction( initializer ) ) {
            this.extensionObject = new initializer( context, { $el: this.$el, parameters: parameters, itemTemplate: itemTemplate, items: items, builder: builder } );
        } else {
            throw new Error( 'invalid extensionPanel name' );
        }
    }

} );

InfinniUI.ExtensionPanelView = ExtensionPanelView;

//####app/controls/fileBox/fileBoxControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments Control
 * @mixes editorBaseControlMixin
 */
function FileBoxControl( parent ) {
    _.superClass( FileBoxControl, this, parent );
    this.initialize_editorBaseControl();
}

_.inherit( FileBoxControl, Control );

_.extend( FileBoxControl.prototype, {

    /**
     * @returns {FileBoxModel}
     */
    createControlModel: function() {
        return new FileBoxModel();
    },

    /**
     *
     * @param model
     * @returns {FileBoxView}
     */
    createControlView: function( model ) {
        return new FileBoxView( { model: model } );
    }

}, editorBaseControlMixin );

InfinniUI.FileBoxControl = FileBoxControl;

//####app/controls/fileBox/fileBoxModel.js
/**
 * @constructor
 * @augments ControlModel
 * @mixes editorBaseModelMixin
 */
var FileBoxModel = ControlModel.extend( _.extend( {

    defaults: _.defaults(
        {
            labelText: null,
            labelTextTitle: null
        },
        editorBaseModelMixin.defaults_editorBaseModel,
        ControlModel.prototype.defaults
    ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
        this.initialize_editorBaseModel();

        this.set( 'acceptTypes', new Collection() );
        this.on( 'change:file', this.onChangeFileHandler );
        this.on( 'change:value', function( model, value ) {
            if( value instanceof File ) {
                model.set( 'fileName', value.name );
            }
        } );

        this.on( 'invalid', function( model, error ) {
            this.set( 'errorText', error );
        } );
    },

    /**
     *
     * @param attrs
     * @param options
     * @returns {*|string}
     */
    validate: function( attrs, options ) {
        var file = attrs.file;
        var maxSize = this.get( 'maxSize' );
        var acceptTypes = this.get( 'acceptTypes' );

        if( file ) {
            if( maxSize ) {
                if( file.size > maxSize ) {
                    return localized.strings.FileBox.fileSizeTooBig
                        .replace( /\{chosen-size\}/g, ( file.size / ( 1024 * 1024 ) ).toFixed( 1 ) )
                        .replace( /\{permitted-size\}/g, ( maxSize / ( 1024 * 1024 ) ).toFixed( 1 ) );
                }
            }

            if( acceptTypes.length ) {
                var acceptType = acceptTypes.contains( file.type );
                var fileName = file.name.toLowerCase();

                if( !acceptType ) {
                    var len = fileName.length;
                    acceptType = acceptTypes.some( function( name ) {
                        var index = fileName.lastIndexOf( name.toLowerCase() );

                        return index !== -1 && index === len - name.length;
                    } );
                }

                if( !acceptType ) {
                    return localized.strings.FileBox.incorrectFormat;
                }
            }
        }
    },

    /**
     *
     * @param file
     */
    setFile: function( file ) {
        if( this.set( 'file', file, { validate: true } ) ) {
            this.set( 'errorText', '' );
        }
    },

    /**
     *
     */
    removeFile: function() {
        this.setFile( null );
    },

    /**
     *
     * @param model
     * @param file
     */
    onChangeFileHandler: function( model, file ) {
        if( file ) {
            model.set( 'fileName', file.name );
            model.set( 'fileSize', file.size );
        } else {
            model.set( 'fileName', null );
            model.set( 'fileSize', null );
        }
        model.set( 'value', file );
    }

}, editorBaseModelMixin ) );

InfinniUI.FileBoxModel = FileBoxModel;

//####app/controls/fileBox/fileBoxView.js
/**
 * @augments ControlView
 * @mixes editorBaseViewMixin
 * @constructor
 */
var FileBoxView = ControlView.extend( /** @lends FileBoxView.prototype */ _.extend( {}, editorBaseViewMixin, {

    template: InfinniUI.Template[ 'controls/fileBox/template/template.tpl.html' ],

    className: 'pl-file-box',

    UI: _.extend( {}, editorBaseViewMixin.UI, {
        label: '.pl-control-label',
        btnRemove: '.pl-filebox-btn-remove',
        btnPick: '.pl-filebox-btn-pick',
        fileEmpty: '.pl-filebox-file-empty',
        fileUpload: '.pl-filebox-file-upload',
        fileDownload: '.pl-filebox-file-download',
        fileDownloadUrl: '.pl-filebox-file-download-url',
        edit: '.pl-filebox-edit',
        control: '.form-control',
        input: 'input'
    } ),

    events: {
        'change input': 'onChangeFileHandler',
        'click .pl-filebox-btn-remove': 'onClickRemoveImageHandler'
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:labelText', this.updateLabelText );
        this.listenTo( this.model, 'change:labelTextTitle', this.updateLabelTextTitle );
        this.listenTo( this.model, 'change:fileName', this.updateFileName );
        this.listenTo( this.model, 'change:fileSize', this.updateFileSize );
        this.listenTo( this.model, 'change:fileTime', this.updateFileTime );
        this.listenTo( this.model, 'change:fileType', this.updateFileType );
        this.listenTo( this.model, 'change:value', this.updateValue );

        this.listenTo( this.model, 'change:hintText', this.updateHintText );
        this.listenTo( this.model, 'change:errorText', this.updateErrorText );
        this.listenTo( this.model, 'change:warningText', this.updateWarningText );

        this.listenTo( this.model, 'invalid', this.onInvalidHandler );

        var acceptTypes = this.model.get( 'acceptTypes' );
        acceptTypes.onChange( this.updateAcceptTypes.bind( this ) );
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );

        this.updateLabelText();
        this.updateLabelTextTitle();
        this.updateFileName();
        this.updateFileSize();
        this.updateFileType();
        this.updateFileTime();
        this.updateAcceptTypes();
        this.updateValue();

        this.updateHintText();
        this.updateErrorText();
        this.updateWarningText();
    },

    /**
     *
     */
    updateLabelText: function() {
        var labelText = this.model.get( 'labelText' );

        if( labelText !== '' && labelText !== null && typeof labelText !== 'undefined' ) {
            this.ui.label
                .css( { display: 'inline-block' } )
                .text( labelText );
        } else {
            this.ui.label.css( { display: 'none' } );
        }
    },

    /**
     *
     */
    updateLabelTextTitle: function() {
        var labelTextTitle = this.model.get( 'labelTextTitle' );
        var labelText = this.model.get( 'labelText' );

        if( labelTextTitle && labelText && labelText !== '' ) {
            this.ui.label.attr( 'title', labelText );
        } else {
            this.ui.label.attr( 'title', null );
        }
    },

    /**
     *
     */
    updateAcceptTypes: function() {
        var acceptTypes = this.model.get( 'acceptTypes' );
        if( acceptTypes.length === 0 ) {
            this.ui.input.removeAttr( 'accept' );
        } else {
            var accept = acceptTypes.toArray().join( ',' );
            this.ui.input.attr( 'accept', accept );
        }
    },

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );

        if( focusable ) {
            this.ui.control.attr( 'tabindex', 0 );
        } else {
            this.ui.control.removeAttr( 'tabindex' );
        }
    },

    /**
     *
     */
    updateText: function() {
        var text = this.model.get( 'text' );

        this.ui.btnPick.attr( 'title', text );
    },

    /**
     *
     */
    updateHintText: function() {
        var hintText = this.model.get( 'hintText' );

        if( hintText ) {
            this.ui.hintText
                .text( hintText )
                .removeClass( 'hidden' );
        } else {
            this.ui.hintText
                .text( '' )
                .addClass( 'hidden' );
        }
    },

    /**
     *
     */
    updateErrorText: function() {
        var errorText = this.model.get( 'errorText' );

        if( errorText ) {
            this.ui.errorText
                .text( errorText )
                .removeClass( 'hidden' );
        } else {
            this.ui.errorText
                .text( '' )
                .addClass( 'hidden' );
        }
    },

    /**
     *
     */
    updateWarningText: function() {
        var warningText = this.model.get( 'warningText' );

        if( warningText ) {
            this.ui.warningText
                .text( warningText )
                .removeClass( 'hidden' );
        } else {
            this.ui.warningText
                .text( '' )
                .addClass( 'hidden' );
        }

    },

    /**
     *
     */
    updateEnabled: function() {
        ControlView.prototype.updateEnabled.call( this );

        var isEnabled = this.model.get( 'enabled' );

        this.ui.input.prop( 'disabled', !isEnabled );
        this.ui.btnRemove.prop( 'disabled', !isEnabled );
        this.ui.btnPick.toggleClass( 'disabled', !isEnabled );

    },

    /**
     *
     */
    updateFileName: function() {
        var fileName = this.model.get( 'fileName' );

        this.ui.fileUpload.text( fileName );
        this.ui.fileDownloadUrl.text( fileName );
    },

    /**
     *
     */
    updateFileSize: function() {
    },

    /**
     *
     */
    updateFileInfo: function() {
        return;
    },

    /**
     *
     */
    updateFileTime: function() {
        // var time = this.model.get( 'fileTime' );
        //@TODO Update file's datetime on view
    },

    /**
     *
     */
    updateFileType: function() {
        // var fileType = this.model.get( 'fileType' );
        //@TODO Update file's mime type on view
    },

    /**
     *
     */
    updateValue: function() {
        var model = this.model;
        var value = model.get( 'value' );
        var fileEmpty = false;
        var fileUpload = false;
        var fileDownload = false;

        if( value === null || typeof value === 'undefined' ) {
            //No file
            fileEmpty = value === null || typeof value === 'undefined';
            this.ui.input.val( null );
            this.updateUrl( null );
        } else if( value && typeof value === 'object' ) {
            //File instance
            fileUpload = value && typeof value === 'object';
            this.updateUrl( null );
        } else {
            //Url
            fileDownload = true;
            this.updateUrl( value );
        }

        this.ui.fileEmpty.toggleClass( 'hidden', !fileEmpty );
        this.ui.fileUpload.toggleClass( 'hidden', !fileUpload );
        this.ui.fileDownload.toggleClass( 'hidden', !fileDownload );

        this.ui.btnRemove.toggleClass( 'hidden', fileEmpty );
        this.ui.btnPick.toggleClass( 'hidden', !fileEmpty );
    },

    /**
     *
     * @param url
     */
    updateUrl: function( url ) {
        this.ui.fileDownloadUrl.attr( 'href', url );
        var none = url === null || typeof url === 'undefined';
        this.$el.toggleClass( 'pl-empty', none );
        this.updateFileInfo();
    },

    /**
     *
     */
    onClickRemoveImageHandler: function() {
        this.model.removeFile();
        this.ui.input.val( '' );
    },

    /**
     *
     */
    onChangeFileHandler: function() {
        var file = null;
        var files = this.ui.input[ 0 ].files;

        if( files && files[ 0 ] ) {
            file = files[ 0 ];
        }
        this.model.setFile( file );
    },

    /**
     *
     * @returns {FileBoxView}
     */
    render: function() {
        this.prerenderingActions();

        this.renderTemplate( this.template );
        this.updateProperties();

        this.trigger( 'render' );

        this.postrenderingActions();

        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop

        return this;
    },

    /**
     *
     */
    onInvalidHandler: function() {
        this.ui.input.val( null );
    }

} ) );

InfinniUI.FileBoxView = FileBoxView;

//####app/controls/form/formControl.js
/**
 * @augments StackPanelControl
 * @param parent
 * @constructor
 */
function FormControl( parent ) {
    _.superClass( FormControl, this, parent );
}

_.inherit( FormControl, StackPanelControl );

_.extend( FormControl.prototype, {

    /**
     * @returns {FormModel}
     */
    createControlModel: function() {
        return new FormModel();
    },

    /**
     * @returns {FormView}
     * @param model
     */
    createControlView: function( model ) {
        return new FormView( { model: model } );
    },

    /**
     *
     * @param callback
     */
    onSubmit: function( callback ) {
        this.controlView.$el.on( 'submit', callback );
    },

    /**
     *
     * @param func
     */
    setSubmitFunction: function( func ) {
        this.controlModel.set( 'submitFunction', func );
    },

    /**
     * @returns {*}
     */
    getSubmitFunction: function() {
        return this.controlModel.get( 'submitFunction' );
    },

    /**
     *
     * @param method
     */
    setMethod: function( method ) {
        this.controlModel.set( 'method', method );
    },

    /**
     * @returns {*}
     */
    getMethod: function() {
        return this.controlModel.get( 'method' );
    },

    /**
     *
     * @param action
     */
    setAction: function( action ) {
        this.controlModel.set( 'action', action );
    },

    /**
     * @returns {*}
     */
    getAction: function() {
        return this.controlModel.get( 'action' );
    }

} );

InfinniUI.FormControl = FormControl;

//####app/controls/form/formModel.js
/**
 * @constructor
 * @auguments StackPanelModel
 */
var FormModel = StackPanelModel.extend( {

    defaults: _.defaults( {
        submitFunction: null,
        method: '',
        action: ''
    }, StackPanelModel.prototype.defaults )

} );

InfinniUI.FormModel = FormModel;

//####app/controls/form/formView.js
/**
 * @constructor
 * @augments StackPanelView
 */
var FormView = StackPanelView.extend( {

    className: 'pl-form',

    tagName: 'form',

    template: {
        plain: InfinniUI.Template[ 'controls/form/template/form.tpl.html' ]
    },

    events: {
        'submit': 'onSubmit'
    },

    /**
     *
     * @param e
     */
    onSubmit: function( e ) {
        e.preventDefault();
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        StackPanelView.prototype.initialize.call( this, options );

        this.listenTo( this.model, 'change:method', this.updateMethod );
        this.listenTo( this.model, 'change:action', this.updateAction );
    },

    /**
     *
     */
    updateGrouping: function() {
        this.strategy = new StackPanelViewPlainStrategy( this );
    },

    /**
     *
     * @returns {FormView}
     */
    render: function() {
        this.prerenderingActions();

        this.removeChildElements();

        var preparedItems = this.strategy.prepareItemsForRendering();
        var template = this.strategy.getTemplate();

        this.$el.html( template( preparedItems ) );

        this.strategy.appendItemsContent( preparedItems, '.pl-form-i' );

        this.bindUIElements();
        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();

        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop

        return this;
    },

    /**
     *
     */
    updateProperties: function() {
        StackPanelView.prototype.updateProperties.call( this );

        this.updateMethod();
        this.updateAction();
    },

    /**
     *
     */
    updateMethod: function() {
        var method = this.model.get( 'method' );

        this.$el.attr( 'method', method );
    },

    /**
     *
     */
    updateAction: function() {
        var action = this.model.get( 'action' );

        this.$el.attr( 'action', action );
    }

} );

InfinniUI.FormView = FormView;

//####app/controls/frame/frameControl.js
/**
 * @constructor
 * @augments Control
 * @mixes editorBaseControlMixin
 */
var FrameControl = function() {
    _.superClass( FrameControl, this );
    this.initialize_editorBaseControl();
};

_.inherit( FrameControl, Control );

_.extend( FrameControl.prototype, {

    /**
     * @returns {FrameModel}
     */
    createControlModel: function() {
        return new FrameModel();
    },

    /**
     * @returns {FrameView}
     * @param model
     */
    createControlView: function( model ) {
        return new FrameView( { model: model } );
    }

}, editorBaseControlMixin );

InfinniUI.FrameControl = FrameControl;

//####app/controls/frame/frameModel.js
/**
 * @constructor
 * @augments ControlModel
 * @mixes editorBaseModelMixin
 */
var FrameModel = ControlModel.extend( _.extend( {

    defaults: _.defaults( {},
        editorBaseModelMixin.defaults_editorBaseModel,
        ControlModel.prototype.defaults
    ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
        this.initialize_editorBaseModel();
    }

}, editorBaseModelMixin ) );

InfinniUI.FrameModel = FrameModel;

//####app/controls/frame/frameView.js
/**
 * @constructor
 * @augments ControlView
 * @mixes editorBaseViewMixin
 */
var FrameView = ControlView.extend( _.extend( {}, editorBaseViewMixin, {

    className: 'pl-frame',

    template: InfinniUI.Template[ 'controls/frame/template/frame.tpl.html' ],

    UI: _.extend( {}, editorBaseViewMixin.UI, {
        iframe: 'iframe'
    } ),

    /**
     *
     */
    initialize: function() {
        ControlView.prototype.initialize.apply( this );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );
        editorBaseViewMixin.initHandlersForProperties.call( this );
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );
        editorBaseViewMixin.updateProperties.call( this );
    },

    /**
     *
     */
    updateValue: function() {
        var value = this.model.get( 'value' );

        this.ui.iframe.attr( 'src', value );
    },

    /**
     * @returns {*}
     */
    getData: function() {
        return _.extend(
            {},
            ControlView.prototype.getData.call( this ),
            editorBaseViewMixin.getData.call( this ),
            {

            }
        );
    },

    /**
     *
     * @returns {FrameView}
     */
    render: function() {
        var model = this.model;

        this.prerenderingActions();
        this.renderTemplate( this.template );

        this.updateProperties();

        this.trigger( 'render' );
        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    }

} ) );

InfinniUI.FrameView = FrameView;

//####app/controls/gridPanel/gridPanelControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function GridPanelControl( parent ) {
    _.superClass( GridPanelControl, this, parent );
}

_.inherit( GridPanelControl, ContainerControl );

_.extend( GridPanelControl.prototype, {

    /**
     * @returns {GridPanelModel}
     */
    createControlModel: function() {
        return new GridPanelModel();
    },

    /**
     * @returns {GridPanelView}
     * @param model
     */
    createControlView: function( model ) {
        return new GridPanelView( { model: model } );
    }

} );

InfinniUI.GridPanelControl = GridPanelControl;

//####app/controls/gridPanel/gridPanelModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var GridPanelModel = ContainerModel.extend( {

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.GridPanelModel = GridPanelModel;

//####app/controls/gridPanel/gridPanelView.js
/**
 * @constructor
 * @augments ContainerView
 */
var GridPanelView = ContainerView.extend( {

    className: 'pl-grid-panel pl-clearfix',

    columnCount: 12,

    template: {
        row: InfinniUI.Template[ 'controls/gridPanel/template/row.tpl.html' ]
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ContainerView.prototype.initialize.call( this, options );
    },

    /**
     *
     * @returns {GridPanelView}
     */
    render: function() {
        this.prerenderingActions();

        this.removeChildElements();

        this.renderItemsContents();
        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    renderItemsContents: function() {
        var items = this.model.get( 'items' );
        var itemTemplate = this.model.get( 'itemTemplate' );
        var view = this;
        var row = [];
        var rowSize = 0;
        var element;

        items.forEach( function( item, i ) {
            element = itemTemplate( undefined, { item: item, index: i } );
            var span = element.getColumnSpan();
            if( rowSize + span > view.columnCount ) {
                view.renderRow( row );
                row.length = 0;
                rowSize = 0;
            }

            row.push( element );
            rowSize += span;
        } );

        if( row.length ) {
            view.renderRow( row );
        }
    },

    /**
     *
     * @param row
     */
    renderRow: function( row ) {
        var view = this;
        var $row = $( '<div class="pl-clearfix"></div>' );

        $row.append( row.map( function( element ) {
            view.addChildElement( element );
            return element.render();
        } ) );
        this.$el.append( $row );
    },

    /**
     *
     */
    updateGrouping: function() {
    }

} );

InfinniUI.GridPanelView = GridPanelView;

//####app/controls/icon/iconControl.js
/**
 *
 * @constructor
 * @augments Control
 */
function IconControl() {
    _.superClass( IconControl, this );
}

_.inherit( IconControl, Control );

_.extend( IconControl.prototype, {

    /**
     * @returns {IconModel}
     */
    createControlModel: function() {
        return new IconModel();
    },

    /**
     * @returns {IconView}
     * @param model
     */
    createControlView: function( model ) {
        return new IconView( { model: model } );
    }

} );

InfinniUI.IconControl = IconControl;

//####app/controls/icon/iconModel.js
/**
 * @constructor
 * @augments ControlModel
 */
var IconModel = ControlModel.extend( {

    defaults: _.defaults( {
        value: null,
        size: '',
        focusable: false

    }, ControlModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
    }

} );

InfinniUI.IconModel = IconModel;

//####app/controls/icon/iconView.js
/**
 * @constructor
 * @arguments ControlView
 */
var IconView = ControlView.extend( {

    className: 'pl-icon fa',

    tagName: 'i',

    /**
     *
     * @returns {IconView}
     */
    render: function() {
        this.prerenderingActions();
        this.updateProperties();
        this.trigger( 'render' );
        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    renderIcon: function() {
        var value = this.model.get( 'value' );
        this.switchClass( 'fa', value );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:value', this.updateValue );
        this.listenTo( this.model, 'change:size', this.updateSize );
    },

    /**
     *
     */
    updateSize: function() {
        var newSize = this.model.get( 'size' );
        this.changeElementClass( this.valueToSizeClassName( this.currentSize ), this.valueToSizeClassName( newSize ) );
        this.currentSize = newSize;
    },

    /**
     *
     * @param value
     * @returns {string}
     */
    valueToSizeClassName: function( value ) {
        if( value ) return 'pl-iconSize-' + value.toLowerCase();
        else return '';
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );
        this.updateValue();
        this.updateSize();
    },

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );

        if ( focusable ) {
            this.$el.attr( 'tabindex', 0 );
        } else {
            this.$el.removeAttr( 'tabindex' );
        }
    },

    /**
     *
     */
    updateValue: function() {
        this.renderIcon();
    },

    /**
     *
     */
    updateTextStyle: function() {
        // do nothing, because icon don't have text
    }

} );

InfinniUI.IconView = IconView;

//####app/controls/imageBox/imageBoxControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments Control
 * @mixes editorBaseControlMixin
 */
function ImageBoxControl( parent ) {
    _.superClass( ImageBoxControl, this, parent );
    this.initialize_editorBaseControl();
}

_.inherit( ImageBoxControl, Control );

_.extend( ImageBoxControl.prototype, {

    /**
     * @returns {ImageBoxModel}
     */
    createControlModel: function() {
        return new ImageBoxModel();
    },

    /**
     * @returns {ImageBoxView}
     * @param model
     */
    createControlView: function( model ) {
        return new ImageBoxView( { model: model } );
    }

}, editorBaseControlMixin );

InfinniUI.ImageBoxControl = ImageBoxControl;

//####app/controls/imageBox/imageBoxModel.js
/**
 * @constructor
 * @augments ControlModel
 * @mixes editorBaseModelMixin
 */
var ImageBoxModel = ControlModel.extend( _.extend( {

    defaults: _.defaults( {
        text: localized.strings.ImageBox.chooseImage,
        currentWideSide: null
    },
        editorBaseModelMixin.defaults_editorBaseModel,
        ControlModel.prototype.defaults
    ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
        this.initialize_editorBaseModel();
        this.set( 'acceptTypes', new Collection() );

        this.on( 'invalid', function( model, error ) {
            this.set( 'errorText', error );
        } );
    },

    /**
     *
     * @param attrs
     * @param options
     * @returns {*}
     */
    validate: function( attrs, options ) {
        var file = attrs.file;
        var maxSize = this.get( 'maxSize' );
        var acceptTypes = this.get( 'acceptTypes' );

        if ( file ) {
            if ( maxSize ) {
                if ( file.size > maxSize ) {
                    return localized.strings.ImageBox.imageSizeTooBig
                        .replace( /\{chosen-size\}/g, ( file.size / ( 1024 * 1024 ) ).toFixed( 1 ) )
                        .replace( /\{permitted-size\}/g, ( maxSize / ( 1024 * 1024 ) ).toFixed( 1 ) );
                }
            }

            if ( acceptTypes.length && !acceptTypes.contains( file.type ) ) {
                return localized.strings.ImageBox.incorrectFormat;
            }
        }
    },

    /**
     *
     * @param file
     */
    setFile: function( file ) {
        if ( this.set( 'file', file, { validate: true } ) ) {
            this.set( 'errorText', '' );
        }
    },

    /**
     *
     */
    removeFile: function() {
        this.setFile( null );
    }

}, editorBaseModelMixin ) );

InfinniUI.ImageBoxModel = ImageBoxModel;

//####app/controls/imageBox/imageBoxView.js
/**
 * @augments ControlView
 * @mixes editorBaseViewMixin
 * @mixes exifRotate
 * @constructor
 */
var ImageBoxView = ControlView.extend( _.extend( {}, editorBaseViewMixin, exifRotate, {

    className: 'pl-imagebox',

    template: InfinniUI.Template[ 'controls/imageBox/template/imageBox.tpl.html' ],

    UI: _.extend( {}, editorBaseViewMixin.UI, {
        input: 'input',
        img: 'img',
        file: '.pl-image-file',
        remove: '.pl-image-remove',
        uploadButton: '.pl-image-file-upload-button'
    } ),

    events: {
        'change input': 'onChangeFileHandler',
        'click .pl-image-remove': 'onClickRemoveImageHandler'
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );

        this.listenTo( this.model, 'change:value', this.updateValue );
        this.listenTo( this.model, 'change:hintText', this.updateHintText );
        this.listenTo( this.model, 'change:errorText', this.updateErrorText );
        this.listenTo( this.model, 'change:warningText', this.updateWarningText );
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );

        this.updateValue();
        this.updateHintText();
        this.updateErrorText();
        this.updateWarningText();
    },

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );

        if( focusable ) {
            this.ui.file.attr( 'tabindex', 0 );
        } else {
            this.ui.file.removeAttr( 'tabindex' );
        }
    },

    /**
     *
     */
    updateText: function() {
        var text = this.model.get( 'text' );

        this.ui.uploadButton.text( text );
    },

    /**
     *
     */
    updateEnabled: function() {
        ControlView.prototype.updateEnabled.call( this );
        var isEnabled = this.model.get( 'enabled' );

        this.ui.input.prop( 'disabled', !isEnabled );
    },

    /**
     *
     */
    updateValue: function() {
        var that = this;
        var model = this.model;
        var value = model.get( 'value' );

        if( value && typeof value === 'object' ) {
            //Native FileAPI File instance, start loading preview
            this.stopLoadingFile();
            var fileLoader = this.loadPreview( value );

            this.fileLoader = fileLoader;

            fileLoader.then( function( file, content ) {
                that.updateUrl( content );
            }.bind( this ), function( err ) {
                console.log( err );
            } );
        } else {
            this.updateUrl( value );
        }
    },

    /**
     *
     * @param value
     */
    rotate: function( value ) {
        this.ui.img.css( 'transform', this.rotation[ value ] );
    },

    /**
     *
     * @param url
     */
    updateUrl: function( url ) {
        var that = this;

        this.ui.img.get( 0 ).onload = function() {
            that.updateRotation( function() {
                that.setPerfectPosition();
            } );
        };

        this.ui.img.attr( 'src', url );

        var none = url === null || typeof url === 'undefined';

        this.$el.toggleClass( 'pl-empty', none );
    },

    /**
     *
     * @param callback
     */
    updateRotation: function( callback ) {
        var that = this;
        var file = this.model.get( 'file' );

        if( file ) {
            this.orientation( file, function( base64img, value ) {
                that.rotate( value );
                callback();
            } );
        } else {
            this.rotate( 1 );
            callback();
        }
    },

    /**
     *
     */
    setPerfectPosition: function() {
        var img = this.ui.img;
        var width = img.get( 0 ).naturalWidth;
        var height = img.get( 0 ).naturalHeight;
        var wideSide = 'limit-width';
        var currentWideSide = this.model.get( 'currentWideSide' );

        if( width >= height ) {
            wideSide = 'limit-height';
        }

        this.$el.removeClass( currentWideSide );
        this.$el.addClass( wideSide );
        this.model.set( 'currentWideSide', wideSide );
    },

    /**
     *
     */
    stopLoadingFile: function() {
        var fileLoader = this.fileLoader;

        if( fileLoader && fileLoader.state() === 'pending' ) {
            fileLoader.reject();
        }
    },

    /**
     *
     * @param file
     */
    loadPreview: function( file ) {
        var defer = $.Deferred();
        var reader = new FileReader();

        reader.onload = ( function( file ) {
            return function( event ) {
                defer.resolve( file, event.target.result );
            };
        }( file ) );
        reader.onerror = function( event ) {
            defer.reject( event );
        };
        reader.readAsDataURL( file );
        return defer.promise();
    },

    /**
     *
     */
    onClickRemoveImageHandler: function() {
        this.model.removeFile();
        this.ui.input.val( '' );
    },

    /**
     *
     */
    onChangeFileHandler: function() {
        var file = null;
        var files = this.ui.input[ 0 ].files;

        if( files && files[ 0 ] ) {
            file = files[ 0 ];
        }
        this.model.setFile( file );
    },

    /**
     *
     * @returns {render}
     */
    render: function() {
        this.prerenderingActions();

        this.renderTemplate( this.template );
        this.updateProperties();

        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    }

} ) );

InfinniUI.ImageBoxView = ImageBoxView;

//####app/controls/indeterminateCheckBox/indeterminateCheckBoxControl.js
/**
 * @augments CheckBoxControl
 * @param parent
 * @constructor
 * @mixes editorBaseControlMixin
 */
function IndeterminateCheckBoxControl( parent ) {
    _.superClass( IndeterminateCheckBoxControl, this, parent );
    this.initialize_editorBaseControl();
}

_.inherit( IndeterminateCheckBoxControl, CheckBoxControl );

_.extend( IndeterminateCheckBoxControl.prototype, {

    /**
     * @returns {IndeterminateCheckBoxModel}
     */
    createControlModel: function() {
        return new IndeterminateCheckBoxModel();
    },

    /**
     * @returns {IndeterminateCheckBoxView}
     */
    createControlView: function( model ) {
        return new IndeterminateCheckBoxView( { model: model } );
    }

}, editorBaseControlMixin );

InfinniUI.IndeterminateCheckBoxControl = IndeterminateCheckBoxControl;

//####app/controls/indeterminateCheckBox/indeterminateCheckBoxModel.js
/**
 * @constructor
 * @augments CheckBoxModel
 */
var IndeterminateCheckBoxModel = CheckBoxModel.extend( {

    defaults: _.defaults( {
        value: 'unchecked'
    }, CheckBoxModel.prototype.defaults )

} );

InfinniUI.IndeterminateCheckBoxModel = IndeterminateCheckBoxModel;

//####app/controls/indeterminateCheckBox/indeterminateCheckBoxView.js
/**
 * @constructor
 * @augments CheckBoxView
 */
var IndeterminateCheckBoxView = CheckBoxView.extend( {

    className: 'pl-indeterminate-checkbox',

    /**
     *
     */
    onClickHandler: function() {
        var model = this.model;
        var enabled = model.get( 'enabled' );

        if( enabled ) {
            var newValue = model.get( 'value' );
            newValue = newValue === 'indeterminate' ? 'unchecked' : newValue === 'unchecked' ? 'checked' : 'unchecked';
            model.set( 'value', newValue );
        }
    },

    /**
     *
     */
    updateValue: function() {
        var value = this.model.get( 'value' );

        if( value === 'checked' ) {
            this.ui.input.prop( 'indeterminate', false );
            this.ui.input.prop( 'checked', true );
        } else if( value === 'unchecked' ) {
            this.ui.input.prop( 'indeterminate', false );
            this.ui.input.prop( 'checked', false );
        } else if( value === 'indeterminate' ) {
            this.ui.input.prop( 'checked', false );
            this.ui.input.prop( 'indeterminate', true );
        }
    }

} );

InfinniUI.IndeterminateCheckBoxView = IndeterminateCheckBoxView;

//####app/controls/link/linkElementControl.js
/**
 * @constructor
 * @augments ButtonControl
 */
function LinkElementControl() {
    _.superClass( LinkElementControl, this );
}

_.inherit( LinkElementControl, ButtonControl );

_.extend( LinkElementControl.prototype, {

    /**
     * @returns {LinkElementModel}
     */
    createControlModel: function() {
        return new LinkElementModel();
    },

    /**
     * @returns {LinkElementView}
     * @param model
     */
    createControlView: function( model ) {
        return new LinkElementView( { model: model } );
    }

} );

InfinniUI.LinkElementControl = LinkElementControl;

//####app/controls/link/linkElementModel.js
/**
 * @constructor
 * @augments ButtonModel
 */
var LinkElementModel = ButtonModel.extend( {

    defaults: _.defaults( {
        href: 'javascript:;',
        target: 'self'
    }, ButtonModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ButtonModel.prototype.initialize.apply( this, arguments );
    }

} );

InfinniUI.LinkElementModel = LinkElementModel;

//####app/controls/link/linkElementView.js
/**
 * @constructor
 * @augments CommonButtonView
 */
var LinkElementView = CommonButtonView.extend( {

    tagName: 'a',

    className: 'pl-link',

    events: {
        'click': 'onClickHandler'
    },

    /**
     *
     * @returns {string}
     */
    template: function() {
        return '';
    },

    /**
     *
     */
    updateProperties: function() {
        CommonButtonView.prototype.updateProperties.call( this );

        this.updateHref();
        this.updateTarget();
    },

    /**
     *
     * @returns {jQuery}
     */
    getButtonElement: function() {
        return this.$el;
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        CommonButtonView.prototype.initHandlersForProperties.call( this );

        this.listenTo( this.model, 'change:href', this.updateHref );
        this.listenTo( this.model, 'change:target', this.updateTarget );
    },

    /**
     *
     */
    updateHref: function() {
        var newHref = this.model.get( 'href' );
        var $link = this.getButtonElement();

        $link.attr( 'href', newHref );
    },

    /**
     *
     */
    updateTarget: function() {
        var newTarget = this.model.get( 'target' );
        var $link = this.getButtonElement();

        $link.attr( 'target', '_' + newTarget );
    },

    /**
     *
     * @param e
     */
    onClickHandler: function( e ) {
        var href = this.model.get( 'href' );

        if( href.indexOf( 'http://' ) === -1 ) {
            InfinniUI.AppRouter.navigate( href, { trigger: true } );
            if( e.which !== 2 ) {
                e.preventDefault();
            }
        }
    }

} );

InfinniUI.LinkElementView = LinkElementView;

//####app/controls/loaderIndicator/loaderIndicator.js
( function() {
    var template = InfinniUI.Template[ 'controls/loaderIndicator/template.tpl.html' ];

    InfinniUI.loaderIndicator = {
        show: function() {
            $.blockUI( {
                message: $( template() ),
                ignoreIfBlocked: true,
                baseZ: 99999
            } );
        },
        hide: function() {
            $.unblockUI();
        }
    };

    if( !InfinniUI.config.useLoaderIndicator ) {
        return;
    }

    jQuery( function() {
        var $indicator = $( template() );

        $( 'body' ).append( $indicator );
        $.blockUI.defaults.css = {};
        $( document ).ajaxStart( function() {
            $.blockUI( {
                message: $indicator,
                ignoreIfBlocked: true,
                baseZ: 99999
            } );
        } )
            .ajaxStop( function() {
                $.unblockUI();
            } )
            .ajaxError( function() {
                $.unblockUI();
            } );
    } );

} )();

//####app/controls/menuBar/menuBarControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function MenuBarControl( parent ) {
    _.superClass( MenuBarControl, this, parent );
}

_.inherit( MenuBarControl, ContainerControl );

_.extend( MenuBarControl.prototype, {

    /**
     * @returns {MenuBarModel}
     */
    createControlModel: function() {
        return new MenuBarModel();
    },

    /**
     * @returns {MenuBarView}
     * @param model
     */
    createControlView: function( model ) {
        return new MenuBarView( { model: model } );
    }

} );

InfinniUI.MenuBarControl = MenuBarControl;

//####app/controls/menuBar/menuBarModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var MenuBarModel = ContainerModel.extend( {

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.MenuBarModel = MenuBarModel;

//####app/controls/menuBar/menuBarView.js
/**
 * @constructor
 * @augments ContainerView
 */
var MenuBarView = ContainerView.extend( {

    tagName: 'nav',

    className: 'pl-menu-bar navbar navbar-default',

    template: InfinniUI.Template[ 'controls/menuBar/template/menuBar.tpl.html' ],

    UI: {},

    /**
     *
     * @returns {MenuBarView}
     */
    render: function() {
        this.prerenderingActions();

        this.removeChildElements();

        this.$el.html( this.template( {
            items: this.model.get( 'items' )
        } ) );
        this.renderItemsContents();

        this.bindUIElements();

        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    renderItemsContents: function() {
        var $items = this.$el.find( '.pl-menu-bar-item' );
        var items = this.model.get( 'items' );
        var itemTemplate = this.model.get( 'itemTemplate' );
        var that = this;
        var element, item;

        $items.each( function( i, el ) {
            item = items.getByIndex( i );
            element = itemTemplate( undefined, { item: item, index: i } );
            that.addChildElement( element );
            $( el )
                .append( element.render() );
        } );
    },

    /**
     *
     */
    updateGrouping: function() {
    }

} );

InfinniUI.MenuBarView = MenuBarView;

//####app/controls/numericBox/numericBoxControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments TextEditorBaseControl
 */
function NumericBoxControl( parent ) {
    _.superClass( NumericBoxControl, this, parent );
}

_.inherit( NumericBoxControl, TextEditorBaseControl );

_.extend( NumericBoxControl.prototype, {

    /**
     * @returns {NumericBoxModel}
     */
    createControlModel: function() {
        return new NumericBoxModel();
    },

    /**
     * @returns {NumericBoxView}
     * @param model
     */
    createControlView: function( model ) {
        return new NumericBoxView( { model: model } );
    }

} );

InfinniUI.NumericBoxControl = NumericBoxControl;

//####app/controls/numericBox/numericBoxModel.js
/**
 * @constructor
 * @augments TextEditorBaseModel
 */
var NumericBoxModel = TextEditorBaseModel.extend( {

    defaults: _.defaults(
        {
            increment: 1,
            inputType: 'number',
            minValue: null,
            maxValue: null
        },
        TextEditorBaseModel.prototype.defaults
    ),

    /**
     *
     */
    incValue: function() {
        var delta = this.get( 'increment' );
        this.addToValue( delta );
    },

    /**
     *
     */
    decValue: function() {
        var delta = this.get( 'increment' );
        this.addToValue( -delta );
    },

    transformValue: function( value ) {
        var val = null;

        if( value !== null && value !== '' && typeof value !== 'undefined' ) {
            val = +value;
        }

        return !isNaN( parseFloat( val ) ) && isFinite( val ) ? val : null;
    },

    /**
     *
     * @param delta
     */
    addToValue: function( delta ) {
        var value = this.get( 'value' );
        var startValue = this.get( 'startValue' );
        var minValue = this.get( 'minValue' );
        var maxValue = this.get( 'maxValue' );
        var newValue = typeof value === 'number' ? value : +value;

        if ( this.isSetValue( value ) && typeof value === 'number' ) {
            newValue += delta;
        } else {
            newValue = ( typeof startValue === 'number' ) ? startValue : 0;
        }

        if ( typeof minValue === 'number' && newValue < minValue ) {
            newValue = minValue;
        } else if ( typeof maxValue === 'number' && newValue > maxValue ) {
            newValue = maxValue;
        }

        this.set( 'value', newValue );
    },

    /**
     *
     */
    initialize: function() {
        TextEditorBaseModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    },

    validate: function( attributes/*, options */ ) {
        var value = attributes.value;
        var min = attributes.minValue;
        var max = attributes.maxValue;
        var error;

        if ( value !== null && typeof value !== 'undefined' ) {
            if ( typeof min === 'number' && typeof max === 'number' ) {
                if ( value < min || value > max ) {
                    error = 'Значение должно быть в диапазоне от ' + min + ' до ' + max + '.';
                }
            } else if ( typeof min === 'number' && value < min ) {
                error = 'Значение должно быть не меньше ' + min + '.';
            } else if ( typeof max === 'number' && value > max ) {
                error = 'Значение должно быть не больше ' + max + '.';
            }
        }

        return error;
    }

} );

InfinniUI.NumericBoxModel = NumericBoxModel;

//####app/controls/numericBox/numericBoxView.js
/**
 * @constructor
 * @augments TextEditorBaseView
 */
var NumericBoxView = TextEditorBaseView.extend( {

    className: 'pl-numericbox form-group',

    template: InfinniUI.Template[ 'controls/numericBox/template/numericBox.tpl.html' ],

    UI: _.extend( {}, TextEditorBaseView.prototype.UI, {
        min: '.pl-numeric-box-min',
        max: '.pl-numeric-box-max'
    } ),

    events: _.extend( {}, TextEditorBaseView.prototype.events, {
        'click .pl-numeric-box-min': 'onClickMinControlHandler',
        'click .pl-numeric-box-max': 'onClickMaxControlHandler',
        'mousedown .pl-numeric-box-min': 'onMousedownMinControlHandler',
        'mousedown .pl-numeric-box-max': 'onMousedownMaxControlHandler'
    } ),

    editMaskStrategies: {
        NumberEditMask: 'default'
    },

    render: function() {
        this.prerenderingActions();
        this.renderTemplate( this.template );
        this.updateProperties();
        this.trigger( 'render' );
        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    getData: function() {
        var model = this.model;

        return _.extend( {},
            TextEditorBaseView.prototype.getData.call( this ), {
                minValue: model.get( 'minValue' ),
                maxValue: model.get( 'maxValue' ),
                increment: model.get( 'increment' )
            } );
    },

    onChangeEnabledHandler: function( model, value ) {
        this.ui.control.prop( 'disabled', !value );
        this.ui.min.prop( 'disabled', !value );
        this.ui.max.prop( 'disabled', !value );
    },

    /**
     *
     */
    onClickMinControlHandler: function() {
        if( this.canChangeValue() ) {
            this.model.decValue();
        }
    },

    /**
     *
     */
    onClickMaxControlHandler: function() {
        if( this.canChangeValue() ) {
            this.model.incValue();
        }
    },

    /**
     *
     * @param event
     */
    onMousedownMinControlHandler: function( event ) {
        if( this.canChangeValue() ) {
            this.repeatUpdateValue( this.model.decValue.bind( this.model ) );
        }
    },

    /**
     *
     * @param event
     */
    onMousedownMaxControlHandler: function( event ) {
        if( this.canChangeValue() ) {
            this.repeatUpdateValue( this.model.incValue.bind( this.model ) );
        }
    },

    /**
     *
     * @param cb
     */
    repeatUpdateValue: function( cb ) {
        var intervalId;

        window.document.addEventListener( 'mouseup', stopRepeat );
        intervalId = setInterval( cb, 200 );

        function stopRepeat() {
            if( intervalId ) {
                clearInterval( intervalId );
                intervalId = null;
            }
            window.document.removeEventListener( 'mouseup', stopRepeat );
        }

    },

    /**
     *
     * @returns {boolean}
     */
    canChangeValue: function() {
        var model = this.model;
        var enabled = model.get( 'enabled' );

        return enabled === true;
    }

} );

InfinniUI.NumericBoxView = NumericBoxView;

//####app/controls/panel/panelControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function PanelControl( parent ) {
    _.superClass( PanelControl, this, parent );
}

_.inherit( PanelControl, ContainerControl );

_.extend( PanelControl.prototype, {

    /**
     * @returns {PanelModel}
     */
    createControlModel: function() {
        return new PanelModel();
    },

    /**
     * @returns {PanelView}
     * @param model
     */
    createControlView: function( model ) {
        return new PanelView( { model: model } );
    }

} );

InfinniUI.PanelControl = PanelControl;

//####app/controls/panel/panelModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var PanelModel = ContainerModel.extend( {

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
        this.on( 'change:collapsed', function( model, value ) {
            model.trigger( value ? 'collapsed' : 'expanded', null, {} );
        } );
    },

    defaults: _.defaults( {
        collapsible: false,
        collapsed: false,
        collapseChanger: ''
    }, ContainerModel.prototype.defaults ),

    /**
     *
     * @param key
     * @param val
     * @param options
     * @returns {*}
     */
    set: function( key, val, options ) {
        if( key === null || typeof key === 'undefined' ) return this;

        var attrs;

        if( typeof key === 'object' ) {
            attrs = key;
            options = val;
        } else {
            ( attrs = {} )[ key ] = val;
        }

        var oldValue, newValue;

        if( 'collapsed' in attrs ) {
            //Вызов обработчиков перед collapsing/expanding
            oldValue = this.get( 'collapsed' );
            newValue = attrs.collapsed;
            var allow;

            if( newValue && !oldValue ) {
                allow = this
                    .set( '_collapsing', true, { validate: false } )
                    .trigger( 'collapsing', null, {} )
                    .get( '_collapsing' );
            } else if( !newValue && oldValue ) {
                allow = this
                    .set( '_expanding', true, { validate: false } )
                    .trigger( 'expanding', null, {} )
                    .get( '_expanding' );
            }
            if( allow === false ) {
                //Если collapsing/expanding отменен в обработчиках collapsing/expanding - не меняем collapsed
                delete attrs.collapsed;
            }
        }
        return ContainerModel.prototype.set.call( this, attrs, options );
    },

    /**
     *
     * @param name
     * @param callback
     * @param context
     */
    on: function( name, callback, context ) {
        //@TODO Add support an event map syntax
        var handler;
        var model = this;

        switch( name ) {
            case 'collapsing':
                handler = function() {
                    var allow = callback( null, {} );
                    if( allow === false ) {
                        model.set( '_collapsing', false );
                    }
                };
                break;
            case 'expanding':
                handler = function() {
                    var allow = callback( null, {} );
                    if( allow === false ) {
                        model.set( '_expanding', false );
                    }
                };
                break;
            default:
                handler = callback;
                break;
        }
        ContainerModel.prototype.on.call( this, name, handler, context );
    }

} );

InfinniUI.PanelModel = PanelModel;

//####app/controls/panel/panelView.js
/**
 * @constructor
 * @augments ContainerView
 */
var PanelView = ContainerView.extend( {

    className: 'pl-panel panel panel-default',

    template: InfinniUI.Template[ 'controls/panel/template/panel.tpl.html' ],

    UI: {
        header: '.pl-panel-header',
        items: '.panel-items'
    },

    events: {
        'click >.pl-panel-header': 'onClickHeaderHandler'
    },

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ContainerView.prototype.initialize.call( this, options );
    },

    /**
     *
     * @returns {PanelView}
     */
    render: function() {
        this.prerenderingActions();

        this.removeChildElements();

        this.$el.html( this.template( {
            items: this.model.get( 'items' )
        } ) );

        this.bindUIElements();

        this.renderItemsContents();

        this.trigger( 'render' );
        this.updateProperties();

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ContainerView.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:collapsed', this.updateCollapsed );
        this.listenTo( this.model, 'change:collapsible', this.updateCollapsible );
        this.listenTo( this.model, 'change:header', this.updateHeader );
        this.listenTo( this.model, 'change:headerTemplate', this.updateHeader );
    },

    /**
     *
     */
    updateProperties: function() {
        ContainerView.prototype.updateProperties.call( this );
        this.updateCollapsed();
        this.updateCollapsible();
        this.updateHeader();
    },

    /**
     *
     */
    updateCollapsed: function() {
        this.ui.header.toggleClass( 'pl-collapsed', this.model.get( 'collapsed' ) );
    },

    /**
     *
     * @param model
     * @param value
     */
    updateCollapsible: function( model, value ) {
        this.ui.header.toggleClass( 'pl-collapsible', this.model.get( 'collapsible' ) );
    },

    /**
     *
     */
    updateHeader: function() {
        var model = this.model;

        this.ui.header.empty();
        var headerTemplate = model.get( 'headerTemplate' );

        if( typeof headerTemplate === 'function' ) {
            var header = model.get( 'header' ),
                $header = headerTemplate( null, { value: header } ).render();

            this.ui.header.show();
            this.ui.header.append( $header );

        } else {
            this.ui.header.hide();
        }
    },

    /**
     *
     */
    renderItemsContents: function() {
        var $items = this.$el.find( '.pl-panel-i' );
        var items = this.model.get( 'items' );
        var itemTemplate = this.model.get( 'itemTemplate' );
        var that = this;
        var element, item;

        $items.each( function( i, el ) {
            item = items.getByIndex( i );
            element = itemTemplate( undefined, { item: item, index: i } );
            that.addChildElement( element );
            $( el )
                .append( element.render() );
        } );
    },

    /**
     *
     */
    updateGrouping: function() {
    },

    /**
     *
     */
    onEventCallback: function() {
        var collapsible = this.model.get( 'collapsible' );

        if( collapsible ) {
            var collapsed = this.model.get( 'collapsed' );
            this.model.set( 'collapsed', !collapsed );
            this.updateLayout();
        }
    },

    /**
     *
     * @param event
     */
    onClickHeaderHandler: function( event ) {
        var collapseChanger = this.model.get( 'collapseChanger' );

        if( collapseChanger !== '' ) {
            if( $( event.target ).closest( '[data-pl-name=' + collapseChanger + ']' ).length ) {
                this.onEventCallback();
            }
        } else {
            this.onEventCallback();
        }
    }

} );

InfinniUI.PanelView = PanelView;

//####app/controls/passwordBox/passwordBoxControl.js
/**
 * @constructor
 * @augments Control
 * @mixes editorBaseControlMixin
 */
var PasswordBoxControl = function() {
    _.superClass( PasswordBoxControl, this );
    this.initialize_editorBaseControl();
};

_.inherit( PasswordBoxControl, Control );

_.extend( PasswordBoxControl.prototype, {

    /**
     * @returns {PasswordBoxModel}
     */
    createControlModel: function() {
        return new PasswordBoxModel();
    },

    /**
     * @returns {PasswordBoxView}
     * @param model
     */
    createControlView: function( model ) {
        return new PasswordBoxView( { model: model } );
    }

}, editorBaseControlMixin );

InfinniUI.PasswordBoxControl = PasswordBoxControl;

//####app/controls/passwordBox/passwordBoxModel.js
/**
 * @constructor
 * @augments ControlModel
 * @mixes editorBaseModelMixin
 */
var PasswordBoxModel = ControlModel.extend( _.extend( {

    defaults: _.defaults(
        {
            labelText: null,
            autocomplete: true
        },
        editorBaseModelMixin.defaults_editorBaseModel,
        ControlModel.prototype.defaults
    ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
        this.initialize_editorBaseModel();
    }

}, editorBaseModelMixin ) );

InfinniUI.PasswordBoxModel = PasswordBoxModel;

//####app/controls/passwordBox/passwordBoxView.js
/**
 * @constructor
 * @augments ControlView
 * @mixes editorBaseViewMixin
 */
var PasswordBoxView = ControlView.extend( _.extend( {}, editorBaseViewMixin, {

    className: 'pl-password-box form-group',

    template: {
        'autocomplete': InfinniUI.Template[ 'controls/passwordBox/template/passwordBox.on.tpl.html' ],
        'noautocomplete': InfinniUI.Template[ 'controls/passwordBox/template/passwordBox.off.tpl.html' ]
    },

    UI: _.extend( {}, editorBaseViewMixin.UI, {
        label: '.pl-control-label',
        input: '.pl-control'
    } ),

    events: {
        'blur .pl-control': 'onBlurHandler',
        'input .pl-control': 'onInputHandler',
        'change .pl-control': 'onChangeHandler'
    },

    /**
     *
     */
    initialize: function() {
        ControlView.prototype.initialize.apply( this );
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );
        editorBaseViewMixin.initHandlersForProperties.call( this );

        this.listenTo( this.model, 'change:labelText', this.updateLabelText );
        this.listenTo( this.model, 'change:labelTextTitle', this.updateLabelTextTitle );
        this.listenTo( this.model, 'change:labelFloating', this.updateLabelFloating );
        this.listenTo( this.model, 'change:autocomplete', this.updateAutocomplete );
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );
        editorBaseViewMixin.updateProperties.call( this );

        this.updateLabelText();
        this.updateLabelTextTitle();
    },

    /**
     *
     */
    updateLabelText: function() {
        var labelText = this.model.get( 'labelText' );

        if( labelText !== '' && labelText !== null && typeof labelText !== 'undefined' ) {
            this.ui.label.text( labelText );
        } else {
            this.ui.label.css( { display: 'none' } );
        }
    },

    /**
     *
     */
    updateLabelTextTitle: function() {
        var labelTextTitle = this.model.get( 'labelTextTitle' );
        var labelText = this.model.get( 'labelText' );

        if( labelTextTitle && labelText && labelText !== '' ) {
            this.ui.label.attr( 'title', labelText );
        } else {
            this.ui.label.attr( 'title', null );
        }
    },

    /**
     *
     */
    updateAutocomplete: function() {
        this.rerender();
    },

    /**
     *
     */
    updateValue: function() {
        editorBaseViewMixin.updateValueState.call( this );

        var value = this.model.get( 'value' );
        this.ui.input.val( value );
    },

    /**
     *
     */
    updateEnabled: function() {
        ControlView.prototype.updateEnabled.call( this );

        var enabled = this.model.get( 'enabled' );

        this.ui.input.prop( 'disabled', !enabled );
    },

    /**
     * @returns {*}
     */
    getData: function() {
        return _.extend(
            {},
            ControlView.prototype.getData.call( this ),
            editorBaseViewMixin.getData.call( this )
        );
    },

    /**
     *
     * @returns {PasswordBoxView}
     */
    render: function() {
        var model = this.model;

        this.prerenderingActions();
        this.renderTemplate( this.getTemplate() );

        this.updateProperties();

        this.trigger( 'render' );
        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    remove: function() {
        ControlView.prototype.remove.call( this );
    },

    /**
     *
     * @returns {*}
     */
    getTemplate: function() {
        var model = this.model;

        return model.get( 'autocomplete' ) ? this.template.autocomplete : this.template.noautocomplete;
    },

    /**
     *
     */
    updateModelValue: function() {
        var value = this.ui.input.val();
        var model = this.model;

        model.set( 'value', value );
        model.set( 'rawValue', value );
    },

    /**
     *
     */
    onBlurHandler: function() {
        this.updateModelValue();
    },

    /**
     *
     */
    onChangeHandler: function() {
        this.updateModelValue();
    },

    /**
     *
     */
    onInputHandler: function() {
        this.updateModelValue();
    }

} ) );

InfinniUI.PasswordBoxView = PasswordBoxView;

//####app/controls/scrollPanel/scrollPanelControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function ScrollPanelControl( parent ) {
    _.superClass( ScrollPanelControl, this, parent );
}

_.inherit( ScrollPanelControl, ContainerControl );

_.extend( ScrollPanelControl.prototype, {

    /**
     * @returns {ScrollPanelModel}
     */
    createControlModel: function() {
        return new ScrollPanelModel();
    },

    /**
     * @returns {ScrollPanelView}
     * @param model
     */
    createControlView: function( model ) {
        return new ScrollPanelView( { model: model } );
    }

} );

InfinniUI.ScrollPanelControl = ScrollPanelControl;

//####app/controls/scrollPanel/scrollPanelModel.js
/**
 * @constructor
 * @augments ContainerModel
 */
var ScrollPanelModel = ContainerModel.extend( {

    defaults: _.defaults( {
        horizontalScroll: InfinniUI.ScrollVisibility.auto,
        verticalScroll: InfinniUI.ScrollVisibility.auto
    }, ContainerModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
    }

} );

InfinniUI.ScrollPanelModel = ScrollPanelModel;

//####app/controls/scrollPanel/scrollPanelView.js
/**
 * @constructor
 * @augments ContainerView
 */
var ScrollPanelView = ContainerView.extend( {

    className: 'pl-scrollpanel panel panel-default',

    template: InfinniUI.Template[ 'controls/scrollPanel/template/scrollPanel.tpl.html' ],

    UI: {},

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ContainerView.prototype.initialize.call( this, options );
    },

    /**
     *
     * @returns {ScrollPanelView}
     */
    render: function() {
        this.prerenderingActions();

        this.removeChildElements();
        this.$el.html( this.template( {
            items: this.model.get( 'items' )
        } ) );
        this.renderItemsContents();

        this.bindUIElements();

        this.postrenderingActions();

        this.trigger( 'render' );
        this.updateProperties();

        ( function( $el ) {
            //Firefox сохраняет позицию прокрутки. Принудительно крутим в начало.
            setTimeout( function() {
                $el.scrollTop( 0 );
            }, 0 );
        } )( this.$el );
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ContainerView.prototype.initHandlersForProperties.call( this );
        this.listenTo( this.model, 'change:horizontalScroll', this.updateHorizontalScroll );
        this.listenTo( this.model, 'change:verticalScroll', this.updateVerticalScroll );
    },

    /**
     *
     */
    updateProperties: function() {
        ContainerView.prototype.updateProperties.call( this );
        this.updateHorizontalScroll();
        this.initVerticalScroll();
    },

    /**
     * @protected
     * @description Set one of CSS class: "pl-horizontal-scroll-(visible|hidden|auto)"
     */
    updateHorizontalScroll: function() {
        var name = '';

        switch( this.model.get( 'horizontalScroll' ) ) {
            case InfinniUI.ScrollVisibility.visible:
                name = 'visible';
                break;
            case InfinniUI.ScrollVisibility.hidden:
                name = 'hidden';
                break;
            case InfinniUI.ScrollVisibility.auto:
            default:
                name = 'auto';
                break;
        }
        this.switchClass( 'pl-horizontal-scroll', name, this.$el );
    },

    /**
     * @protected
     * @description Set one of CSS class: "pl-vertical-scroll-(visible|hidden|auto)"
     * @param model
     * @param value
     */
    initVerticalScroll: function() {
        var verticalScrollType = this.model.get( 'verticalScroll' );

        if( verticalScrollType !== InfinniUI.ScrollVisibility.hidden ) {
            this.$el.addClass( 'pl-adaptable-by-height' );
        }

        // setVerticalScroll уже проверил, что значение валидно
        this.switchClass( 'pl-vertical-scroll', verticalScrollType.toLowerCase(), this.$el );
    },

    updateVerticalScroll: function() {
        this.$el.height( '' );
        this.$el.removeClass( 'pl-adaptable-by-height' );

        this.initVerticalScroll();

        var $parentView = this.$el.closest( '.pl-view' );
        InfinniUI.AutoHeightService.recalculation( $parentView );
    },

    /**
     *
     */
    renderItemsContents: function() {
        var $items = this.$el.find( '.pl-scrollpanel-i' );
        var items = this.model.get( 'items' );
        var itemTemplate = this.model.get( 'itemTemplate' );
        var that = this;
        var element, item;

        $items.each( function( i, el ) {
            item = items.getByIndex( i );
            element = itemTemplate( undefined, { item: item, index: i } );
            that.addChildElement( element );
            $( el )
                .append( element.render() );
        } );
    },

    /**
     *
     */
    updateGrouping: function() {
    }

} );

InfinniUI.ScrollPanelView = ScrollPanelView;

//####app/controls/toggleButton/toggleButtonControl.js
/**
 * @augments Control
 * @param parent
 * @constructor
 * @mixes editorBaseControlMixin
 */
function ToggleButtonControl( parent ) {
    _.superClass( ToggleButtonControl, this, parent );
    this.initialize_editorBaseControl();
}

_.inherit( ToggleButtonControl, Control );

_.extend( ToggleButtonControl.prototype, {

    /**
     * @returns {ToggleButtonModel}
     */
    createControlModel: function() {
        return new ToggleButtonModel();
    },

    /**
     * @returns {ToggleButtonView}
     * @param model
     */
    createControlView: function( model ) {
        return new ToggleButtonView( { model: model } );
    }

}, editorBaseControlMixin );

InfinniUI.ToggleButtonControl = ToggleButtonControl;

//####app/controls/toggleButton/toggleButtonModel.js
/**
 * @constructor
 * @augments ControlModel
 * @mixes editorBaseModelMixin
 */
var ToggleButtonModel = ControlModel.extend( _.extend( {

    defaults: _.defaults( {
        value: false,
        textOn: 'ON',
        textOff: 'OFF',
        horizontalAlignment: 'Left'
    }, ControlModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ControlModel.prototype.initialize.apply( this, arguments );
        this.initialize_editorBaseModel();
    }

}, editorBaseModelMixin ) );

InfinniUI.ToggleButtonModel = ToggleButtonModel;

//####app/controls/toggleButton/toggleButtonView.js
/**
 * @constructor
 * @augments ControlView
 * @mixes editorBaseViewMixin
 */
var ToggleButtonView = ControlView.extend( _.extend( {}, editorBaseViewMixin, {

    template: InfinniUI.Template[ 'controls/toggleButton/template/toggleButton.tpl.html' ],

    UI: _.extend( {}, editorBaseViewMixin.UI, {
        textOn: '.togglebutton-handle-on',
        textOff: '.togglebutton-handle-off',
        container: '.togglebutton-container'
    } ),

    events: {
        'click .togglebutton-box': 'onClickHandler'
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.call( this );
        editorBaseViewMixin.initHandlersForProperties.call( this );

        this.listenTo( this.model, 'change:textOn', this.updateTextOn );
        this.listenTo( this.model, 'change:textOff', this.updateTextOff );
    },

    /**
     *
     */
    updateProperties: function() {
        ControlView.prototype.updateProperties.call( this );
        editorBaseViewMixin.updateProperties.call( this );

        this.updateTextOn();
        this.updateTextOff();
    },

    /**
     *
     */
    updateFocusable: function() {
        var focusable = this.model.get( 'focusable' );

        if( focusable ) {
            this.ui.container.attr( 'tabindex', 0 );
        } else {
            this.ui.container.removeAttr( 'tabindex' );
        }
    },

    /**
     *
     */
    updateTextOn: function() {
        var textOn = this.model.get( 'textOn' );

        this.ui.textOn.html( textOn || '&nbsp;' );
    },

    /**
     *
     */
    updateTextOff: function() {
        var textOff = this.model.get( 'textOff' );

        this.ui.textOff.html( textOff || '&nbsp;' );
    },

    /**
     *
     * @returns {ToggleButtonView}
     */
    render: function() {
        this.prerenderingActions();
        this.renderTemplate( this.template );
        this.updateProperties();

        this.trigger( 'render' );
        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     * @returns {*}
     */
    getData: function() {
        var model = this.model;

        return _.extend( {},
            ControlView.prototype.getData.call( this ),
            editorBaseViewMixin.getData.call( this ),
            {
                textOn: model.get( 'textOn' ),
                textOff: model.get( 'textOff' )
            }
        );
    },

    /**
     *
     * @param event
     */
    onClickHandler: function( event ) {
        var model = this.model;

        model.set( 'value', !model.get( 'value' ) );
    },

    /**
     *
     */
    updateValue: function() {
        var value = this.model.get( 'value' );

        this.switchClass( 'toggle', value ? 'on' : 'off', this.$el );
    }

} ) );

InfinniUI.ToggleButtonView = ToggleButtonView;

//####app/controls/toolBar/toolBarControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function ToolBarControl( parent ) {
    _.superClass( ToolBarControl, this, parent );
}

_.inherit( ToolBarControl, ContainerControl );

_.extend( ToolBarControl.prototype, {

    /**
     * @returns {ToolBarModel}
     */
    createControlModel: function() {
        return new ToolBarModel();
    },

    /**
     * @returns {ToolBarView}
     * @param model
     */
    createControlView: function( model ) {
        return new ToolBarView( { model: model } );
    }

} );

InfinniUI.ToolBarControl = ToolBarControl;

//####app/controls/toolBar/toolBarModel.js
/**
 * @constructor
 * @aurments ContainerModel
 */
var ToolBarModel = ContainerModel.extend( {
} );

InfinniUI.ToolBarModel = ToolBarModel;

//####app/controls/toolBar/toolBarView.js
/**
 * @constructor
 * @augments ContainerView
 */
var ToolBarView = ContainerView.extend( {

    className: 'pl-tool-bar',

    template: InfinniUI.Template[ 'controls/toolBar/template/toolBar.tpl.html' ],

    itemTemplate: InfinniUI.Template[ 'controls/toolBar/template/toolBarItem.tpl.html' ],

    UI: {
        container: '.pl-tool-bar__container'
    },

    /**
     *
     * @return {ToolBarView}
     */
    render: function() {
        this.prerenderingActions();

        this.renderTemplate( this.template );
        this.ui.container.append( this.renderItems() );
        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     * @return {Array}
     */
    renderItems: function() {
        var model = this.model;
        var items = model.get( 'items' );
        var itemTemplate = model.get( 'itemTemplate' );

        this.removeChildElements();

        var $elements = [];

        items.forEach( function( item, index ) {
            var template = this.itemTemplate();
            var $template = $( template );

            var element = itemTemplate( null, {
                index: index,
                item: item
            } );
            this.addChildElement( element );
            $template.append( element.render() );
            $elements.push( $template );
        }, this );

        return $elements;
    },

    /**
     *
     */
    updateGrouping: function() {
    }

} );

InfinniUI.ToolBarView = ToolBarView;

//####app/controls/tooltip/tooltipControl.js
/**
 * @augments Control
 * @constructor
 */
var TooltipControl = function() {
    _.superClass( TooltipControl, this );
};

_.inherit( TooltipControl, Control );

_.extend( TooltipControl.prototype, {

    /**
     * @returns {TooltipModel}
     */
    createControlModel: function(  ) {
        return new TooltipModel();
    },

    /**
     * @returns {TooltipView}
     * @param model
     */
    createControlView: function( model ) {
        return new TooltipView( { model: model } );
    }

} );

InfinniUI.TooltipControl = TooltipControl;

//####app/controls/tooltip/tooltipModel.js
/**
 * @constructor
 * @augments ControlModel
 */
var TooltipModel = ControlModel.extend( {
} );

InfinniUI.TooltipModel = TooltipModel;

//####app/controls/tooltip/tooltipView.js
/**
 * @constructor
 * @augments ControlView
 */
var TooltipView = ControlView.extend( {

    /**
     *
     * @returns {TooltipView}
     */
    render: function() {
        this.prerenderingActions();
        this.renderContent();
        this.trigger( 'render' );
        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    initHandlersForProperties: function() {
        ControlView.prototype.initHandlersForProperties.apply( this, Array.prototype.slice.call( arguments ) );

        this.listenTo( this.model, 'change:content', this.updateContent );
    },

    /**
     *
     */
    updateContent: function(  ) {
        this.renderContent();
    },

    /**
     * @protected
     */
    renderContent: function() {
        var model = this.model;
        var content = model.get( 'content' );

        this.$el.html( content.render() );
    }

} );

InfinniUI.TooltipView = TooltipView;

//####app/controls/view/viewControl.js
/**
 *
 * @param parent
 * @constructor
 * @augments ContainerControl
 */
function ViewControl( parent ) {
    _.superClass( ViewControl, this, parent );
}

_.inherit( ViewControl, ContainerControl );

_.extend( ViewControl.prototype, {

    /**
     * @returns {ViewModel}
     */
    createControlModel: function() {
        return new ViewModel();
    },

    /**
     * @returns {ViewView}
     * @param model
     */
    createControlView: function( model ) {
        return new ViewView( { model: model } );
    }

} );

InfinniUI.ViewControl = ViewControl;

//####app/controls/view/viewModel.js
var DialogResult = {
    none: 0,
    accepted: 1,
    canceled: 2
};

InfinniUI.DialogResult = DialogResult;

/**
 * @constructor
 * @augments ContainerModel
 */
var ViewModel = ContainerModel.extend( {

    defaults: _.defaults( {
        dialogResult: DialogResult.none,
        isApplication: false,
        closeButtonVisibility: true
    }, ContainerModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        ContainerModel.prototype.initialize.apply( this );

        this.set( 'scripts', new Collection( [], 'name' ) );
        this.set( 'parameters', new Collection( [], 'name' ) );
        this.set( 'dataSources', new Collection( [], 'name' ) );
    }

} );

InfinniUI.ViewModel = ViewModel;

//####app/controls/view/viewView.js
/**
 * @constructor
 * @augments ContainerView
 */
var ViewView = ContainerView.extend( {

    className: 'pl-view',

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        ContainerView.prototype.initialize.call( this, options );
    },

    /**
     *
     * @returns {ViewView}
     */
    render: function() {
        this.prerenderingActions();

        this.$el.empty();

        this.renderItemsContents();

        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions();
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    },

    /**
     *
     */
    renderItemsContents: function() {
        var that = this;
        var items = this.model.get( 'items' );
        var itemTemplate = this.model.get( 'itemTemplate' );
        var element;

        items.forEach( function( item, i ) {
            element = itemTemplate( undefined, { item: item, index: i } );
            if( element ) {
                that.$el
                    .append( element.render() );
            }
        } );
    },

    /**
     *
     */
    updateGrouping: function() {
    }

} );

InfinniUI.ViewView = ViewView;

//####app/controls/viewPanel/viewPanelControl.js
/**
 * @augments Control
 * @constructor
 */
var ViewPanelControl = function() {
    _.superClass( ViewPanelControl, this );
};

_.inherit( ViewPanelControl, Control );

/**
 * @returns {ViewPanelModel}
 */
ViewPanelControl.prototype.createControlModel = function() {
    return new ViewPanelModel();
};

/**
 * @returns {ViewPanelView}
 * @param model
 */
ViewPanelControl.prototype.createControlView = function( model ) {
    return new ViewPanelView( { model: model } );
};

InfinniUI.ViewPanelControl = ViewPanelControl;

//####app/controls/viewPanel/viewPanelModel.js
/**
 * @constructor
 * @augments ControlModel
 */
var ViewPanelModel = ControlModel.extend( {

    defaults: _.defaults( {
        layout: null
    }, ControlModel.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        var that = this;

        ControlModel.prototype.initialize.apply( this );

        this.once( 'change:layout', function( model, layout ) {
            if( layout && layout.onLoaded ) {
                that.subscribeOnLoaded();
            }
        } );
    },

    /**
     *
     */
    subscribeOnLoaded: function() {
        var that = this;
        var layout = this.get( 'layout' );

        layout.onLoaded( function() {
            that.set( 'isLoaded', true );
        } );
    }

} );

InfinniUI.ViewPanelModel = ViewPanelModel;

//####app/controls/viewPanel/viewPanelView.js
/**
 * @constructor
 * @augments ControlView
 */
var ViewPanelView = ControlView.extend( {

    className: 'pl-view-panel',

    /**
     *
     */
    initialize: function() {
        ControlView.prototype.initialize.apply( this );
        this.listenTo( this.model, 'change:layout', this.onChangeLayoutHandler );
    },

    /**
     *
     * @param model
     * @param layout
     */
    onChangeLayoutHandler: function( model, layout ) {
        this.$el.empty();
        if( layout ) {
            this.$el.append( layout.render() );
        }
    },

    /**
     *
     * @returns {ViewPanelView}
     */
    render: function() {
        this.prerenderingActions();

        var layout = this.model.get( 'layout' );

        if( layout ) {
            this.$el.append( layout.render() );
        }

        this.updateProperties();
        this.trigger( 'render' );

        this.postrenderingActions( false );
        //devblockstart
        InfinniUI.global.messageBus.send( 'render', { element: this } );
        //devblockstop
        return this;
    }

} );

InfinniUI.ViewPanelView = ViewPanelView;

//####app/controls/extensionPanel/extensionPanelsRegister/extensionPanelsRegister.js
function ExtensionPanelsRegister() {
    this.items = {};

    this.register = function( params ) {
        var name = params.name;
        var initializer = params.initialize;

        delete params.name;
        delete params.initialize;

        _.extend( initializer.prototype, params );

        this.items[ name ] = initializer;
    };

    this.getByName = function( name ) {
        return this.items[ name ];
    };
}

InfinniUI.extensionPanels = new ExtensionPanelsRegister();

//####app/data/dataSource/_mixins/dataSourceValidationNotifierMixin.js
/**
 *
 * @mixin
 */
var dataSourceValidationNotifierMixin = {
    /**
     * @param dataSource
     */
    initNotifyValidation: function( dataSource ) {
        dataSource.onErrorValidator( this.notifyOnValidationError.bind( this ) );
    },

    /**
     * @param context
     * @param args
     */
    notifyOnValidationError: function( context, args ) {
        var result = args.value;

        if ( typeof result === 'undefined' || result === null || result[ 'IsValid' ] || !Array.isArray( result[ 'Items' ] ) ) {
            return;
        }

        result[ 'Items' ].forEach( function( item ) {
            var exchange = InfinniUI.global.messageBus;
            exchange.send( messageTypes.onNotifyUser, { item: item, messageText: item.Message, messageType: 'error' } );
        } );
    }

};

InfinniUI.dataSourceValidationNotifierMixin = dataSourceValidationNotifierMixin;

//####app/data/dataSource/baseDataSource.js
/**
 * @constructor
 * @augments Backbone.Model
 */
var BaseDataSource = Backbone.Model.extend( {

    defaults: {
        name: null,
        idProperty: '_id',
        identifyingMode: 'byId', // byId, byLink. detect automatically

        view: null,

        isDataReady: false,

        dataProvider: null,

        /*
         * TreeModel for handling
         * model.items
         * model.selectedItem
         * */
        model: null,

        modifiedItems: {},
        itemsById: {},

        fillCreatedItem: true,

        suspendingList: null, // []

        waitingOnUpdateItemsHandlers: null, //[]

        errorValidator: null,

        isRequestInProcess: false,

        isLazy: true,

        isWaiting: false,

        resolvePriority: 0,

        newItemsHandler: null,

        isNumRegEx: /^\d/

    },

    /**
     *
     */
    initialize: function() {
        var view = this.get( 'view' );
        var modelStartTree = {
            items: null,
            selectedItem: null
        };

        this.initDataProvider();

        if( !view ) {
            throw new Error( 'BaseDataSource.initialize: При создании объекта не была задана view.' );
        }
        this.set( 'suspendingList', [] );
        this.set( 'waitingOnUpdateItemsHandlers', [] );
        this.set( 'model', new TreeModel( view.getContext(), this, modelStartTree ) );

        _.extend( this, BaseDataSource.identifyingStrategy.byId );
    },

    /**
     *
     */
    initDataProvider: function() {
        throw new Error( 'BaseDataSource.initDataProvider В потомке BaseDataSource не задан провайдер данных.' );
    },

    /**
     *
     * @returns {*}
     */
    getSearch: function() {
        return this.get( 'model' ).getProperty( 'search' );
    },

    /**
     *
     * @param searchStr
     */
    setSearch: function( searchStr ) {
        this.get( 'model' ).setProperty( 'search', searchStr );
    },

    /**
     *
     * @returns {*}
     */
    getFilter: function() {
        return this.get( 'model' ).getProperty( 'filter' );
    },

    /**
     *
     * @param filter
     */
    setFilter: function( filter ) {
        this.get( 'model' ).setProperty( 'filter', filter );
    },

    /**
     *
     * @param propertyName
     * @returns {*}
     */
    getFilterParams: function( propertyName ) {
        if( arguments.length === 0 ) {
            propertyName = 'filterParams';
        } else {
            if( propertyName == '' ) {
                propertyName = 'filterParams';
            } else {
                propertyName = 'filterParams.' + propertyName;
            }
        }

        return this.get( 'model' ).getProperty( propertyName );
    },

    /**
     *
     * @param propertyName
     * @param value
     */
    setFilterParams: function( propertyName, value ) {
        if( arguments.length === 1 ) {
            value = propertyName;
            propertyName = 'filterParams';
        } else {
            if( propertyName == '' ) {
                propertyName = 'filterParams';
            } else {
                propertyName = 'filterParams.' + propertyName;
            }
        }

        this.get( 'model' ).setProperty( propertyName, value );
    },

    /**
     *
     * @param property
     * @param handler
     * @param owner
     * @returns {*}
     */
    onPropertyChanged: function( property, handler, owner ) {
        if( typeof property === 'function' ) {
            owner = handler;
            handler = property;
            property = '*';
        }

        if( property.charAt( 0 ) == '.' ) {
            property = property.substr( 1 );
        } else {
            if( property == '' ) {
                property = 'items';
            } else {
                property = 'items.' + property;
            }
        }

        return this.get( 'model' ).onPropertyChanged( property, function( context, args ) {
            var property = args.property;

            if( property.substr( 0, 6 ) === 'items.' ) {
                property = property.substr( 6 );
            } else if( property === 'items' ) {
                property = '';
            } else {
                property = '.' + property;
            }

            args.property = property;

            handler( context, args );
        }, owner );
    },

    /**
     *
     * @param propertyName
     * @param bindId
     */
    offPropertyChanged: function( propertyName, bindId ) {

        if( propertyName.charAt( 0 ) === '.' ) {
            propertyName = propertyName.substr( 1 );
        } else {
            if( propertyName == '' ) {
                propertyName = 'items';
            } else {
                propertyName = 'items.' + propertyName;
            }
        }

        this.get( 'model' ).offPropertyChanged( propertyName, bindId );
    },

    /**
     *
     */
    remove: function() {
        this.off();
        this.clear();
    },

    /**
     *
     * @param handler
     * @param owner
     */
    onSelectedItemChanged: function( handler, owner ) {
        var that = this;

        this.get( 'model' ).onPropertyChanged( 'selectedItem', function( context, args ) {
            var argument = that._getArgumentTemplate();
            argument.value = args.newValue;

            handler( context, argument );
        }, owner );
    },

    /**
     *
     * @param handler
     * @param subscriptionContext
     */
    onErrorValidator: function( handler, subscriptionContext ) {
        this.on( 'onErrorValidator', handler, subscriptionContext );
    },

    /**
     *
     * @param subscriptionContext
     */
    offErrorValidator: function( subscriptionContext ) {
        this.off( null, null, subscriptionContext );
    },

    /**
     *
     * @param handler
     */
    onItemSaved: function( handler ) {
        this.on( 'onItemSaved', handler );
    },

    /**
     *
     * @param handler
     */
    onItemCreated: function( handler ) {
        this.on( 'onItemCreated', handler );
    },

    /**
     *
     * @param handler
     */
    onItemsUpdated: function( handler ) {
        this.on( 'onItemsUpdated', handler );
    },

    /**
     *
     * @param handler
     */
    onItemsUpdatedOnce: function( handler ) {
        this.once( 'onItemsUpdated', handler );
    },

    /**
     *
     * @param handler
     */
    onItemDeleted: function( handler ) {
        this.on( 'onItemDeleted', handler );
    },

    /**
     *
     * @param handler
     */
    onProviderError: function( handler ) {
        this.off( 'onProviderError' );
        this.on( 'onProviderError', handler );

        this.onProviderErrorHandler = handler;
    },

    /**
     *
     * @returns {*}
     */
    getName: function() {
        return this.get( 'name' );
    },

    /**
     *
     * @param name
     */
    setName: function( name ) {
        this.set( 'name', name );
        this.name = name;
    },

    /**
     *
     * @returns {*}
     */
    getView: function() {
        return this.get( 'view' );
    },

    /**
     *
     * @param property
     * @returns {*}
     */
    getProperty: function( property ) {
        var firstChar = property.charAt( 0 );
        var indexOfSelectedItem;

        if( this.get( 'isNumRegEx' ).test( firstChar ) ) {
            property = 'items.' + property;
        } else if( firstChar == '' ) {
            property = 'items';
        } else if( firstChar === '$' ) {
            indexOfSelectedItem = this._indexOfSelectedItem();
            if( indexOfSelectedItem == -1 ) {
                return undefined;
            }
            property = 'items.' + indexOfSelectedItem + property.substr( 1 );
        } else if( firstChar === '.' ) {
            property = property.substr( 1 );
        } else {
            indexOfSelectedItem = this._indexOfSelectedItem();
            if( indexOfSelectedItem == -1 ) {
                return undefined;
            }
            property = 'items.' + indexOfSelectedItem + '.' + property;
        }

        return this.get( 'model' ).getProperty( property );
    },

    /**
     *
     * @param property
     * @param value
     */
    setProperty: function( property, value ) {
        var propertyPaths = property.split( '.' );
        var firstChar;
        var indexOfSelectedItem;
        var resultOfSet;

        if( propertyPaths[ 0 ] === '$' ) {
            indexOfSelectedItem = this._indexOfSelectedItem();
            if( indexOfSelectedItem === -1 ) {
                return;
            }

            property = indexOfSelectedItem + property.substr( 1 );
            propertyPaths[ 0 ] = indexOfSelectedItem.toString();
        }

        firstChar = property.charAt( 0 );

        if( propertyPaths.length === 1 ) {
            if( propertyPaths[ 0 ] === '' ) {
                this._setItems( value );
            } else if( this.get( 'isNumRegEx' ).test( propertyPaths[ 0 ] ) ) {
                this._changeItem( propertyPaths[ 0 ], value );
            } else {
                indexOfSelectedItem = this._indexOfSelectedItem();
                if( indexOfSelectedItem === -1 ) {
                    return;
                }
                property = 'items.' + indexOfSelectedItem + '.' + property;
                resultOfSet = this.get( 'model' ).setProperty( property, value );

                if( resultOfSet ) {
                    this._includeItemToModifiedSetByIndex( indexOfSelectedItem );
                }
            }
        } else {
            if( firstChar === '.' ) {
                property = property.substr( 1 );
                this.get( 'model' ).setProperty( property, value );

            } else if( this.get( 'isNumRegEx' ).test( firstChar ) ) {
                property = 'items.' + property;
                resultOfSet = this.get( 'model' ).setProperty( property, value );

                if( resultOfSet ) {
                    this._includeItemToModifiedSetByIndex( parseInt( propertyPaths[ 0 ] ) );
                }
            } else {
                indexOfSelectedItem = this._indexOfSelectedItem();
                if( indexOfSelectedItem === -1 ) {
                    return;
                }
                property = 'items.' + indexOfSelectedItem + '.' + property;
                resultOfSet = this.get( 'model' ).setProperty( property, value );

                if( resultOfSet ) {
                    this._includeItemToModifiedSetByIndex( indexOfSelectedItem );
                }
            }
        }
    },

    /**
     *
     * @param items
     * @private
     */
    _setItems: function( items ) {
        this._detectIdentifyingMode( items );

        var indexOfItemsById;

        this.set( 'isDataReady', true );
        this.get( 'model' ).setProperty( 'items', items );
        this._clearModifiedSet();

        if( items && items.length > 0 ) {
            indexOfItemsById = this._indexItemsById( items );
            this.set( 'itemsById', indexOfItemsById );

            if( !this._restoreSelectedItem() ) {
                this.setSelectedItem( items[ 0 ] );
            }
        } else {
            this.setSelectedItem( null );
        }
    },

    /**
     *
     * @private
     */
    _restoreSelectedItem: function() {
        // override by strategy
        var logger = InfinniUI.global.logger;
        logger.warn( {
            message: 'BaseDataSource._restoreSelectedItem: not overrided by strategy',
            source: this
        } );
    },

    /**
     *
     * @returns {*}
     */
    getSelectedItem: function() {
        return this.get( 'model' ).getProperty( 'selectedItem' );
    },

    /**
     *
     * @param item
     * @param success
     * @param error
     */
    setSelectedItem: function( item, success, error ) {
        // override by strategy
        var logger = InfinniUI.global.logger;
        logger.warn( {
            message: 'BaseDataSource.setSelectedItem: not overrided by strategy',
            source: this
        } );
    },

    /**
     *
     * @param item
     * @param successHandler
     * @private
     */
    _notifyAboutSelectedItem: function( item, successHandler ) {
        var context = this.getContext();
        var argument = this._getArgumentTemplate();

        argument.value = item;

        if( successHandler ) {
            successHandler( context, argument );
        }
    },

    /**
     *
     * @param index
     * @private
     */
    _tuneMirroringOfModel: function( index ) {
        if( index !== -1 ) {
            this.get( 'model' ).setMirroring( 'items.$', 'items.' + index );
        } else {
            this.get( 'model' ).setMirroring( null, null );
        }
    },

    /**
     *
     * @returns {*}
     */
    getIdProperty: function() {
        return this.get( 'idProperty' );
    },

    /**
     *
     * @param value
     */
    setIdProperty: function( value ) {
        this.set( 'idProperty', value );
    },

    /**
     *
     * @returns {*}
     */
    getFillCreatedItem: function() {
        return this.get( 'fillCreatedItem' );
    },

    /**
     *
     * @param fillCreatedItem
     */
    setFillCreatedItem: function( fillCreatedItem ) {
        this.set( 'fillCreatedItem', fillCreatedItem );
    },

    /**
     *
     * @param name
     */
    suspendUpdate: function( name ) {
        var reason = name || 'default';
        var suspended = this.get( 'suspendingList' );

        if( suspended.indexOf( reason ) === -1 ) {
            suspended = suspended.slice( 0 );
            suspended.push( reason );
            this.set( 'suspendingList', suspended );
        }
    },

    /**
     *
     * @param name
     */
    resumeUpdate: function( name ) {
        var reason = name || 'default';
        var suspended = this.get( 'suspendingList' );
        var index = suspended.indexOf( reason );

        if( index !== -1 ) {
            suspended = suspended.slice( 0 );
            suspended.splice( index, 1 );
            this.set( 'suspendingList', suspended );

            // если источник полностью разморожен, а до этого вызывались updateItems, не выполненные из-за заморозки,
            // нужно вызвать updateItems
            if( !this.isUpdateSuspended() && this.get( 'waitingOnUpdateItemsHandlers' ).length > 0 ) {
                // waitingOnUpdateItemsHandlers будут вызваны в _notifyAboutItemsUpdated
                // или _onErrorProviderUpdateItemsHandle
                this.updateItems();
            }
        }
    },

    /**
     *
     * @returns {boolean}
     */
    isUpdateSuspended: function() {
        var suspended = this.get( 'suspendingList' );
        return suspended.length > 0;
    },

    /**
     *
     * @returns {*}
     */
    isModifiedItems: function() {
        return this.isModified();
    },

    /**
     *
     * @param item
     * @returns {boolean}
     */
    isModified: function( item ) {
        if( arguments.length === 0 ) {
            return _.size( this.get( 'modifiedItems' ) ) > 0;
        }

        if( item === null || typeof item === 'undefined' ) {
            return false;
        }
        else {
            var itemId = this.idOfItem( item );
            return itemId in this.get( 'modifiedItems' );
        }
    },

    /**
     *
     * @param index
     * @private
     */
    _includeItemToModifiedSetByIndex: function( index ) {
        var item;

        item = this.getItems()[ index ];
        this._includeItemToModifiedSet( item );
    },

    /**
     *
     * @param item
     * @private
     */
    _includeItemToModifiedSet: function( item ) {
        // override by strategy
        var logger = InfinniUI.global.logger;
        logger.warn( {
            message: 'BaseDataSource._includeItemToModifiedSet: not overrided by strategy',
            source: this
        } );
    },

    /**
     *
     * @param item
     * @private
     */
    _excludeItemFromModifiedSet: function( item ) {
        // override by strategy
        var logger = InfinniUI.global.logger;
        logger.warn( {
            message: 'BaseDataSource._excludeItemFromModifiedSet: not overrided by strategy',
            source: this
        } );
    },

    /**
     *
     * @private
     */
    _clearModifiedSet: function() {
        this.set( 'modifiedItems', {} );
    },

    /**
     * @description Проверяет формат имя свойства атрибута
     * @param propertyName
     * @private
     */
    _checkPropertyName: function( propertyName ) {
        var result = true;

        try {
            if( propertyName && propertyName.length > 0 ) {
                result = propertyName.match( /^[\$#@\d]+/ );
            }
            if( !result ) {
                throw new Error( 'Wrong property name "' + propertyName + '"' );
            }
        } catch( e ) {
            console.debug( e );
        }
    },

    /**
     *
     * @param index
     * @param value
     * @private
     */
    _changeItem: function( index, value ) {
        var item = this.get( 'model' ).getProperty( 'items.' + index );
        var isSelectedItem = ( item == this.getSelectedItem() );
        var idProperty = this.get( 'idProperty' );
        var indexedItemsById = this.get( 'itemsById' );

        if( value == item ) {
            return;
        }

        this._excludeItemFromModifiedSet( item );
        delete indexedItemsById[ item[ idProperty ] ];

        this.get( 'model' ).setProperty( 'items.' + index, value );

        this._includeItemToModifiedSet( value );
        indexedItemsById[ value[ idProperty ] ] = value;
        this.set( 'itemsById', indexedItemsById );

        if( isSelectedItem ) {
            this.get( 'model' ).setProperty( 'selectedItem', value );
        }
    },

    /**
     *
     */
    tryInitData: function() {
        if( !this.get( 'isDataReady' ) && !this.get( 'isRequestInProcess' ) ) {
            this.updateItems();
        }
    },

    /**
     *
     * @param item
     * @param success
     * @param error
     */
    saveItem: function( item, success, error ) {
        var dataProvider = this.get( 'dataProvider' );
        var that = this;
        var validateResult;

        if( !this.isModified( item ) ) {
            this._notifyAboutItemSaved( { item: item, result: null }, 'notModified' );
            that._executeCallback( success, { item: item, validationResult: new ValidationResult() } );
            return;
        }

        validateResult = this.getValidationResult( item );
        if( !validateResult.IsValid ) {
            this._notifyAboutValidation( validateResult );
            this._executeCallback( error, { item: item, validationResult: validateResult } );
            return;
        }

        dataProvider.saveItem( item, function( data ) {
            that._excludeItemFromModifiedSet( item );
            that._notifyAboutItemSaved( { item: item, result: data.data }, 'modified' );
            that._executeCallback( success, {
                item: item,
                validationResult: that._extractValidationResult( data ),
                originalResponse: data
            } );
        }, function( data ) {
            var result = that._extractValidationResult( data );

            that._executeCallback( error, { item: item, validationResult: result, originalResponse: data } );
            that._onServerErrorHandler( {
                response: data,
                validationResult: result,
                item: item
            } );
        } );
    },

    /**
     *
     * @param data
     * @returns {*}
     * @private
     */
    _extractValidationResult: function( data ) {
        if( data.data && data.data.responseJSON && data.data.responseJSON[ 'Result' ] ) {
            return data.data.responseJSON[ 'Result' ][ 'ValidationResult' ];
        }

        return data.data && data.data[ 'Result' ] && data.data[ 'Result' ][ 'ValidationResult' ];
    },

    /**
     *
     * @param callback
     * @param args
     * @private
     */
    _executeCallback: function( callback, args ) {
        if( callback ) {
            callback( this.getContext(), args );
        }
    },

    /**
     *
     * @param data
     * @param result
     * @private
     */
    _notifyAboutItemSaved: function( data, result ) {
        var context = this.getContext();
        var argument = this._getArgumentTemplate();

        argument.value = data;
        argument.result = result;

        this.trigger( 'onItemSaved', context, argument );
    },

    /**
     *
     * @param item
     * @param success
     * @param error
     */
    deleteItem: function( item, success, error ) {
        var dataProvider = this.get( 'dataProvider' );
        var that = this;
        var itemId = this.idOfItem( item );
        var isItemInSet = typeof this.get( 'itemsById' )[ itemId ] !== 'undefined';

        if( ( item === null || typeof item === 'undefined' ) || ( typeof itemId !== 'undefined' && !isItemInSet ) ) {
            this._notifyAboutMissingDeletedItem( item, error );
            return;
        }

        this.beforeDeleteItem( item );

        dataProvider.deleteItem( item, function( data ) {
            that._handleDeletedItem( item );
            that._executeCallback( success, {
                item: item,
                validationResult: that._extractValidationResult( data ),
                originalResponse: data
            } );
        }, function( data ) {
            var result = that._extractValidationResult( data );

            that._executeCallback( error, { item: item, validationResult: result, originalResponse: data } );
            that._onServerErrorHandler( {
                response: data,
                validationResult: result,
                item: item
            } );
        } );
    },

    /**
     *
     * @param params
     * @private
     */
    _onServerErrorHandler: function( params ) {
        var validationResult = params.validationResult;
        var context = this.getContext();

        if( validationResult && validationResult.Items ) {
            this._notifyAboutValidation( validationResult );
        } else {
            this.trigger( 'onProviderError', context, { item: params.item, data: params.response } );
        }
    },

    /**
     *
     * @param item
     */
    beforeDeleteItem: function( item ) {
    },

    /**
     *
     * @param item
     * @private
     */
    _handleDeletedItem: function( item ) {
        // override by strategy
        var logger = InfinniUI.global.logger;
        logger.warn( {
            message: 'BaseDataSource._handleDeletedItem: not overrided by strategy',
            source: this
        } );
    },

    /**
     *
     * @param item
     * @param successHandler
     * @private
     */
    _notifyAboutItemDeleted: function( item, successHandler ) {
        var context = this.getContext();
        var argument = this._getArgumentTemplate();

        argument.value = item;

        this.trigger( 'onItemDeleted', context, argument );
    },

    /**
     *
     * @param item
     * @param errorHandler
     * @private
     */
    _notifyAboutMissingDeletedItem: function( item, errorHandler ) {
        var context = this.getContext();
        var argument = this._getArgumentTemplate();

        argument.value = item;
        argument.error = {
            message: 'Нельзя удалить элемент, которого нет текущем наборе источника данных'
        };

        if( errorHandler ) {
            errorHandler( context, argument );
        }
    },

    /**
     *
     * @returns {*}
     */
    isDataReady: function() {
        return this.get( 'isDataReady' );
    },

    /**
     *
     * @returns {*}
     */
    getItems: function() {
        var logger = InfinniUI.global.logger;

        if( !this.isDataReady() ) {
            logger.warn( {
                message: 'BaseDataSource: Попытка получить данные источника данных (' + this.get( 'name' ) + '), до того как он был проинициализирован данными',
                source: this
            } );
        }

        return this.get( 'model' ).getProperty( 'items' );
    },

    /**
     *
     * @param onSuccess
     * @param onError
     */
    updateItems: function( onSuccess, onError ) {
        if( !this.isUpdateSuspended() ) {
            var dataProvider = this.get( 'dataProvider' );
            var that = this;

            this.set( 'isRequestInProcess', true );
            dataProvider.getItems(
                function( data ) {
                    that._handleSuccessUpdateItemsInProvider( data, onSuccess );
                },
                function( data ) {
                    var context = that.getContext();
                    that._onErrorProviderUpdateItemsHandle( data, onError );
                    that.trigger( 'onProviderError', context, { data: data } );
                }
            );

        } else {
            var handlers = this.get( 'waitingOnUpdateItemsHandlers' );
            handlers.push( {
                onSuccess: onSuccess,
                onError: onError
            } );
        }
        //devblockstart
        InfinniUI.global.messageBus.send( 'updateItems', { dataSource: this } );
        //devblockstop
    },

    /**
     *
     * @param data
     * @param callback
     * @private
     */
    _handleSuccessUpdateItemsInProvider: function( data, callback ) {
        var that = this;
        var isWaiting = that.get( 'isWaiting' );
        var finishUpdating = function() {
            that.set( 'isRequestInProcess', false );
            that._handleUpdatedItemsData( data.data, callback );
        };

        if( isWaiting ) {
            that.once( 'change:isWaiting', function() {
                finishUpdating();
            } );
        } else {
            finishUpdating();
        }
    },

    /**
     *
     * @param data
     * @param callback
     * @private
     */
    _onErrorProviderUpdateItemsHandle: function( data, callback ) {
        var handlers = this.get( 'waitingOnUpdateItemsHandlers' );
        var context = this.getContext();

        // вызываем обработчики которые были переданы на отложенных updateItems (из-за замороженного источника)
        for( var i = 0, ii = handlers.length; i < ii; i++ ) {
            if( handlers[ i ].onError ) {
                handlers[ i ].onError( context, data );
            }
        }

        this.set( 'waitingOnUpdateItemsHandlers', [] );

        if( typeof callback === 'function' ) {
            callback( context, data );
        }
    },

    /**
     *
     * @param value
     */
    setIsWaiting: function( value ) {
        this.set( 'isWaiting', value );
    },

    /**
     *
     * @param itemsData
     * @param callback
     * @private
     */
    _handleUpdatedItemsData: function( itemsData, callback ) {
        if( this.get( 'newItemsHandler' ) ) {
            itemsData = this.get( 'newItemsHandler' )( itemsData );
        }

        this._setItems( itemsData );
        this._notifyAboutItemsUpdated( itemsData, callback );
    },

    /**
     *
     * @param itemsData
     * @param callback
     * @private
     */
    _notifyAboutItemsUpdated: function( itemsData, callback ) {
        var context = this.getContext();
        var argument = {
            value: itemsData,
            source: this
        };

        // вызываем обработчики которые были переданы на отложенных updateItems (из за замороженного источника)
        var handlers = this.get( 'waitingOnUpdateItemsHandlers' );

        for( var i = 0, ii = handlers.length; i < ii; i++ ) {
            if( handlers[ i ].onSuccess ) {
                handlers[ i ].onSuccess( context, argument );
            }
        }

        this.set( 'waitingOnUpdateItemsHandlers', [] );

        if( callback ) {
            callback( context, argument );
        }

        this.trigger( 'onItemsUpdated', context, argument );
    },

    /**
     *
     * @param itemsData
     * @private
     */
    _notifyAboutItemsUpdatedAsPropertyChanged: function( itemsData ) {
        var context = this.getContext();
        var argument = this._getArgumentTemplate();

        argument.property = '';
        argument.newValue = itemsData;
        argument.oldValue = null;

        this.trigger( 'onPropertyChanged', context, argument );
        this.trigger( 'onPropertyChanged:', context, argument );
    },

    /**
     *
     * @param success
     * @param error
     */
    createItem: function( success, error ) {
        var dataProvider = this.get( 'dataProvider' );
        var idProperty = this.get( 'idProperty' );
        var that = this;
        var localItem;

        if( this.get( 'fillCreatedItem' ) ) {
            dataProvider.createItem(
                function( item ) {
                    that._handleDataForCreatingItem( item, success );
                },
                idProperty
            );
        } else {
            localItem = dataProvider.createLocalItem( idProperty );
            this._handleDataForCreatingItem( localItem, success );
        }
    },

    /**
     *
     * @param itemData
     * @param successHandler
     * @private
     */
    _handleDataForCreatingItem: function( itemData, successHandler ) {
        var items = this.getItems();

        if( items ) {
            items = items.slice();
            items.push( itemData );
        } else {
            items = [ itemData ];
        }

        this._setItems( items );
        this._includeItemToModifiedSet( itemData );
        this.setSelectedItem( itemData );
        this._notifyAboutItemCreated( itemData, successHandler );
    },

    /**
     *
     * @param createdItem
     * @param successHandler
     * @private
     */
    _notifyAboutItemCreated: function( createdItem, successHandler ) {
        var context = this.getContext();
        var argument = {
            value: createdItem
        };

        if( successHandler ) {
            successHandler( context, argument );
        }
        this.trigger( 'onItemCreated', context, argument );
    },

    /**
     *
     * @param criteriaList
     * @param onSuccess
     * @param onError
     * @private
     */
    _setCriteriaList: function( criteriaList, onSuccess, onError ) {
        this.set( 'criteriaList', criteriaList );
        this.updateItems( onSuccess, onError );
    },

    /**
     *
     * @param itemId
     */
    setIdFilter: function( itemId ) {
        var dataProvider = this.get( 'dataProvider' );
        var idFilter = dataProvider.createIdFilter( itemId );

        this.setFilter( idFilter );
    },

    /**
     *
     * @param handler
     */
    setNewItemsHandler: function( handler ) {
        this.set( 'newItemsHandler', handler );
    },

    /**
     *
     * @returns {*}
     */
    getErrorValidator: function() {
        return this.get( 'errorValidator' );
    },

    /**
     *
     * @param validatingFunction
     */
    setErrorValidator: function( validatingFunction ) {
        this.set( 'errorValidator', validatingFunction );
    },

    /**
     *
     * @param item
     * @returns {ValidationResult}
     */
    getValidationResult: function( item ) {
        var validatingFunction = this.getErrorValidator();
        var result = new ValidationResult();
        var isCheckingOneItem = !!item;
        var context = this.getContext();
        var items, subResult;

        if( validatingFunction ) {
            if( isCheckingOneItem ) {

                result = validatingFunction( context, item );

            } else {

                items = this.getItems();
                for( var i = 0, ii = items.length; i < ii; i++ ) {

                    subResult = validatingFunction( context, items[ i ] );
                    if( !subResult.IsValid ) {
                        this._addIndexToPropertiesOfValidationMessage( subResult.Items, i );
                        result.IsValid = false;
                        result.Items = _.union( result.Items, subResult.Items );
                    }

                }

            }
        }

        return result;
    },

    /**
     *
     * @param fileProvider
     */
    setFileProvider: function( fileProvider ) {
        this.set( 'fileProvider', fileProvider );
    },

    /**
     *
     * @returns {*}
     */
    getFileProvider: function() {
        return this.get( 'fileProvider' );
    },

    /**
     *
     * @param validationMessages
     * @param index
     * @private
     */
    _addIndexToPropertiesOfValidationMessage: function( validationMessages, index ) {
        for( var i = 0, ii = validationMessages.length; i < ii; i++ ) {
            validationMessages[ i ].property = index + '.' + validationMessages[ i ].property;
        }
    },

    /**
     *
     * @param validationResult
     * @private
     */
    _notifyAboutValidation: function( validationResult ) {
        if( !validationResult ) {
            return;
        }

        var context = this.getContext();
        var argument = {
            value: validationResult
        };

        this.trigger( 'onErrorValidator', context, argument );
    },

    /**
     *
     * @returns {*}
     */
    getContext: function() {
        return this.getView().getContext();
    },

    /**
     *
     * @param items
     * @returns {*}
     * @private
     */
    _indexItemsById: function( items ) {
        var idProperty = this.get( 'idProperty' );
        var result = {};
        var idValue;

        for( var i = 0, ii = items.length; i < ii; i++ ) {
            idValue = items[ i ][ idProperty ];
            result[ idValue ] = items[ i ];
        }

        return result;
    },

    /**
     *
     * @param item
     * @returns {*}
     * @private
     */
    _indexOfItem: function( item ) {
        var items = this.getItems();

        if( !items ) {
            return -1;
        }
        return items.indexOf( item );
    },

    /**
     *
     * @returns {*}
     * @private
     */
    _indexOfSelectedItem: function() {
        var selectedItem = this.getSelectedItem();

        return this._indexOfItem( selectedItem );
    },

    /**
     *
     * @param item
     * @returns {*}
     */
    idOfItem: function( item ) {
        var idProperty = this.get( 'idProperty' );

        if( !item ) {
            return undefined;
        }
        return item[ idProperty ];
    },

    /**
     *
     * @returns {*}
     */
    getCurrentRequestPromise: function() {
        var promise = $.Deferred();
        var logger = InfinniUI.global.logger;

        if( this.get( 'isRequestInProcess' ) ) {
            this.onItemsUpdatedOnce( function() {
                if( this.isDataReady() ) {
                    promise.resolve();
                } else {
                    logger.warn( {
                        message: 'BaseDataSource: strange, expected other dataReady status',
                        source: this
                    } );
                }
            } );
        } else {
            promise.resolve();
        }

        return promise;
    },

    /**
     *
     * @returns {*}
     */
    getNearestRequestPromise: function() {
        var promise = $.Deferred();

        this.onItemsUpdatedOnce( function() {
            if( this.isDataReady() ) {
                promise.resolve();
            } else {
                logger.warn( {
                    message: 'BaseDataSource: strange, expected other dataReady status',
                    source: this
                } );
            }
        } );

        return promise;
    },

    /**
     *
     * @param isLazy
     */
    setIsLazy: function( isLazy ) {
        this.set( 'isLazy', isLazy );
    },

    /**
     *
     * @returns {*}
     */
    isLazy: function() {
        return this.get( 'isLazy' );
    },

    /**
     *
     * @param priority
     */
    setResolvePriority: function( priority ) {
        this.set( 'resolvePriority', priority );
    },

    /**
     *
     * @returns {*}
     */
    getResolvePriority: function() {
        return this.get( 'resolvePriority' );
    },

    /**
     *
     * @param currentObject
     * @private
     * @returns {*}
     */
    _copyObject: function( currentObject ) {
        return JSON.parse( JSON.stringify( currentObject ) );
    },

    /**
     *
     * @returns {{source: BaseDataSource}}
     * @private
     */
    _getArgumentTemplate: function() {
        return {
            source: this
        };
    },

    /**
     *
     * @param items
     * @private
     */
    _detectIdentifyingMode: function( items ) {
        if( Array.isArray( items ) && items.length > 0 ) {
            if( !$.isPlainObject( items[ 0 ] ) || this.getIdProperty() in items[ 0 ] ) {
                this.set( 'identifyingMode', 'byId' );
                _.extend( this, BaseDataSource.identifyingStrategy.byId );
            } else {
                this.set( 'identifyingMode', 'byLink' );
                _.extend( this, BaseDataSource.identifyingStrategy.byLink );
            }
        } else {
            this.set( 'identifyingMode', 'byId' );
            _.extend( this, BaseDataSource.identifyingStrategy.byId );
        }
    },

    /**
     *
     * @private
     * @returns {*}
     */
    _getIdentifyingMode: function() {
        return this.get( 'identifyingMode' );
    }

} );

BaseDataSource.identifyingStrategy = {

    byId: {

        /**
         *
         * @returns {boolean}
         * @private
         */
        _restoreSelectedItem: function() {
            var selectedItem = this.getSelectedItem();
            var selectedItemId = this.idOfItem( selectedItem );

            if( selectedItemId !== null && typeof selectedItemId !== 'undefined' ) {
                var items = this.get( 'itemsById' );
                var newSelectedItem = items[ selectedItemId ];

                if( newSelectedItem !== null && typeof newSelectedItem !== 'undefined' ) {
                    this.setSelectedItem( newSelectedItem );
                    return true;
                }
            }

            return false;
        },

        /**
         *
         * @param item
         * @param success
         * @param error
         */
        setSelectedItem: function( item, success, error ) {
            var currentSelectedItem = this.getSelectedItem();
            var items = this.get( 'itemsById' );
            var itemId = this.idOfItem( item );
            var index;

            if( typeof item == 'undefined' ) {
                item = null;
            }

            if( item == currentSelectedItem ) {
                return;
            }

            if( item !== null ) {
                if( !items[ itemId ] ) {
                    if( !error ) {
                        throw new Error( 'BaseDataSource.setSelectedItem() Попытка выбрать элемент в источнике, которого нет среди элементов этого источника.' );
                    } else {
                        error( this.getContext(), { error: 'BaseDataSource.setSelectedItem() Попытка выбрать элемент в источнике, которого нет среди элементов этого источника.' } );
                        return;
                    }
                }
            }

            this.get( 'model' ).setProperty( 'selectedItem', item );

            index = this._indexOfItem( items[ itemId ] );
            this._tuneMirroringOfModel( index );

            this._notifyAboutSelectedItem( item, success );
        },

        /**
         *
         * @param item
         * @private
         */
        _includeItemToModifiedSet: function( item ) {
            var itemId = this.idOfItem( item );
            this.get( 'modifiedItems' )[ itemId ] = item;
        },

        /**
         *
         * @param item
         * @private
         */
        _excludeItemFromModifiedSet: function( item ) {
            var itemId = this.idOfItem( item );
            delete this.get( 'modifiedItems' )[ itemId ];
        },

        /**
         *
         * @param item
         * @private
         */
        _handleDeletedItem: function( item ) {
            var items = this.getItems();
            var idProperty = this.get( 'idProperty' );
            var itemId = this.idOfItem( item );
            var selectedItem = this.getSelectedItem();

            for( var i = 0, ii = items.length, needExit = false; i < ii && !needExit; i++ ) {
                if( items[ i ][ idProperty ] == itemId ) {
                    items.splice( i, 1 );
                    needExit = true;
                }
            }
            delete this.get( 'itemsById' )[ itemId ];
            this._excludeItemFromModifiedSet( item );

            if( selectedItem && selectedItem[ idProperty ] == itemId ) {
                this.setSelectedItem( null );
            }

            this._notifyAboutItemDeleted( item );
        }

    },

    byLink: {

        /**
         *
         * @returns {boolean}
         * @private
         */
        _restoreSelectedItem: function() {
            var selectedItem = this.getSelectedItem();
            var items = this.getItems();

            if( items.indexOf( selectedItem ) === -1 ) {
                return false;
            } else {
                return true;
            }
        },

        /**
         *
         * @param item
         * @param success
         * @param error
         */
        setSelectedItem: function( item, success, error ) {
            var currentSelectedItem = this.getSelectedItem();
            var index = this._indexOfItem( item );

            if( typeof item == 'undefined' ) {
                item = null;
            }

            if( item == currentSelectedItem ) {
                return;
            }

            if( item !== null ) {
                if( index == -1 ) {
                    if( !error ) {
                        throw new Error( 'BaseDataSource.setSelectedItem() Попытка выбрать элемент в источнике, которого нет среди элементов этого источника.' );
                    } else {
                        error( this.getContext(), { error: 'BaseDataSource.setSelectedItem() Попытка выбрать элемент в источнике, которого нет среди элементов этого источника.' } );
                        return;
                    }
                }
            }

            this.get( 'model' ).setProperty( 'selectedItem', item );
            this._tuneMirroringOfModel( index );
            this._notifyAboutSelectedItem( item, success );
        },

        /**
         *
         * @param item
         * @private
         */
        _includeItemToModifiedSet: function( item ) {
            this.get( 'modifiedItems' )[ '-' ] = item;
        },

        /**
         *
         * @param item
         * @private
         */
        _excludeItemFromModifiedSet: function( item ) {
            delete this.get( 'modifiedItems' )[ '-' ];
        },

        /**
         *
         * @param item
         * @private
         */
        _handleDeletedItem: function( item ) {
            var items = this.getItems();
            var selectedItem = this.getSelectedItem();
            var index = items.indexOf( item );

            if( index >= 0 ) {
                items.splice( index, 1 );
                this._excludeItemFromModifiedSet( item );

                if( selectedItem && selectedItem == item ) {
                    this.setSelectedItem( null );
                }
            }

            this._notifyAboutItemDeleted( item );
        }
    }

};

InfinniUI.BaseDataSource = BaseDataSource;

//####app/data/dataSource/restDataSource.js
/**
 * @constructor
 * @augments BaseDataSource
 */
var RestDataSource = BaseDataSource.extend( {

    defaults: _.defaults( {
        updatingItemsConverter: null
    }, BaseDataSource.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        BaseDataSource.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );

        var model = this.get( 'model' );

        model.urlParams = {
            get: {
                method: 'get',
                origin: null,
                path: '',
                data: {},
                params: {}
            },

            set: {
                method: 'post',
                origin: null,
                path: '',
                data: {},
                params: {}
            },

            delete: {
                method: 'delete',
                origin: null,
                path: '',
                data: {},
                params: {}
            }
        };

        this.initUrlParamsHandlers();
    },

    /**
     *
     */
    initDataProvider: function() {
        var dataProvider = InfinniUI.providerRegister.build( 'RestDataSource' );
        this.set( 'dataProvider', dataProvider );
    },

    /**
     *
     * @param propertyName
     * @returns {*}
     */
    getGettingUrlParams: function( propertyName ) {
        if( arguments.length == 0 ) {
            propertyName = 'urlParams.get';
        } else {
            if( propertyName == '' ) {
                propertyName = 'urlParams.get';
            } else {
                propertyName = 'urlParams.get.' + propertyName;
            }
        }
        return this.get( 'model' ).getProperty( propertyName );
    },

    /**
     *
     * @param propertyName
     * @param value
     */
    setGettingUrlParams: function( propertyName, value ) {
        if( arguments.length == 1 ) {
            value = propertyName;
            propertyName = 'urlParams.get';

        } else {
            if( propertyName == '' ) {
                propertyName = 'urlParams.get';
            } else {
                propertyName = 'urlParams.get.' + propertyName;
            }
        }

        this.get( 'model' ).setProperty( propertyName, value );
    },

    /**
     *
     */
    initUrlParamsHandlers: function() {
        var that = this;

        this.get( 'model' ).onPropertyChanged( 'urlParams.get.*', function( context, args ) {
            var dataProvider = that.get( 'dataProvider' );
            var urlParams = that.getGettingUrlParams();
            var templated;

            dataProvider.setOrigin( 'get', urlParams.origin );
            templated = that._templateParamsInStr( urlParams.path, urlParams.params );
            dataProvider.setPath( 'get', templated );
            templated = that._templateParamsInObject( urlParams.data, urlParams.params );
            dataProvider.setData( 'get', templated );
            dataProvider.setMethod( 'get', urlParams.method );

            if( that.get( 'isDataReady' ) || that.get( 'isRequestInProcess' ) || that.get( 'waitingOnUpdateItemsHandlers' ).length > 0 ) { // ds was resolved or waiting resolving
                that.updateItems();
            }
        } );

        this.get( 'model' ).onPropertyChanged( 'urlParams.set.*', function( context, args ) {
            var dataProvider = that.get( 'dataProvider' );
            var urlParams = that.getSettingUrlParams();
            var templated;

            dataProvider.setOrigin( 'set', urlParams.origin );
            templated = that._templateParamsInStr( urlParams.path, urlParams.params );
            dataProvider.setPath( 'set', templated );
            templated = that._templateParamsInObject( urlParams.data, urlParams.params );
            dataProvider.setData( 'set', templated );
            dataProvider.setMethod( 'set', urlParams.method );
        } );

        this.get( 'model' ).onPropertyChanged( 'urlParams.delete.*', function( context, args ) {
            var dataProvider = that.get( 'dataProvider' );
            var urlParams = that.getDeletingUrlParams();
            var templated;

            dataProvider.setOrigin( 'delete', urlParams.origin );
            templated = that._templateParamsInStr( urlParams.path, urlParams.params );
            dataProvider.setPath( 'delete', templated );
            templated = that._templateParamsInObject( urlParams.data, urlParams.params );
            dataProvider.setData( 'delete', templated );
            dataProvider.setMethod( 'delete', urlParams.method );
        } );
    },

    /**
     *
     */
    updateItems: function() {
        if( this._checkGettingUrlParamsReady() ) {
            BaseDataSource.prototype.updateItems.apply( this, Array.prototype.slice.call( arguments ) );
            this.resumeUpdate( 'urlGettingParamsNotReady' );

        } else {
            this.suspendUpdate( 'urlGettingParamsNotReady' );
            BaseDataSource.prototype.updateItems.apply( this, Array.prototype.slice.call( arguments ) );
        }
    },

    /**
     *
     * @param propertyName
     * @returns {*}
     */
    getSettingUrlParams: function( propertyName ) {
        if( arguments.length == 0 ) {
            propertyName = 'urlParams.set';
        } else {
            if( propertyName == '' ) {
                propertyName = 'urlParams.set';
            } else {
                propertyName = 'urlParams.set.' + propertyName;
            }
        }
        return this.get( 'model' ).getProperty( propertyName );
    },

    /**
     *
     * @param propertyName
     * @param value
     */
    setSettingUrlParams: function( propertyName, value ) {
        if( arguments.length == 1 ) {
            value = propertyName;
            propertyName = 'urlParams.set';
        } else {
            if( propertyName == '' ) {
                propertyName = 'urlParams.set';
            } else {
                propertyName = 'urlParams.set.' + propertyName;
            }
        }

        this.get( 'model' ).setProperty( propertyName, value );
    },

    /**
     *
     * @param propertyName
     * @returns {*}
     */
    getDeletingUrlParams: function( propertyName ) {
        if( arguments.length == 0 ) {
            propertyName = 'urlParams.delete';
        } else {
            if( propertyName == '' ) {
                propertyName = 'urlParams.delete';
            } else {
                propertyName = 'urlParams.delete.' + propertyName;
            }
        }
        return this.get( 'model' ).getProperty( propertyName );
    },

    /**
     *
     * @param propertyName
     * @param value
     */
    setDeletingUrlParams: function( propertyName, value ) {
        if( arguments.length == 1 ) {
            value = propertyName;
            propertyName = 'urlParams.delete';
        } else {
            if( propertyName == '' ) {
                propertyName = 'urlParams.delete';
            } else {
                propertyName = 'urlParams.delete.' + propertyName;
            }
        }

        this.get( 'model' ).setProperty( propertyName, value );
    },

    /**
     *
     * @returns {boolean}
     * @private
     */
    _checkGettingUrlParamsReady: function() {
        var allParams = [];
        var strWithParams;
        var params;
        var data;
        var definedParams;
        var param;

        if( !this._checkUrlParamsReady( this.getGettingUrlParams() ) ) {
            return false;
        }

        strWithParams = this.getGettingUrlParams( 'path' );
        params = this._findSubstitutionParams( strWithParams );
        allParams = allParams.concat( params );

        data = this.getGettingUrlParams( 'data' );
        strWithParams = JSON.stringify( data );
        params = this._findSubstitutionParams( strWithParams );
        allParams = allParams.concat( params );

        definedParams = this.getGettingUrlParams( 'params' );
        for( var i = 0, ii = allParams.length; i < ii; i++ ) {
            param = allParams[ i ];
            if( definedParams[ param ] === undefined ) {
                return false;
            }
        }

        return true;
    },

    /**
     *
     * @param params
     * @returns {*|boolean}
     * @private
     */
    _checkUrlParamsReady: function( params ) {
        return params && typeof params.origin === 'string'// && params.origin.lentgh > 0
            && typeof params.path === 'string'
            && typeof params.data === 'object'
            && typeof params.params === 'object';
    },

    /**
     *
     * @param str
     * @returns {Array}
     * @private
     */
    _findSubstitutionParams: function( str ) {
        if( !str ) {
            return [];
        }

        var result = [];
        str.replace( /<%([\s\S]+?)%>/g, function( p1, p2 ) {
            result.push( p2 );
            return p1;
        } );

        return result;
    },

    /**
     *
     * @param str
     * @param params
     * @returns {*}
     * @private
     */
    _templateParamsInStr: function( str, params ) {
        if( !str || !params ) {
            return str;
        }

        return str.replace( /<%([\s\S]+?)%>/g, function( p1, p2 ) {
            return params[ p2 ];
        } );
    },

    /**
     *
     * @param obj
     * @param params
     * @returns {*}
     * @private
     */
    _templateParamsInObject: function( obj, params ) {
        if( !obj || !params ) {
            return obj;
        }

        var str = JSON.stringify( obj );
        var tmpTemplated = this._templateParamsInStr( str, params );

        return JSON.parse( tmpTemplated );
    },

    /**
     * @returns {*}
     */
    getUpdatingItemsConverter: function() {
        return this.get( 'updatingItemsConverter' );
    },

    /**
     *
     * @param converter
     */
    setUpdatingItemsConverter: function( converter ) {
        this.set( 'updatingItemsConverter', converter );
    },

    /**
     *
     * @param itemsData
     * @param successHandler
     * @param errorHandler
     * @private
     */
    _handleUpdatedItemsData: function( itemsData, successHandler, errorHandler ) {
        var converter = this.getUpdatingItemsConverter();
        var items;

        if( converter ) {
            items = converter( itemsData );
        } else {
            items = itemsData;
        }

        BaseDataSource.prototype._handleUpdatedItemsData.call( this, items, successHandler, errorHandler );
    }

} );

InfinniUI.RestDataSource = RestDataSource;

//####app/data/dataSource/documentDataSource.js
/**
 * @constructor
 * @augments RestDataSource
 */
var DocumentDataSource = RestDataSource.extend( {

    defaults: _.defaults( {
        documentId: null

    }, RestDataSource.prototype.defaults ),

    /**
     *
     */
    initialize: function() {
        RestDataSource.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );

        var model = this.get( 'model' );

        model.setProperty( 'pageNumber', 0 );
        model.setProperty( 'pageSize', 15 );
        this.setUpdatingItemsConverter( function( data ) {
            model.setProperty( 'totalCount', data[ 'Result' ][ 'Count' ] );
            model.setProperty( 'additionalResult', data[ 'Result' ][ 'AdditionalResult' ] );
            return data[ 'Result' ][ 'Items' ];
        } );

        this.initHandlers();
    },

    /**
     *
     */
    initHandlers: function() {
        var model = this.get( 'model' );
        var that = this;
        var updateGettingUrlParams = _.bind( this.updateGettingUrlParams, this );
        var updateGettingUrlParamsWithReset = function() {
            that.suspendUpdate( 'updateGettingUrlParams' );
            that.get( 'model' ).setProperty( 'pageNumber', 0 );
            that.updateGettingUrlParams();
            that.resumeUpdate( 'updateGettingUrlParams' );
        };

        model.onPropertyChanged( 'documentId', function() {
            that.updateGettingUrlParams();
            that.updateSettingUrlParams();
            that.updateDeletingUrlParams();
        } );
        model.onPropertyChanged( 'filter', updateGettingUrlParamsWithReset );
        model.onPropertyChanged( 'filterParams.*', updateGettingUrlParamsWithReset );
        model.onPropertyChanged( 'pageNumber', updateGettingUrlParams );
        model.onPropertyChanged( 'pageSize', updateGettingUrlParamsWithReset );
        model.onPropertyChanged( 'search', updateGettingUrlParamsWithReset );
        model.onPropertyChanged( 'select', updateGettingUrlParams );
        model.onPropertyChanged( 'order', updateGettingUrlParamsWithReset );
        model.onPropertyChanged( 'needTotalCount', updateGettingUrlParams );

        this.updateGettingUrlParams();
        this.updateSettingUrlParams();
        this.updateDeletingUrlParams();
    },

    /**
     *
     */
    updateGettingUrlParamsWithReset: function() {
        this.suspendUpdate( 'updateGettingUrlParams' );
        this.get( 'model' ).setProperty( 'pageNumber', 0 );
        this.updateGettingUrlParams();
        this.resumeUpdate( 'updateGettingUrlParams' );
    },

    /**
     *
     */
    updateGettingUrlParams: function() {
        var model = this.get( 'model' );
        var params = {
            method: 'get',
            origin: InfinniUI.config.serverUrl,
            path: '/documents/' + this.get( 'model' ).getProperty( 'documentId' ),
            data: {},
            params: {}
        };
        var filter = model.getProperty( 'filter' );
        var filterParams = model.getProperty( 'filterParams' );
        var pageNumber = model.getProperty( 'pageNumber' );
        var pageSize = model.getProperty( 'pageSize' );
        var searchStr = model.getProperty( 'search' );
        var select = model.getProperty( 'select' );
        var order = model.getProperty( 'order' );
        var needTotalCount = model.getProperty( 'needTotalCount' );

        if( filter ) {
            params.data.filter = filter;
            if( filterParams ) {
                _.extend( params.params, filterParams );
            }
        }

        if( pageSize ) {
            pageNumber = pageNumber || 0;
            params.data.skip = pageNumber * pageSize;
            params.data.take = pageSize;
        }

        if( searchStr ) {
            params.data.search = searchStr;
        }

        if( select ) {
            params.data.select = select;
        }

        if( order ) {
            params.data.order = order;
        }

        if( needTotalCount ) {
            params.data.count = needTotalCount;
        }

        this.setGettingUrlParams( params );
    },

    /**
     *
     */
    updateSettingUrlParams: function() {
        var model = this.get( 'model' );
        var params = {
            method: 'post',
            origin: InfinniUI.config.serverUrl,
            path: '/documents/' + this.get( 'model' ).getProperty( 'documentId' ),
            data: {},
            params: {}
        };

        this.setSettingUrlParams( params );
    },

    /**
     *
     */
    updateDeletingUrlParams: function() {
        var model = this.get( 'model' );
        var params = {
            method: 'delete',
            origin: InfinniUI.config.serverUrl,
            path: '/documents/' + this.get( 'model' ).getProperty( 'documentId' ) + '/<%id%>',
            data: {},
            params: {}
        };

        this.setDeletingUrlParams( params );
    },

    /**
     *
     */
    initDataProvider: function() {
        var dataProvider = InfinniUI.providerRegister.build( 'DocumentDataSource' );
        this.set( 'dataProvider', dataProvider );
    },

    /**
     *
     * @returns {*}
     */
    getDocumentId: function() {
        return this.get( 'model' ).getProperty( 'documentId' );
    },

    /**
     *
     * @param documentId
     */
    setDocumentId: function( documentId ) {
        this.get( 'model' ).setProperty( 'documentId', documentId );
    },

    /**
     *
     * @returns {*}
     */
    getPageNumber: function() {
        return this.get( 'model' ).getProperty( 'pageNumber' );
    },

    /**
     *
     * @param pageNumber
     */
    setPageNumber: function( pageNumber ) {
        this.get( 'model' ).setProperty( 'pageNumber', pageNumber );
    },

    /**
     *
     * @returns {*}
     */
    getPageSize: function() {
        return this.get( 'model' ).getProperty( 'pageSize' );
    },

    /**
     *
     * @param pageSize
     */
    setPageSize: function( pageSize ) {
        this.get( 'model' ).setProperty( 'pageSize', pageSize );
    },

    /**
     *
     * @returns {*}
     */
    getSelect: function() {
        return this.get( 'model' ).getProperty( 'select' );
    },

    /**
     *
     * @param selectStr
     */
    setSelect: function( selectStr ) {
        this.get( 'model' ).setProperty( 'select', selectStr );
    },

    /**
     *
     * @returns {*}
     */
    getOrder: function() {
        return this.get( 'model' ).getProperty( 'order' );
    },

    /**
     *
     * @param orderConditionStr
     */
    setOrder: function( orderConditionStr ) {
        this.get( 'model' ).setProperty( 'order', orderConditionStr );
    },

    /**
     *
     * @returns {*}
     */
    getTotalCount: function() {
        return this.get( 'model' ).getProperty( 'totalCount' );
    },

    /**
     *
     * @returns {*}
     */
    getNeedTotalCount: function() {
        return this.get( 'model' ).getProperty( 'needTotalCount' );
    },

    /**
     *
     * @param needTotalCount
     */
    setNeedTotalCount: function( needTotalCount ) {
        this.get( 'model' ).setProperty( 'needTotalCount', needTotalCount );
    },

    /**
     *
     * @param item
     */
    beforeDeleteItem: function( item ) {
        var itemId = this.idOfItem( item );

        if( typeof itemId !== 'undefined' ) {
            this.setDeletingUrlParams( 'params.id', itemId );
        }
    },

    /**
     *
     * @param itemId
     */
    setIdFilter: function( itemId ) {
        this.setFilter( 'eq(' + this.getIdProperty() + ',' + this.quoteValue( itemId ) + ')' );
    },

    /**
     *
     * @param value
     * @returns {*}
     */
    quoteValue: function( value ) {
        var VALUE_QUOTE_CHAR = '\'';

        if( typeof value === 'string' ) {
            return VALUE_QUOTE_CHAR + value + VALUE_QUOTE_CHAR;
        } else {
            return value;
        }
    }

} );

InfinniUI.DocumentDataSource = DocumentDataSource;

//####app/data/dataSource/baseDataSourceBuilder.js
/**
 * @constructor
 * @mixes dataSourceValidationNotifierMixin
 */
var BaseDataSourceBuilder = function() {
};

_.extend( BaseDataSourceBuilder.prototype, {

    /**
     *
     * @param context
     * @param args
     * @returns {*}
     */
    build: function( context, args ) {
        var dataSource = this.createDataSource( args.parentView );

        dataSource.suspendUpdate( 'tuningInSourceBuilder' );

        this.applyMetadata( args.builder, args.parentView, args.metadata, dataSource );
        this.applySuspended( dataSource, args.suspended );

        dataSource.resumeUpdate( 'tuningInSourceBuilder' );

        return dataSource;
    },

    /**
     *
     * @param dataSource
     * @param suspended
     */
    applySuspended: function( dataSource, suspended ) {
        if( !suspended ) {
            return;
        }

        for( var name in suspended ) {
            if( !suspended.hasOwnProperty( name ) || dataSource.getName() !== name ) {
                continue;
            }

            dataSource.suspendUpdate( suspended[ name ] );
        }
    },

    /**
     *
     * @param builder
     * @param parentView
     * @param metadata
     * @param dataSource
     */
    applyMetadata: function( builder, parentView, metadata, dataSource ) {
        var idProperty = metadata.IdProperty;
        if( idProperty ) {
            dataSource.setIdProperty( idProperty );
        }

        if( 'SuspendUpdate' in metadata ) {
            dataSource.suspendUpdate( metadata[ 'SuspendUpdate' ] );
        }

        dataSource.setName( metadata.Name );
        dataSource.setFillCreatedItem( metadata.FillCreatedItem );

        if( 'IsLazy' in metadata ) {
            dataSource.setIsLazy( metadata[ 'IsLazy' ] );
        }

        if( 'Search' in metadata ) {
            dataSource.setSearch( metadata[ 'Search' ] );
        }

        if( 'Filter' in metadata ) {
            dataSource.setFilter( metadata[ 'Filter' ] );
        }
        if( 'FilterParams' in metadata ) {
            var params = metadata[ 'FilterParams' ];
            for( var k in params ) {
                this.initBindingToProperty( params[ k ], dataSource, parentView, '.filterParams.' + k, builder );
            }
        }

        if( 'IsLazy' in metadata ) {
            dataSource.setIsLazy( metadata[ 'IsLazy' ] );
        }

        if( 'ResolvePriority' in metadata ) {
            dataSource.setResolvePriority( metadata[ 'ResolvePriority' ] );
        }

        if( typeof metadata.CustomProperties === 'object' ) {
            this.initCustomProperties( dataSource, metadata.CustomProperties );
        }

        this.initValidation( parentView, dataSource, metadata );
        this.initNotifyValidation( dataSource );
        this.initScriptsHandlers( parentView, metadata, dataSource );
        this.initFileProvider( dataSource );
    },

    /**
     *
     * @param parent
     * @returns {BaseDataSource}
     */
    createDataSource: function( parent ) {
        return new BaseDataSource( {
            view: parent
        } );
    },

    /**
     *
     * @param dataSource
     * @param customProperties
     */
    initCustomProperties: function( dataSource, customProperties ) {
        for( var key in customProperties ) {
            if( customProperties.hasOwnProperty( key ) ) {
                var value = customProperties[ key ];
                dataSource.setProperty( '.' + key, value );
            }
        }
    },

    /**
     * @protected
     * @description Инициализация обработчиков для валидации данных
     * @param parentView
     * @param dataSource
     * @param metadata
     */
    initValidation: function( parentView, dataSource, metadata ) {
        if( metadata.ValidationErrors ) {
            dataSource.setErrorValidator( function( context, args ) {
                return new ScriptExecutor( parentView ).executeScript( metadata.ValidationErrors, args );
            } );
        }
    },

    /**
     * @description Скриптовые обработчики на события
     * @param parentView
     * @param metadata
     * @param dataSource
     */
    initScriptsHandlers: function( parentView, metadata, dataSource ) {
        if( !parentView ) {
            return;
        }

        if( metadata.OnSelectedItemChanged ) {
            dataSource.onSelectedItemChanged( function( context, args ) {
                new ScriptExecutor( parentView ).executeScript( metadata.OnSelectedItemChanged, args );
            } );
        }

        if( metadata.OnItemsUpdated ) {
            dataSource.onItemsUpdated( function( context, args ) {
                new ScriptExecutor( parentView ).executeScript( metadata.OnItemsUpdated, args );
            } );
        }

        if( metadata.OnPropertyChanged ) {
            dataSource.onPropertyChanged( function( context, args ) {
                new ScriptExecutor( parentView ).executeScript( metadata.OnPropertyChanged, args );
            } );
        }

        if( metadata.OnItemDeleted ) {
            dataSource.onItemDeleted( function( context, args ) {
                new ScriptExecutor( parentView ).executeScript( metadata.OnItemDeleted, args );
            } );
        }

        if( metadata.OnErrorValidator ) {
            dataSource.onErrorValidator( function( context, args ) {
                new ScriptExecutor( parentView ).executeScript( metadata.OnErrorValidator, args );
            } );
        }

        if( metadata.OnProviderError ) {
            dataSource.onProviderError( function( context, args ) {
                new ScriptExecutor( parentView ).executeScript( metadata.OnProviderError, args );
            } );
        }
    },

    /**
     *
     * @param params
     * @returns {Function}
     */
    buildBindingBuilder: function( params ) {
        return function( bindingMetadata ) {
            return params.builder.buildBinding( bindingMetadata, {
                parentView: params.parentView,
                basePathOfProperty: params.basePathOfProperty
            } );
        };
    },

    /**
     *
     * @param dataSource
     */
    initFileProvider: function( dataSource ) {
        var host = InfinniUI.config.serverUrl;
        var fileUrlConstructor = new DocumentUploadQueryConstructor( host );
        var fileProvider = new DocumentFileProvider( fileUrlConstructor );

        dataSource.setFileProvider( fileProvider );
    },

    /**
     *
     * @param valueMetadata
     * @param dataSource
     * @param parentView
     * @param pathForBinding
     * @param builder
     */
    initBindingToProperty: function( valueMetadata, dataSource, parentView, pathForBinding, builder ) {
        if( typeof valueMetadata !== 'object' ) {
            if( typeof valueMetadata !== 'undefined' ) {
                dataSource.setProperty( pathForBinding, valueMetadata );
            }

        } else {
            var args = {
                parent: parentView,
                parentView: parentView
            };
            var dataBinding = builder.buildBinding( valueMetadata, args );

            dataBinding.setMode( InfinniUI.BindingModes.toElement );
            dataBinding.bindElement( dataSource, pathForBinding );
        }
    }

} );

_.extend( BaseDataSourceBuilder.prototype, dataSourceValidationNotifierMixin );

InfinniUI.BaseDataSourceBuilder = BaseDataSourceBuilder;

//####app/data/dataSource/restDataSourceBuilder.js
/**
 * @augments BaseDataSourceBuilder
 * @constructor
 */
var RestDataSourceBuilder = function() {
    _.superClass( RestDataSourceBuilder, this );
};

_.inherit( RestDataSourceBuilder, BaseDataSourceBuilder );

_.extend( RestDataSourceBuilder.prototype, {

    /**
     * @returns {RestDataSource}
     * @param parent
     */
    createDataSource: function( parent ) {
        return new RestDataSource( {
            view: parent
        } );
    },

    /**
     *
     * @param builder
     * @param parent
     * @param metadata
     * @param dataSource
     */
    applyMetadata: function( builder, parent, metadata, dataSource ) {
        BaseDataSourceBuilder.prototype.applyMetadata.call( this, builder, parent, metadata, dataSource );

        var tmpParams;

        if( metadata[ 'OnProviderError' ] === null || typeof metadata[ 'OnProviderError' ] === 'undefined' ) {
            dataSource.onProviderError( this._getCompensateProviderErrorHandler() );
        }

        if( 'GettingParams' in metadata ) {
            tmpParams = this.extractUrlParams( metadata[ 'GettingParams' ], '.urlParams.get.params' );
            dataSource.setGettingUrlParams( tmpParams );
            this.bindParams( metadata[ 'GettingParams' ], dataSource, parent, '.urlParams.get.params', builder );
        }

        if( 'SettingParams' in metadata ) {
            tmpParams = this.extractUrlParams( metadata[ 'SettingParams' ], '.urlParams.set.params' );
            dataSource.setSettingUrlParams( tmpParams );
            this.bindParams( metadata[ 'SettingParams' ], dataSource, parent, '.urlParams.set.params', builder );
        }

        if( 'DeletingParams' in metadata ) {
            tmpParams = this.extractUrlParams( metadata[ 'DeletingParams' ], '.urlParams.delete.params' );
            dataSource.setDeletingUrlParams( tmpParams );
            this.bindParams( metadata[ 'DeletingParams' ], dataSource, parent, '.urlParams.delete.params', builder );
        }

        if( 'UpdatingItemsConverter' in metadata ) {
            dataSource.setUpdatingItemsConverter( function( items ) {
                return new ScriptExecutor( parent ).executeScript( metadata[ 'UpdatingItemsConverter' ], {
                    value: items,
                    source: dataSource
                } );
            } );
        }
    },

    /**
     *
     * @param urlParamsMetadata
     * @param pathForBinding
     * @returns {*}
     */
    extractUrlParams: function( urlParamsMetadata, pathForBinding ) {
        var result = {};

        if( 'Origin' in urlParamsMetadata ) {
            result.origin = urlParamsMetadata[ 'Origin' ];
        } else {
            result.origin = InfinniUI.config.serverUrl;
        }

        if( 'Path' in urlParamsMetadata ) {
            result.path = urlParamsMetadata[ 'Path' ];
        }

        if( 'Data' in urlParamsMetadata ) {
            result.data = urlParamsMetadata[ 'Data' ];
        }

        if( 'Method' in urlParamsMetadata ) {
            result.method = urlParamsMetadata[ 'Method' ];
        }

        result.params = {};

        return result;
    },

    /**
     *
     * @param methodMetadata
     * @param dataSource
     * @param parentView
     * @param pathForBinding
     * @param builder
     */
    bindParams: function( methodMetadata, dataSource, parentView, pathForBinding, builder ) {
        if( 'Params' in methodMetadata ) {
            var params = methodMetadata[ 'Params' ];
            for( var k in params ) {
                this.initBindingToProperty( params[ k ], dataSource, parentView, pathForBinding + '.' + k, builder );
            }
        }
    },

    /**
     *
     * @param dataSource
     * @returns {Function}
     * @private
     */
    _getCompensateProviderErrorHandler: function( dataSource ) {
        return function( context, args ) {
            var exchange = InfinniUI.global.messageBus;
            exchange.send( messageTypes.onNotifyUser, { messageText: 'Ошибка на сервере', messageType: 'error' } );
        };
    }

} );

InfinniUI.RestDataSourceBuilder = RestDataSourceBuilder;

//####app/data/dataSource/documentDataSourceBuilder.js
/**
 *
 * @augments BaseDataSourceBuilder
 * @constructor
 */
var DocumentDataSourceBuilder = function() {
    _.superClass( DocumentDataSourceBuilder, this );
};

_.inherit( DocumentDataSourceBuilder, BaseDataSourceBuilder );

_.extend( DocumentDataSourceBuilder.prototype, {

    /**
     *
     * @param builder
     * @param parent
     * @param metadata
     * @param dataSource
     */
    applyMetadata: function( builder, parent, metadata, dataSource ) {
        BaseDataSourceBuilder.prototype.applyMetadata.call( this, builder, parent, metadata, dataSource );

        dataSource.setDocumentId( metadata[ 'DocumentId' ] );

        if( 'Select' in metadata ) { dataSource.setSelect( metadata[ 'Select' ] ); }
        if( 'Order' in metadata ) { dataSource.setOrder( metadata[ 'Order' ] ); }
        if( 'NeedTotalCount' in metadata ) { dataSource.setNeedTotalCount( metadata[ 'NeedTotalCount' ] ); }

        if( 'PageSize' in metadata ) { dataSource.setPageSize( metadata[ 'PageSize' ] ); }
        // PageNumber нужно устанавливать последним, потому что его могут обнулять другие свойства.
        if( 'PageNumber' in metadata ) { dataSource.setPageNumber( metadata[ 'PageNumber' ] ); }
    },

    /**
     *
     * @param parent
     * @returns {DocumentDataSource}
     */
    createDataSource: function( parent ) {
        return new DocumentDataSource( {
            view: parent
        } );
    }

} );

InfinniUI.DocumentDataSourceBuilder = DocumentDataSourceBuilder;

//####app/data/dataSource/objectDataSource.js
/**
 * @augments BaseDataSource
 * @constructor
 */
var ObjectDataSource = BaseDataSource.extend( {

    /**
     *
     */
    initDataProvider: function() {
        var dataProvider = InfinniUI.providerRegister.build( 'ObjectDataSource' );
        this.set( 'dataProvider', dataProvider );
    },

    /**
     *
     */
    initialize: function() {
        BaseDataSource.prototype.initialize.apply( this, Array.prototype.slice.call( arguments ) );
        this.initHandlers();
    },

    /**
     *
     */
    initHandlers: function() {
        var model = this.get( 'model' );
        var updateFilter = _.bind( this.updateFilter, this );

        model.setProperty( 'filterParams', {} );
        model.onPropertyChanged( 'filter', updateFilter );
        model.onPropertyChanged( 'filterParams.*', updateFilter );
    },

    /**
     *
     */
    updateFilter: function() {
        var dataProvider = this.get( 'dataProvider' );
        var filterPattern = this.getFilter();
        var filterParams = this.getFilterParams();

        dataProvider.setFilter( filterPattern, filterParams );
    },

    // в отличии от _setItems должен установить элементы "насовсем", т.е. изменить в провайдере тоже
    /**
     *
     * @param items
     */
    setItems: function( items ) {
        this.get( 'dataProvider' ).setItems( items );
        this.updateItems();
    }

} );

InfinniUI.ObjectDataSource = ObjectDataSource;

//####app/elements/_base/element/element.js
/**
 *
 * @param parent
 * @param viewMode
 * @constructor
 */
var Element = function( parent, viewMode ) {
    this.parent = parent;
    this.control = this.createControl( viewMode );
    this.state = {
        Enabled: true
    };

    this.childElements = [];
};

Object.defineProperties( Element.prototype, {
    name: {
        get: function() {
            return this.getName();
        }
    }
} );

_.extend( Element.prototype, {

    /**
     *
     * @param viewMode
     */
    createControl: function( viewMode ) {
        throw new Error( 'Не перегружен абстрактный метод Element.createControl' );
    },

    /**
     *
     * @param parentElement
     */
    setParent: function( parentElement ) {
        this.parent = parentElement;
    },

    /**
     *
     * @return {*}
     */
    getParent: function() {
        return this.parent;
    },

    /**
     *
     * @return {undefined|*|Array}
     */
    getChildElements: function() {
        return this.childElements;
    },

    /**
     *
     * @param type
     * @return {*}
     */
    findAllChildrenByType: function( type ) {
        return this._findAllChildren( predicate, getChildElements );

        function predicate() {
            return this.constructor.name === type;
        }

        function getChildElements( element ) {
            return element.findAllChildrenByType( type );
        }
    },

    /**
     *
     * @param name
     * @return {*}
     */
    findAllChildrenByName: function( name ) {
        return this._findAllChildren( predicate, getChildElements );

        function predicate() {
            return this.getName() === name;
        }

        function getChildElements( element ) {
            return element.findAllChildrenByName( name );
        }

    },

    /**
     *
     * @param predicate
     * @param getChildElements
     * @return {Array}
     * @private
     */
    _findAllChildren: function( predicate, getChildElements ) {
        var elements = this.getChildElements();
        var items = [];

        if( Array.isArray( elements ) ) {
            elements.forEach( function( element ) {
                if( predicate.call( element ) ) {
                    items.push( element );
                }
                Array.prototype.push.apply( items, getChildElements( element ) );
            } );
        }

        return items;
    },

    /**
     *
     * @return {*|null}
     */
    getView: function() {
        if( !this.parentView ) {
            if( this.parent && this.parent.isView ) {
                this.parentView = this.parent;

            } else {
                if( this.parent && this.parent.getView ) {
                    this.parentView = this.parent.getView();
                } else {
                    this.parentView = null;
                }
            }
        }

        return this.parentView;
    },

    /**
     * @returns {*}
     */
    getName: function() {
        return this.control.get( 'name' );
    },

    /**
     *
     * @param name
     */
    setName: function( name ) {
        if( this.getName() ) {
            throw new Error( 'name already exists' );
        }

        if( typeof name === 'string' ) {
            this.control.set( 'name', name );
        }
    },

    /**
     *
     * @param name
     * @return {*}
     */
    getProperty: function( name ) {
        var getterMethodName = 'get' + this._upperFirstSymbol( name );

        if( typeof this[ getterMethodName ] === 'function' ) {
            return this[ getterMethodName ]();
        } else {
            throw new Error( 'expect that ' + getterMethodName + ' is getter function' );
        }
    },

    /**
     *
     * @param name
     * @param value
     */
    setProperty: function( name, value ) {
        var setterMethodName = 'set' + this._upperFirstSymbol( name );
        var getterMethodName;

        if( typeof this[ setterMethodName ] === 'function' ) {
            this[ setterMethodName ]( value );
        } else {
            if( this._isCollectionProperty( name ) ) {
                getterMethodName = 'get' + this._upperFirstSymbol( name );
                this[ getterMethodName ]().set( value );
            } else {
                throw new Error( 'expect that ' + setterMethodName + ' is setter function' );
            }
        }
    },

    /**
     *
     * @param propertyName
     * @return {boolean}
     * @private
     */
    _isCollectionProperty: function( propertyName ) {
        var getterMethodName = 'get' + this._upperFirstSymbol( propertyName );

        return ( typeof this[ getterMethodName ] === 'function' ) && this[ getterMethodName ]() instanceof Collection;
    },

    /**
     *
     * @param propertyName
     * @param handler
     */
    onPropertyChanged: function( propertyName, handler ) {
        var subscribingMethodName = 'on' + this._upperFirstSymbol( propertyName ) + 'Changed';

        if( typeof this[ subscribingMethodName ] === 'function' ) {
            this[ subscribingMethodName ]( handler );
        } else {
            this.control.on( 'change:' + propertyName, function( model, value ) {
                var parentView = this.getView(),
                    context = parentView ? parentView.getContext() : undefined,
                    args = {
                        property: propertyName,
                        oldValue: model.previous( propertyName ),
                        newValue: value
                    };
                handler( context, args );
            }.bind( this ) );
        }
    },

    /**
     * @returns {*}
     */
    getText: function() {
        return this.control.get( 'text' );
    },

    /**
     *
     * @param text
     */
    setText: function( text ) {
        if( typeof text !== 'undefined' ) {
            this.control.set( 'text', text );
        }
    },

    /**
     * @returns {*}
     */
    getEnabled: function() {
        return this.control.get( 'enabled' );
    },

    /**
     *
     * @param isEnabled
     */
    setEnabled: function( isEnabled ) {
        if( typeof isEnabled !== 'boolean' ) {
            return;
        }

        this.setState( 'Enabled', isEnabled );

        var parentEnabled = this.control.get( 'parentEnabled' );
        var old = this.control.get( 'enabled' );

        isEnabled = parentEnabled && isEnabled;

        if( isEnabled === old ) {
            return;
        }

        this.control.set( 'enabled', isEnabled );
        this.setParentEnabledOnChild( isEnabled );
    },

    /**
     *
     * @param value
     */
    setParentEnabledOnChild: function( value ) {
        var elements = this.getChildElements();

        if( _.isEmpty( elements ) === false ) {
            for( var i = 0, ln = elements.length; i < ln; i = i + 1 ) {
                if( typeof elements[ i ].setParentEnabled === 'undefined' ) {
                    continue;
                }
                elements[ i ].setParentEnabled( value );
            }
        }
    },

    /**
     *
     * @param value
     */
    setParentEnabled: function( value ) {
        if( typeof value !== 'boolean' ) {
            return;
        }

        var old = this.control.get( 'parentEnabled' );

        this.control.set( 'parentEnabled', value );

        if( old !== value ) {
            var enabled = value && this.getState( 'Enabled' );
            this.control.set( 'enabled', enabled );
            this.setParentEnabled( enabled );
            this.setParentEnabledOnChild( enabled );
        }
    },

    /**
     * @returns {*}
     */
    getVisible: function() {
        return this.control.get( 'visible' );
    },

    /**
     *
     * @param isVisible
     */
    setVisible: function( isVisible ) {
        if( typeof isVisible == 'boolean' ) {
            this.control.set( 'visible', isVisible );
        }
    },

    /**
     * @returns {*}
     */
    getStyle: function() {
        return this.control.get( 'style' );
    },

    /**
     *
     * @param style
     */
    setStyle: function( style ) {
        if( typeof style === 'string' ) {
            this.control.set( 'style', style );
        }
    },

    /**
     * @returns {*}
     */
    getTextHorizontalAlignment: function() {
        return this.control.get( 'textHorizontalAlignment' );
    },

    /**
     *
     * @param value
     */
    setTextHorizontalAlignment: function( value ) {
        if( InfinniUI.Metadata.isValidValue( value, InfinniUI.TextHorizontalAlignment ) ) {
            this.control.set( 'textHorizontalAlignment', value );
        }
    },

    /**
     * @returns {*}
     */
    getHorizontalAlignment: function() {
        return this.control.get( 'horizontalAlignment' );
    },

    /**
     *
     * @param horizontalAlignment
     */
    setHorizontalAlignment: function( horizontalAlignment ) {
        if( typeof horizontalAlignment === 'string' ) {
            this.control.set( 'horizontalAlignment', horizontalAlignment );
        }
    },

    /**
     * @returns {*}
     */
    getTextStyle: function() {
        return this.control.get( 'textStyle' );
    },

    /**
     *
     * @param textStyle
     */
    setTextStyle: function( textStyle ) {
        if( typeof textStyle === 'string' ) {
            this.control.set( 'textStyle', textStyle );
        }
    },

    /**
     * @returns {*}
     */
    getBackground: function() {
        return this.control.get( 'background' );
    },

    /**
     *
     * @param background
     */
    setBackground: function( background ) {
        if( typeof background === 'string' ) {
            this.control.set( 'background', background );
        }
    },

    /**
     * @returns {*}
     */
    getForeground: function() {
        return this.control.get( 'foreground' );
    },

    /**
     *
     * @param foreground
     */
    setForeground: function( foreground ) {
        if( typeof foreground === 'string' ) {
            this.control.set( 'foreground', foreground );
        }
    },

    /**
     *
     * @param handler
     */
    onLoaded: function( handler ) {
        this.control.onLoaded( handler );
    },

    /**
     *
     * @returns {*}
     */
    isLoaded: function() {
        return this.control.isLoaded();
    },

    /**
     * @returns {*}
     */
    getFocusable: function() {
        return this.control.get( 'focusable' );
    },

    /**
     *
     * @param value
     */
    setFocusable: function( value ) {
        if( typeof value === 'boolean' ) {
            this.control.set( 'focusable', value );
        }
    },

    /**
     * @returns {*}
     */
    getFocused: function() {
        return this.control.get( 'focused' );
    },

    /**
     *
     * @param value
     * @returns {*}
     */
    setFocused: function( value ) {
        //Установка фокуса вручную
        return this.control.setFocus();
    },

    /**
     *
     * @param handler
     */
    onLostFocus: function( handler ) {
        this.control.on( 'OnLostFocus', handler );
    },

    /**
     *
     * @param handler
     */
    onGotFocus: function( handler ) {
        this.control.on( 'OnGotFocus', handler );
    },

    /**
     *
     * @param value
     */
    setToolTip: function( value ) {
        this.control.set( 'toolTip', value );
    },

    /**
     * @returns {*}
     */
    getToolTip: function() {
        return this.control.get( 'toolTip' );
    },

    /**
     *
     * @param items
     */
    setContextMenu: function( items ) {
        this.control.set( 'contextMenu', items );
    },

    /**
     * @returns {*}
     * @param items
     */
    getContextMenu: function( items ) {
        return this.control.get( 'contextMenu' );
    },

    /**
     * @returns {*}
     */
    getIsLoaded: function() {
        return this.control.get( 'isLoaded' );
    },

    /**
     *
     */
    setIsLoaded: function() {
        this.control.set( 'isLoaded', true );
    },

    /**
     *
     * @param value
     */
    setTag: function( value ) {
        this.control.set( 'tag', value );
    },

    /**
     * @returns {*}
     */
    getTag: function() {
        return this.control.get( 'tag' );
    },

    /**
     * @returns {*}
     */

    render: function() {
        return this.control.render();
    },

    /**
     *
     */
    getWidth: function() {
    },

    /**
     *
     */
    getHeight: function() {
    },

    /**
     * @returns {*}
     */
    getScriptsStorage: function() {
        return this.getView();
    },

    /**
     * Установка состояния валидации элеменат
     * @param {String} [state="success"]
     * @param {String} [message]
     */
    setValidationState: function( state, message ) {
        this.control.set( 'validationMessage', message );
        this.control.set( 'validationState', state );
    },

    /**
     * Получение состояния валидации элеменат
     * @return {String} [state="success"]
     */
    getValidationState: function() {
        return this.control.get( 'validationState' );
    },

    /**
     *
     * @param name
     * @returns {*}
     */
    getState: function( name ) {
        return this.state[ name ];
    },

    /**
     *
     * @param name
     * @param value
     */
    setState: function( name, value ) {
        this.state[ name ] = value;
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onBeforeClick: function( handler ) {
        return this.control.onBeforeClick( handler );
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onKeyDown: function( handler ) {
        var that = this;
        var callback = function( nativeEventData ) {
            var eventData = that._getHandlingKeyEventData( nativeEventData );
            handler( eventData );
        };

        return this.control.onKeyDown( callback );
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onKeyUp: function( handler ) {
        var that = this;
        var callback = function( nativeEventData ) {
            var eventData = that._getHandlingKeyEventData( nativeEventData );
            handler( eventData );
        };

        return this.control.onKeyUp( callback );
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onClick: function( handler ) {
        var that = this;
        var callback = function( nativeEventData ) {
            var eventData = that._getHandlingMouseEventData( nativeEventData );
            handler( eventData );
        };

        return this.control.onClick( callback );
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onDoubleClick: function( handler ) {
        var that = this;
        var callback = function( nativeEventData ) {
            var eventData = that._getHandlingMouseEventData( nativeEventData );
            handler( eventData );
        };

        return this.control.onDoubleClick( callback );
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onMouseDown: function( handler ) {
        var that = this;
        var callback = function( nativeEventData ) {
            var eventData = that._getHandlingMouseEventData( nativeEventData );
            handler( eventData );
        };

        return this.control.onMouseDown( callback );
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onMouseUp: function( handler ) {
        var that = this;
        var callback = function( nativeEventData ) {
            var eventData = that._getHandlingMouseEventData( nativeEventData );
            handler( eventData );
        };

        return this.control.onMouseUp( callback );
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onMouseEnter: function( handler ) {
        var that = this;
        var callback = function( nativeEventData ) {
            var eventData = that._getHandlingMouseEventData( nativeEventData );
            handler( eventData );
        };

        return this.control.onMouseEnter( callback );
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onMouseLeave: function( handler ) {
        var that = this;
        var callback = function( nativeEventData ) {
            var eventData = that._getHandlingMouseEventData( nativeEventData );
            handler( eventData );
        };

        return this.control.onMouseLeave( callback );
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onMouseMove: function( handler ) {
        var that = this;
        var callback = function( nativeEventData ) {
            var eventData = that._getHandlingMouseEventData( nativeEventData );
            handler( eventData );
        };

        return this.control.onMouseMove( callback );
    },

    /**
     *
     * @param handler
     * @returns {*}
     */
    onMouseWheel: function( handler ) {
        var that = this;
        var callback = function( nativeEventData ) {
            var eventData = that._getHandlingMouseEventData( nativeEventData );
            handler( eventData );
        };

        return this.control.onMouseWheel( callback );
    },

    /**
     *
     * @param handler
     * @returns {*|CollectionEventManager|{name}}
     */
    onRemove: function( handler ) {
        return this.control.onRemove( this.createControlEventHandler( this, handler ) );
    },

    /**
     *
     * @param isInitiatedByParent
     * @param parent
     */
    remove: function( isInitiatedByParent, parent ) {
        var logger = InfinniUI.global.logger;
        if( this.isRemoved ) {
            logger.warn( 'Element.remove: Попытка удалить элемент, который уже был удален' );
            return;
        }

        var children = this.childElements;

        for( var i = 0, ii = children.length; i < ii; i++ ) {
            children[ i ].remove( true, this );
        }

        this.control.remove();

        if( this.parent && this.parent.removeChild && !isInitiatedByParent ) {
            if( this.parent.isRemoved ) {
                logger.warn( 'Element.remove: Попытка удалить элемент из родителя, который помечен как удаленный' );
            } else {
                this.parent.removeChild( this );
            }
        }

        if( parent && this.parent && this.parent.removeChild && isInitiatedByParent && parent !== this.parent ) {
            this.parent.removeChild( this );
        }

        this.isRemoved = true;

        this.childElements = undefined;
    },

    /**
     *
     * @param child
     */
    removeChild: function( child ) {
        var index = this.childElements.indexOf( child );

        if( index !== -1 ) {
            this.childElements.splice( index, 1 );
        }
    },

    /**
     *
     * @param child
     */
    addChild: function( child ) {
        if( !this.isRemoved ) {
            this.childElements.push( child );

        } else {
            var logger = InfinniUI.global.logger;
            logger.warn( 'Element.addChild: Попытка добавить потомка в удаленный элемент' );
        }

    },

    /**
     *
     * @param element
     * @param handler
     * @param additionParams
     * @returns {Function}
     */
    createControlEventHandler: function( element, handler, additionParams ) {
        var context;
        var parentView = element.getView();
        additionParams = additionParams || {};

        if( parentView ) {
            context = parentView.context;
        }

        return function( message ) {
            message = message || {};
            _.extend(
                message,
                additionParams
            );
            message.source = element;

            return handler.call( undefined, context, message );
        };
    },

    /**
     *
     * @param nativeData
     * @returns {{source: Element, key: (jQuery.which|*|Object), altKey: (*|boolean), ctrlKey: (*|boolean), shiftKey: (*|boolean), nativeEventData: *}}
     * @private
     */
    _getHandlingKeyEventData: function( nativeData ) {
        return {
            source: this,
            key: nativeData.which,
            altKey: nativeData.altKey,
            ctrlKey: nativeData.ctrlKey,
            shiftKey: nativeData.shiftKey,
            nativeEventData: nativeData
        };
    },

    /**
     *
     * @param nativeData
     * @returns {{source: Element, button: (jQuery.which|*|Object), altKey: (*|boolean), ctrlKey: (*|boolean), shiftKey: (*|boolean), nativeEventData: *}}
     * @private
     */
    _getHandlingMouseEventData: function( nativeData ) {
        return {
            source: this,
            button: nativeData.which,
            altKey: nativeData.altKey,
            ctrlKey: nativeData.ctrlKey,
            shiftKey: nativeData.shiftKey,
            nativeEventData: nativeData
        };
    },

    /**
     *
     * @param s
     * @returns {string}
     * @private
     */
    _upperFirstSymbol: function( s ) {
        return s[ 0 ].toUpperCase() + s.substr( 1 );
    },

    /**
     *
     */
    setFocus: function() {
        this.control.setFocus();
    },

    /**
     *
     * @param textIndentOld
     */
    renderTree: function( textIndentOld ) {
        var textIndent = textIndentOld || '';

        console.log( textIndent + 'Name: ' + this.getName(), this );
        if( typeof this.childElements !== 'undefined' ) {
            if( textIndent !== '' ) {
                textIndent += '_____';
            } else {
                textIndent += '_____';
            }
            for( var i = 0, ii = this.childElements.length; i < ii; i += 1 ) {
                this.renderTree.call( this.childElements[ i ], textIndent );
            }
        }
    },

    /**
     *
     */
    renderFullTree: function() {
        var parent = this.parent;

        while( parent.parent && typeof parent.parent.parent !== 'undefined' ) {
            parent = parent.parent;
        }
        this.renderTree.call( parent );
    }

} );

InfinniUI.Element = Element;

//####app/elements/_base/element/elementBuilder.js
/**
 *
 * @constructor
 */
var ElementBuilder = function() {
};

_.extend( ElementBuilder.prototype, {

    /**
     *
     * @param context
     * @param args
     * @returns {*}
     */
    build: function( context, args ) {
        args = args || {};
        var element = this.createElement( args );
        var params = _.extend( args, { element: element } );

        this.applyMetadata( params );

        if( args.parentView && args.parentView.registerElement ) {
            args.parentView.registerElement( element );
        }

        if( args.parent && args.parent.addChild ) {
            args.parent.addChild( element );
        }

        return element;
    },

    /**
     *
     * @param {Object} params
     * @param {Builder} params.builder
     * @param {View} params.parent
     * @param {Object} params.metadata
     * @param {*} params.collectionProperty
     */
    createElement: function( params ) {
        throw new Error( 'Не перегружен абстрактный метод ElementBuilder.createElement()' );
    },

    /**
     *
     * @param {Object} params
     * @param {Builder} params.builder
     * @param {View} params.parent
     * @param {Object} params.metadata
     * @param {*} params.collectionProperty
     * @param {Element} params.element
     */
    applyMetadata: function( params ) {
        var metadata = params.metadata;
        var element = params.element;

        this.initBindingToProperty( params, 'Text' );
        this.resolveExpressionInText( params, 'Text' );
        this.initBindingToProperty( params, 'Visible', true );
        this.initBindingToProperty( params, 'Enabled', true );
        this.initBindingToProperty( params, 'HorizontalAlignment' );
        this.initBindingToProperty( params, 'TextHorizontalAlignment' );
        this.initBindingToProperty( params, 'TextStyle' );
        this.initBindingToProperty( params, 'Foreground' );
        this.initBindingToProperty( params, 'Background' );
        this.initBindingToProperty( params, 'Style' );
        this.initBindingToProperty( params, 'Tag' );
        this.initBindingToProperty( params, 'Focusable', true );

        if( metadata.ToolTip ) {
            this.initToolTip( params );
        }
        if( metadata.ContextMenu ) {
            this.initContextMenu( params );
        }

        if( 'Name' in metadata ) {
            element.setName( metadata.Name );
        }

        var executorBuilderParams = {
            parentView: params.parentView,
            parent: element,
            basePathOfProperty: params.basePathOfProperty
        };

        if( metadata.OnLoaded ) {
            var onLoadedExecutor = Executor( metadata.OnLoaded, params.builder, executorBuilderParams );
            element.onLoaded( onLoadedExecutor.bind( null, { source: element } ) );
        }

        if( metadata.OnGotFocus ) {
            var onGotFocusExecutor = Executor( metadata.OnGotFocus, params.builder, executorBuilderParams );
            element.onGotFocus( onGotFocusExecutor.bind( null, { source: element } ) );
        }

        if( metadata.OnLostFocus ) {
            var onLostFocusExecutor = Executor( metadata.OnLostFocus, params.builder, executorBuilderParams );
            element.onLostFocus( onLostFocusExecutor.bind( null, { source: element } ) );
        }

        if( metadata.OnDoubleClick ) {
            var onDoubleClickExecutor = Executor( metadata.OnDoubleClick, params.builder, executorBuilderParams );
            element.onDoubleClick( onDoubleClickExecutor );
        }

        if( metadata.OnClick ) {
            var onClickExecutor = Executor( metadata.OnClick, params.builder, executorBuilderParams );
            element.onClick( onClickExecutor );
        }

        if( metadata.OnMouseEnter ) {
            var onMouseEnterExecutor = Executor( metadata.OnMouseEnter, params.builder, executorBuilderParams );
            element.onMouseEnter( onMouseEnterExecutor );
        }

        if( metadata.OnMouseLeave ) {
            var onMouseLeaveExecutor = Executor( metadata.OnMouseLeave, params.builder, executorBuilderParams );
            element.onMouseLeave( onMouseLeaveExecutor );
        }

        if( metadata.OnMouseMove ) {
            var onMouseMoveExecutor = Executor( metadata.OnMouseMove, params.builder, executorBuilderParams );
            element.onMouseMove( onMouseMoveExecutor );
        }

        if( metadata.OnKeyDown ) {
            var onKeyDownExecutor = Executor( metadata.OnKeyDown, params.builder, executorBuilderParams );
            element.onKeyDown( onKeyDownExecutor );
        }

        if( metadata.OnKeyUp ) {
            var onKeyUpExecutor = Executor( metadata.OnKeyUp, params.builder, executorBuilderParams );
            element.onKeyUp( onKeyUpExecutor );
        }

        if( metadata.OnMouseDown ) {
            var onMouseDownExecutor = Executor( metadata.OnMouseDown, params.builder, executorBuilderParams );
            element.onMouseDown( onMouseDownExecutor );
        }

        if( metadata.OnMouseUp ) {
            var onMouseUpExecutor = Executor( metadata.OnMouseUp, params.builder, executorBuilderParams );
            element.onMouseUp( onMouseUpExecutor );
        }

        if( metadata.OnMouseWheel ) {
            var onMouseWheelExecutor = Executor( metadata.OnMouseWheel, params.builder, executorBuilderParams );
            element.onMouseWheel( onMouseWheelExecutor );
        }
    },

    /**
     *
     * @param params
     * @param propertyName
     * @param isBooleanBinding
     * @returns {*}
     */
    initBindingToProperty: function( params, propertyName, isBooleanBinding ) {
        var metadata = params.metadata;
        var propertyMetadata = metadata[ propertyName ];
        var element = params.element;
        var lowerCasePropertyName = this.lowerFirstSymbol( propertyName );
        var converter;

        if( !propertyMetadata || typeof propertyMetadata != 'object' ) {
            if( typeof propertyMetadata !== 'undefined' ) {
                params.element[ 'set' + propertyName ]( propertyMetadata );
            }
            return null;
        } else {
            var args = {
                parent: params.parent,
                parentView: params.parentView,
                basePathOfProperty: params.basePathOfProperty
            };
            var dataBinding = params.builder.buildBinding( metadata[ propertyName ], args );
            var oldConverter;

            if( isBooleanBinding ) {
                dataBinding.setMode( InfinniUI.BindingModes.toElement );

                converter = dataBinding.getConverter();
                if( !converter ) {
                    converter = {};
                }

                if( !converter.toElement ) {
                    converter.toElement = function( context, args ) {
                        return !!args.value;
                    };
                } else {
                    oldConverter = converter.toElement;

                    converter.toElement = function( context, args ) {
                        var tmp = oldConverter( context, args );
                        return !!tmp;
                    };
                }

                dataBinding.setConverter( converter );
            }

            dataBinding.bindElement( element, lowerCasePropertyName );

            return dataBinding;
        }
    },

    /**
     *
     * @param params
     * @param propertyName
     */
    resolveExpressionInText: function( params, propertyName ) {
        var valueToResolve = params.metadata[ propertyName ];

        if( valueToResolve &&
            typeof valueToResolve === 'string' &&
            valueToResolve.slice( 0, 2 ) === '{=' &&
            valueToResolve.slice( -1 ) === '}' ) {

            var args = {
                parent: params.parent,
                parentView: params.parentView,
                basePathOfProperty: params.basePathOfProperty
            };
            var expression = '{return ' + valueToResolve.slice( 2, -1 ) + ';}';
            var newValue = new ScriptExecutor( params.element.getScriptsStorage() ).executeScript( expression, args );

            if( typeof newValue !== 'undefined' ) {
                params.element[ 'set' + propertyName ]( newValue );
            }
        }
    },

    /**
     *
     * @param params
     */
    initToolTip: function( params ) {
        var builder = params.builder;
        var element = params.element;
        var metadata = params.metadata;
        var tooltipBuilderParams = {
            basePathOfProperty: params.basePathOfProperty,
            parent: element,
            parentView: params.parentView
        };

        element.setToolTip( builder.buildType( 'ToolTip', metadata[ 'ToolTip' ], tooltipBuilderParams ) );
    },

    /**
     *
     * @param params
     */
    initContextMenu: function( params ) {
        var exchange = InfinniUI.global.messageBus;
        var builder = params.builder;
        var element = params.element;
        var metadata = params.metadata;
        var contextMenu;
        var argumentForBuilder = {
            parent: element,
            parentView: params.parentView,
            basePathOfProperty: params.basePathOfProperty
        };

        contextMenu = builder.buildType( 'ContextMenu', {
            'Items': metadata.ContextMenu.Items
        }, argumentForBuilder );

        element.setContextMenu( contextMenu );
        exchange.send( messageTypes.onContextMenu.name, { source: element, content: contextMenu.render() } );
    },

    /**
     *
     * @param s
     * @returns {string}
     */
    lowerFirstSymbol: function( s ) {
        return s[ 0 ].toLowerCase() + s.substr( 1 );
    }

} );

InfinniUI.ElementBuilder = ElementBuilder;

//####app/elements/_base/_mixins/builderValuePropertyMixin.js
/**
 *
 * @mixin
 */
var builderValuePropertyMixin = {

    /**
     * @param {Object} params
     * @param {Boolean|false} useValidation Использовать валидацию
     * @returns {*}
     */
    initValueProperty: function( params, useValidation ) {
        var metadata = params.metadata;

        if( typeof useValidation === 'undefined' ) {
            useValidation = false;
        }

        if( metadata.Value !== undefined ) {
            var dataBinding = params.builder.build( params.view, metadata.Value, params.collectionProperty );

            dataBinding.setElement( params.element );

            if( dataBinding !== null ) {
                dataBinding.onPropertyValueChanged( function( dataSourceName, value ) {
                    params.element.setValue( dataBinding.getPropertyValue() );
                } );

                var data = dataBinding.getPropertyValue();
                if( data !== null && typeof data !== 'undefined' ) {
                    params.element.setValue( data );
                }

                params.element.onValueChanged( function( dataSourceName, value ) {
                    dataBinding.setPropertyValue( value );
                } );
            }


            if( useValidation && dataBinding ) {
                params.element.onLostFocus( function() {
                    dataBinding.validate();
                } );
            }

            return dataBinding;
        }
    }

};

InfinniUI.builderValuePropertyMixin = builderValuePropertyMixin;

//####app/elements/_base/_mixins/buttonBuilderMixin.js
/**
 *
 * @mixin
 */
var buttonBuilderMixin = {

    /**
     *
     * @param params
     */
    applyButtonMetadata: function( params ) {
        var element = params.element;
        var metadata = params.metadata;
        var builder = params.builder;

        this.initTemplatingContent( params );

        if ( metadata.Action ) {
            var executorBuilderParams = {
                parentView: params.parentView,
                parent: element,
                basePathOfProperty: params.basePathOfProperty
            };
            var onClickExecutor = Executor( metadata.Action, builder, executorBuilderParams );
            element.onClick( onClickExecutor );
        }
    },

    /**
     *
     * @param params
     */
    initTemplatingContent: function( params ) {
        var element = params.element;
        var metadata = params.metadata;
        var builder = params.builder;
        var contentTemplate, contentBinding;

        if( 'ContentTemplate' in metadata ) {
            contentTemplate = this.buildContentTemplate( metadata[ 'ContentTemplate' ], params );
            element.setContentTemplate( contentTemplate );
        }

        if( 'Content' in metadata ) {
            contentBinding = builder.buildBinding( metadata[ 'Content' ], {
                parentView: params.parentView,
                basePathOfProperty: params.basePathOfProperty
            } );

            contentBinding.bindElement( element, 'content' );
        }
    },

    /**
     *
     * @param templateMetadata
     * @param params
     * @returns {Function}
     */
    buildContentTemplate: function( templateMetadata, params ) {
        var element = params.element;
        var builder = params.builder;
        var basePathOfProperty = params.basePathOfProperty;

        return function( context, args ) {
            var argumentForBuilder = {
                parent: params.element,
                parentView: params.parentView,
                basePathOfProperty: basePathOfProperty
            };

            return builder.build( templateMetadata, argumentForBuilder );
        };
    }
};

InfinniUI.buttonBuilderMixin = buttonBuilderMixin;

//####app/elements/_base/_mixins/buttonMixin.js
/**
 *
 * @mixin
 */
var buttonMixin = {

    /**
     *
     */
    buttonInit: function() {
        this.isFirstAction = true;
    },

    /**
     * @returns {*}
     */
    getContent: function() {
        return this.control.get( 'content' );
    },

    /**
     *
     * @param value
     */
    setContent: function( value ) {
        this.control.set( 'content', value );
    },

    /**
     * @returns {*}
     */
    getContentTemplate: function() {
        return this.control.get( 'contentTemplate' );
    },

    /**
     *
     * @param value
     */
    setContentTemplate: function( value ) {
        this.control.set( 'contentTemplate', value );
    },

    /**
     *
     * @param value
     */
    setAction: function( value ) {
        var control = this.control;

        control.set( 'action', value );

        if ( this.isFirstAction ) {
            this.isFirstAction = false;

            this.onClick( function() {
                var action = control.get( 'action' );

                if ( action ) {
                    action.execute();
                }
            } );
        }
    },

    /**
     * @returns {*}
     */
    getAction: function() {
        return this.control.get( 'action' );
    },

    /**
     *
     */
    click: function() {
        this.control.click();
    },

    /**
     *
     * @param handler
     */
    onClick: function( handler ) {
        var that = this;

        Element.prototype.onClick.call( this, onClickHandlerWrap );

        function onClickHandlerWrap( args ) {
            var enabled = that.getEnabled();

            if( enabled ) {
                handler( args );
            }
        }
    }

};

InfinniUI.buttonMixin = buttonMixin;

//####app/elements/_base/_mixins/displayFormatBuilderMixin.js
/**
 * @mixin
 */
var displayFormatBuilderMixin = {
    /**
     * Возвращает функцию форматирования значения
     * @see {@link http://docs.infinnity.ru/docs/Specifications/UserInterface/Components/TextEditorBase/TextEditorBase.setDisplayFormat/}
     * @param {String} displayFormat
     * @param {Object} params
     * @param {ApplicationBuilder} params.builder
     * @returns {Function}
     */
    buildDisplayFormat: function( displayFormat, params ) {
        var formatOptions = params.formatOptions;
        var builder = params.builder;
        var formatter, format = defaultFormat;

        if ( typeof displayFormat === 'string' ) {
            formatter = builder.buildType( 'ObjectFormat', { Format: displayFormat } );
            format = function( context, args ) {
                args = args || {};
                return formatter.format( args.value );
            };
        } else if ( displayFormat && typeof displayFormat === 'object' ) {
            formatter = builder.build( displayFormat );

            format = function( context, args ) {
                args = args || {};
                return formatter.format( args.value );
            };
        }

        if ( formatter ) {
            formatter.setOptions( formatOptions );
        }

        return format;

        function defaultFormat( context, args ) {
            args = args || {};
            return args.value;
        }
    }
};

InfinniUI.displayFormatBuilderMixin = displayFormatBuilderMixin;

//####app/elements/_base/_mixins/labelTextElementMixin.js
/**
 *
 * @mixin
 */
var labelTextElementMixin = {

    /**
     * @returns {*}
     */
    getLabelText: function() {
        return this.control.get( 'labelText' );
    },

    /**
     *
     * @param value
     */
    setLabelText: function( value ) {
        this.control.set( 'labelText', value );
    },

    /**
     * @returns {boolean | null}
     */
    getLabelTextTitle: function() {
        return this.control.get( 'labelTextTitle' );
    },

    /**
     *
     * @param {boolean} value
     */
    setLabelTextTitle: function( value ) {
        this.control.set( 'labelTextTitle', value );
    }

};

InfinniUI.labelTextElementMixin = labelTextElementMixin;

//####app/elements/_base/_mixins/routerServiceMixin.js
/**
 *
 * @mixin
 */
var routerServiceMixin = {

    /**
     *
     * @param oldHref
     * @param param
     * @param newValue
     * @param hrefPattern
     * @returns {*}
     */
    replaceParamsInHref: function( oldHref, param, newValue, hrefPattern ) {
        if( hrefPattern ) {
            var newHref = hrefPattern.split( '?' )[ 0 ];
            var query = hrefPattern.split( '?' )[ 1 ];
            var tmpArr = newHref.split( '/' );
            var index = tmpArr.indexOf( ':' + param );

            if( index === -1 ) {
                throw new Error( 'Different param names in metadata and InfinniUI.config.routes' );
            }
            tmpArr = oldHref.split( '/' );
            tmpArr[ index ] = newValue;
            tmpArr = tmpArr.join( '/' );
            if( query ) {
                tmpArr += '?' + query;
            }
            return tmpArr;
        } else {
            return oldHref.replace( ':' + param, newValue );
        }
    },

    /**
     *
     * @param oldHref
     * @param queryParam
     * @param newValue
     * @param queryPattern
     * @returns {*}
     */
    replaceParamsInQuery: function( oldHref, queryParam, newValue, queryPattern ) {
        if( queryPattern ) {
            var newHref = oldHref.split( '?' )[ 0 ];
            var query = oldHref.split( '?' )[ 1 ];
            var queryTmp = queryPattern.split( '?' )[ 1 ];
            var tmpArr = queryTmp.split( '&' );
            var index = -1;

            for( var i = 0, ii = tmpArr.length; i < ii; i += 1 ) {
                if( tmpArr[ i ].indexOf( ':' + queryParam ) !== -1 ) {
                    index = i;
                }
            }

            if( index === -1 ) {
                throw new Error( 'Different query names in metadata and InfinniUI.config.routes' );
            }
            tmpArr = query.split( '&' );
            var tmpValue = tmpArr[ index ].split( '=' );
            tmpValue[ 1 ] = newValue;
            tmpArr[ index ] = tmpValue.join( '=' );
            var finalString = newHref + '?' + tmpArr.join( '&' );
            return finalString;
        } else {
            return oldHref.replace( ':' + queryParam, newValue );
        }
    },

    /**
     *
     * @param params
     * @param paramName
     * @param paramValue
     * @param hrefPattern
     */
    bindParams: function( params, paramName, paramValue, hrefPattern ) {
        var element = params.element;
        var builder = params.builder;
        var that = this;
        var args = {
            parent: params.parent,
            parentView: params.parentView,
            basePathOfProperty: params.basePathOfProperty
        };
        var dataBinding = builder.buildBinding( paramValue, args );

        dataBinding.bindElement( {
            onPropertyChanged: function() {
            },
            setProperty: function( elementProperty, newValue ) {
                var oldHref = element.getHref();
                var newHref = that.replaceParamsInHref( oldHref, paramName, newValue, hrefPattern );
                element.setHref( newHref );
            },
            getProperty: function() {
            }
        }, '' );
    },

    /**
     *
     * @param params
     * @param queryName
     * @param queryValue
     * @param queryPattern
     */
    bindQuery: function( params, queryName, queryValue, queryPattern ) {
        var element = params.element;
        var builder = params.builder;
        var that = this;
        var args = {
            parent: params.parent,
            parentView: params.parentView,
            basePathOfProperty: params.basePathOfProperty
        };
        var dataBinding = builder.buildBinding( queryValue, args );

        dataBinding.bindElement( {
            onPropertyChanged: function() {
            },
            setProperty: function( elementProperty, newValue ) {
                var oldHref = element.getHref();
                var newHref = that.replaceParamsInQuery( oldHref, queryName, newValue, queryPattern );
                element.setHref( newHref );
            },
            getProperty: function() {
            }
        }, '' );
    }

};

InfinniUI.routerServiceMixin = routerServiceMixin;

//####app/elements/_base/_mixins/valuePropertyMixin.js
/**
 *
 * @mixin
 */
var valuePropertyMixin = {

    /**
     * @returns {*}
     */
    getValue: function() {
        return this.control.get( 'value' );
    },

    /**
     *
     * @param value
     * @returns {*}
     */
    setValue: function( value ) {
        return this.control.set( 'value', value );
    },

    /**
     *
     * @param handler
     */
    onValueChanged: function( handler ) {
        this.control.onValueChanged( handler );
    }

};

InfinniUI.valuePropertyMixin = valuePropertyMixin;

//####app/elements/_base/_mixins/veiwBuilderHeaderTemplateMixin.js
/**
 *
 * @mixin
 */
var viewBuilderHeaderTemplateMixin = {

    /**
     * @protected
     * @param view
     * @param params
     * @returns {*}
     */
    buildHeaderTemplate: function( view, params ) {
        var builder = params.builder;
        var metadata = params.metadata;
        var headerTemplate;

        if( metadata.HeaderTemplate ) {
            //@TODO Build header template by metadata
            headerTemplate = function( context, args ) {
                var paramsForBuilder = {
                    parent: view,
                    parentView: view,
                    basePathOfProperty: params.basePathOfProperty
                };

                return builder.build( metadata.HeaderTemplate, paramsForBuilder );
            };
        } else {
            //@TODO Build header template by default
            headerTemplate = function( context, args ) {
                var label = new Label();

                label.setValue( view.getText() );
                view.onPropertyChanged( 'text', function( context, args ) {
                    label.setValue( args.newValue );
                } );

                return label;
            };
        }
        return headerTemplate;
    }

};

InfinniUI.viewBuilderHeaderTemplateMixin = viewBuilderHeaderTemplateMixin;

//####app/elements/_base/container/container.js
/**
 * @param parent
 * @param viewMode
 * @constructor
 * @augments Element
 */
function Container( parent, viewMode ) {
    _.superClass( Container, this, parent, viewMode );
}

InfinniUI.Container = Container;

_.inherit( Container, Element );

/**
 * @returns {*}
 */
Container.prototype.getItemTemplate = function() {
    return this.control.get( 'itemTemplate' );
};

/**
 *
 * @param itemTemplate
 */
Container.prototype.setItemTemplate = function( itemTemplate ) {
    if ( typeof itemTemplate !== 'function' ) {
        throw new Error( 'Function expected' );
    }
    this.control.set( 'itemTemplate', itemTemplate );
};

/**
 * @returns {*}
 */
Container.prototype.getItems = function() {
    return this.control.get( 'items' );
};

/**
 * @returns {*}
 */
Container.prototype.getGroupValueSelector = function() {
    return this.control.get( 'groupValueSelector' );
};

/**
 *
 * @param value
 */
Container.prototype.setGroupValueSelector = function( value ) {
    this.control.set( 'groupValueSelector', value );
};

/**
 * @returns {*}
 */
Container.prototype.getGroupItemTemplate = function() {
    return this.control.get( 'groupItemTemplate' );
};

/**
 *
 * @param value
 */
Container.prototype.setGroupItemTemplate = function( value ) {
    this.control.set( 'groupItemTemplate', value );
};

/**
 * @returns {*}
 */
Container.prototype.getGroupItemComparator = function() {
    return this.control.get( 'groupItemComparator' );
};

/**
 *
 * @param value
 */
Container.prototype.setGroupItemComparator = function( value ) {
    this.control.set( 'groupItemComparator', value );
};

//####app/elements/_base/container/containerBuilder.js
/**
 * @augments ElementBuilder
 * @constructor
 * @mixes displayFormatBuilderMixin
 */
function ContainerBuilder() {
    _.superClass( ContainerBuilder, this );
}

InfinniUI.ContainerBuilder = ContainerBuilder;

_.inherit( ContainerBuilder, ElementBuilder );

/**
 * @abstract
 */
_.extend( ContainerBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {{itemsBinding: {DataBinding}}}
     */
    applyMetadata: function( params ) {
        var itemsBinding;

        ElementBuilder.prototype.applyMetadata.call( this, params );

        itemsBinding = this.initItems( params );
        this.initGroup( params, itemsBinding );

        return {
            itemsBinding: itemsBinding
        };
    },

    /**
     *
     * @param params
     * @returns {*}
     */
    initItems: function( params ) {
        var metadata = params.metadata;
        var itemsBinding = null;

        if( Array.isArray( metadata.Items ) ) {
            // отдельные не шаблонизируемые items, в metadata.Items - список методанных item'ов
            this.initNotTemplatingItems( params );
        } else if( metadata.Items ) {
            // шаблонизируемые однотипные items, в metadata.Items - биндинг на данные item'ов
            itemsBinding = this.initTemplatingItems( params );
        }

        return itemsBinding;
    },

    /**
     *
     * @param params
     * @returns {*|null}
     */
    initTemplatingItems: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var itemTemplate;
        var binding;
        var property;

        binding = params.builder.buildBinding( metadata.Items, {
            parentView: params.parentView,
            basePathOfProperty: params.basePathOfProperty
        } );

        binding.setMode( InfinniUI.BindingModes.toElement );

        this.bindElementItemsWithSorting( binding, params );

        if( 'ItemTemplate' in metadata ) {
            itemTemplate = this.buildItemTemplate( metadata.ItemTemplate, params );
        } else if( 'ItemFormat' in metadata ) {
            itemTemplate = this.buildItemFormat( binding, metadata.ItemFormat, params );
        } else if( 'ItemSelector' in metadata ) {
            itemTemplate = this.buildItemSelector( binding, metadata.ItemSelector, params );
        } else {
            if( 'ItemProperty' in metadata ) {
                property = metadata.ItemProperty;
            } else {
                property = '';
            }
            itemTemplate = this.buildItemProperty( binding, property, params );
        }

        element.setItemTemplate( itemTemplate );

        return binding;
    },

    /**
     *
     * @param params
     */
    initNotTemplatingItems: function( params ) {
        var itemsMetadata = params.metadata.Items;
        var element = params.element;
        var items = itemsMetadata.slice( 0 );
        //var fakeItems = (new Array(itemsMetadata.length + 1)).join(' ').split('');

        element.getItems().set( items );
        var itemTemplate = this.buildItemTemplateForUniqueItem( items, params );
        element.setItemTemplate( itemTemplate );
    },

    /**
     *
     * @param itemsBinding
     */
    tuneItemsBinding: function( itemsBinding ) {
        var source = itemsBinding.getSource();

        if( typeof source.tryInitData === 'function' ) {
            source.tryInitData();
        }
    },

    /**
     *
     * @param params
     * @param itemsBinding
     */
    initGroup: function( params, itemsBinding ) {
        if( this.hasGrouping( params ) ) {
            this.initGroupValueSelector( params );
            this.initGroupItemTemplate( params, itemsBinding );
        }
    },

    /**
     *
     * @param params
     * @returns {*|string|string}
     */
    hasGrouping: function( params ) {
        return params.metadata.GroupValueSelector || params.metadata.GroupValueProperty;
    },

    /**
     *
     * @param params
     */
    initGroupValueSelector: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var groupValueSelector;

        if( metadata.GroupValueSelector ) {
            groupValueSelector = function( context, args ) {
                var scriptExecutor = new ScriptExecutor( element.getScriptsStorage() );
                return scriptExecutor.executeScript( metadata.GroupValueSelector, args );
            };
        } else if( metadata.GroupValueProperty ) {
            groupValueSelector = function( context, args ) {
                return InfinniUI.ObjectUtils.getPropertyValue( args.value, metadata.GroupValueProperty );
            };
        } else {
            //Без группировки
            groupValueSelector = null;
        }
        element.setGroupValueSelector( groupValueSelector );
    },

    /**
     *
     * @param params
     * @param itemsBinding
     */
    initGroupItemTemplate: function( params, itemsBinding ) {
        var metadata = params.metadata;
        var element = params.element;
        var itemTemplate;

        if( metadata.GroupItemTemplate ) {
            itemTemplate = this.buildItemTemplate( metadata.GroupItemTemplate, params );
        } else if( metadata.GroupItemFormat ) {
            itemTemplate = this.buildItemFormat( itemsBinding, metadata.GroupItemFormat, params );
        } else if( metadata.GroupItemSelector ) {
            itemTemplate = this.buildItemSelector( itemsBinding, metadata.GroupItemSelector, params );
        } else if( metadata.GroupItemProperty ) {
            itemTemplate = this.buildItemProperty( itemsBinding, metadata.GroupItemProperty, params );
        }

        if( itemTemplate ) {
            element.setGroupItemTemplate( itemTemplate );
        }
    },

    /**
     *
     * @param itemsBinding
     * @param itemPropertyMetadata
     * @param params
     * @returns {Function}
     */
    buildItemProperty: function( itemsBinding, itemPropertyMetadata, params ) {
        return function( context, args ) {
            var index = args.index;
            var label = new Label( this );
            var sourceProperty;
            var source = itemsBinding.getSource();
            var binding = new DataBinding();

            sourceProperty = index.toString();
            if( itemsBinding.getSourceProperty() != '' ) {
                sourceProperty = itemsBinding.getSourceProperty() + '.' + sourceProperty;
            }
            if( itemPropertyMetadata != '' ) {
                sourceProperty = sourceProperty + '.' + itemPropertyMetadata;
            }

            binding.bindSource( source, sourceProperty );
            binding.bindElement( label, 'value' );

            return label;
        };
    },

    /**
     *
     * @param itemsBinding
     * @param itemFormatMetadata
     * @param params
     * @returns {Function}
     */
    buildItemFormat: function( itemsBinding, itemFormatMetadata, params ) {
        var format = this.buildDisplayFormat( itemFormatMetadata, params );

        return function( context, args ) {
            var index = args.index;
            var label = new Label( this );
            var sourceProperty = itemsBinding.getSourceProperty();
            var source = itemsBinding.getSource();
            var binding = new DataBinding();

            sourceProperty = index.toString();
            if( itemsBinding.getSourceProperty() != '' ) {
                sourceProperty = itemsBinding.getSourceProperty() + '.' + sourceProperty;
            }

            label.setDisplayFormat( format );

            binding.bindSource( source, sourceProperty );
            binding.bindElement( label, 'value' );

            return label;
        };
    },

    /**
     *
     * @param itemsBinding
     * @param itemSelectorMetadata
     * @param params
     * @returns {Function}
     */
    buildItemSelector: function( itemsBinding, itemSelectorMetadata, params ) {
        return function( context, args ) {
            var index = args.index;
            var label = new Label( this );
            var scriptExecutor = new ScriptExecutor( params.parentView );
            var sourceProperty = itemsBinding.getSourceProperty();
            var source = itemsBinding.getSource();
            var binding = new DataBinding();

            binding.setMode( InfinniUI.BindingModes.toElement );
            sourceProperty = index.toString();

            if( itemsBinding.getSourceProperty() != '' ) {
                sourceProperty = itemsBinding.getSourceProperty() + '.' + sourceProperty;
            }

            binding.setConverter( {
                toElement: function( _context, _args ) {
                    return scriptExecutor.executeScript( itemSelectorMetadata, _args );
                }
            } );

            binding.bindSource( source, sourceProperty );
            binding.bindElement( label, 'value' );

            return label;
        };
    },

    /**
     *
     * @param templateMetadata
     * @param params
     * @returns {Function}
     */
    buildItemTemplate: function( templateMetadata, params ) {
        var builder = params.builder;
        var basePathOfProperty = params.basePathOfProperty || new BasePathOfProperty( '' );
        var propertyForSource = params.metadata[ 'Items' ][ 'Property' ] || '';
        var that = this;

        return function( context, args ) {
            var index = args.index;
            var bindingIndex;
            var argumentForBuilder = {
                parent: params.element,
                parentView: params.parentView
            };

            if( typeof index !== 'undefined' && index !== null ) {
                bindingIndex = that.bindingIndexByItemsIndex( index, params );

                if( typeof bindingIndex !== 'undefined' && bindingIndex !== null ) {
                    argumentForBuilder.basePathOfProperty = basePathOfProperty.buildChild( propertyForSource, bindingIndex );
                } else {
                    argumentForBuilder.basePathOfProperty = basePathOfProperty.buildChild( propertyForSource, index );
                }
            }

            return builder.build( templateMetadata, argumentForBuilder );
        };
    },

    /**
     * @public
     * @memberOf ContainerBuilder
     * @description Возвращает функцию itemTemplate для не шаблонизируемого item'а.
     * @param {Object} itemsMetadata метаданные.
     * @param {Object} params стандартные params, передаваемые внутри билдеров.
     **/
    buildItemTemplateForUniqueItem: function( itemsMetadata, params ) {
        var element = params.element;
        var builder = params.builder;
        var basePathOfProperty = params.basePathOfProperty || new BasePathOfProperty( '' );

        return function( context, args ) {
            var index = args.index;
            var item = element.getItems().getByIndex( index );
            var argumentForBuilder = {
                parent: params.element,
                parentView: params.parentView,
                basePathOfProperty: basePathOfProperty
            };

            return builder.build( item, argumentForBuilder );
        };
    },

    /**
     *
     * @param index
     * @param params
     * @returns {*}
     */
    bindingIndexByItemsIndex: function( index, params ) {
        var element = params.element;
        var items = element.getItems();

        return items.getProperty( index, 'bindingIndex' );
    },

    /**
     *
     * @param binding
     * @param params
     */
    bindElementItemsWithSorting: function( binding, params ) {
        // нетривиальный биндинг элементов нужен для того, чтобы правильно учитывались индексы при сортировке элементов
        var metadata = params.metadata;
        var element = params.element;
        var scriptExecutor = new ScriptExecutor( params.parent );
        var itemComparator;

        if( metadata.ItemComparator ) {
            itemComparator = function( item1, item2 ) {
                return scriptExecutor.executeScript( metadata.ItemComparator, { item1: item1, item2: item2 } );
            };
        }

        /**
         *
         */
        var source = binding.getSource();
        source.onPropertyChanged( '*', function( context, args ) {
            var items = element.getItems();
            //При замене целого элемента списка, заменить элемент в коллекции
            if( args.property && args.property.match( /^\d+$/ ) ) {
                items.replace( args.oldValue, args.newValue );
            }
        } );

        element.onRemove( function( context, args ) {
            binding.remove();
        } );


        binding.bindElement( {
            setProperty: function( name, value ) {
                var items = element.getItems();
                var isCollectionChanged;

                if( element.isRemoved ) {
                    console.log( 'if you see it, something got wrong with UI-2587' );
                }

                if( itemComparator ) {
                    isCollectionChanged = items.set( value || [], true );

                    items.forEach( function( item, index, collection ) {
                        collection.setProperty( index, 'bindingIndex', index );
                    } );

                    if( isCollectionChanged ) {
                        items.sort( itemComparator );
                    }

                } else {
                    isCollectionChanged = items.set( value || [] );

                    items.forEach( function( item, index, collection ) {
                        collection.setProperty( index, 'bindingIndex', index );
                    } );
                }
            },

            onPropertyChanged: function() {
            }

        }, 'items' );
    }

}, displayFormatBuilderMixin );


//####app/elements/_base/editorBase/editorBaseBuilderMixin.js
/**
 *
 * @mixin
 */
var editorBaseBuilderMixin = {

    /**
     *
     */
    initialize_editorBaseBuilder: function() {
    },

    /**
     *
     * @param params
     * @param bindingOptions
     * @returns {{valueBinding: {DataBinding}}}
     */
    applyMetadata_editorBaseBuilder: function( params, bindingOptions ) {
        var metadata = params.metadata;
        var element = params.element;

        bindingOptions = bindingOptions || {};
        bindingOptions.valueProperty = bindingOptions.valueProperty || 'value';

        element.setLabelFloating( metadata.LabelFloating );
        this.initBindingToProperty( params, 'HintText' );
        this.resolveExpressionInText( params, 'HintText' );
        this.initBindingToProperty( params, 'ErrorText' );
        this.resolveExpressionInText( params, 'ErrorText' );
        this.initBindingToProperty( params, 'WarningText' );
        this.resolveExpressionInText( params, 'WarningText' );

        var executorBuilderParams = {
            parentView: params.parentView,
            parent: element,
            basePathOfProperty: params.basePathOfProperty
        };

        if( metadata.OnValueChanging ) {
            var onValueChangingExecutor = Executor( metadata.OnValueChanging, params.builder, executorBuilderParams );

            element.onValueChanging( function( context, args ) {
                return onValueChangingExecutor( args );
            } );
        }
        if( metadata.OnValueChanged ) {
            var onValueChangedExecutor = Executor( metadata.OnValueChanged, params.builder, executorBuilderParams );

            element.onValueChanged( function( context, args ) {
                onValueChangedExecutor( args );
            } );
        }

        if( typeof metadata.Value !== 'undefined' ) {
            if( InfinniUI.Metadata.isBindingMetadata( metadata.Value ) ) {
                var buildParams = {
                    parentView: params.parentView,
                    basePathOfProperty: params.basePathOfProperty
                };
                var dataBinding = params.builder.buildBinding( metadata.Value, buildParams );
                var mergedConverter = mergeConverters( dataBinding.getConverter(), bindingOptions.converter );

                if( mergedConverter ) {
                    dataBinding.setConverter( mergedConverter );
                }
                if( bindingOptions.mode ) {
                    dataBinding.setMode( bindingOptions.mode );
                }
                dataBinding.bindElement( params.element, bindingOptions.valueProperty );

                this.initValidationResultText( element, dataBinding );

            } else {
                params.element.setValue( metadata.Value );
            }
        }

        function mergeConverters( topPriority, nonPriority ) {
            topPriority = topPriority || {};
            nonPriority = nonPriority || {};

            if( !topPriority.toElement && nonPriority.toElement ) {
                topPriority.toElement = nonPriority.toElement;
            }

            if( !topPriority.toSource && nonPriority.toSource ) {
                topPriority.toSource = nonPriority.toSource;
            }

            if( !topPriority._element && nonPriority._element ) {
                topPriority._element = nonPriority._element;
            }

            return !_.isEmpty( topPriority ) ? topPriority : null;
        }

        return {
            valueBinding: dataBinding
        };
    },

    /**
     * @description Инициализация подписки на события валидации для оповещения элемента
     * @param element
     * @param binding
     */
    initValidationResultText: function( element, binding ) {
        var source = binding.getSource();
        var property = binding.getSourceProperty();

        if( typeof source.onErrorValidator === 'function' ) {
            source.onErrorValidator( function( context, args ) {
                var result = args.value,
                    text = '';

                if( !result.IsValid && Array.isArray( result.Items ) ) {
                    text = getTextForItems( result.Items );
                }
                element.setErrorText( text );
            }, element );

            element.onRemove( function( context, args ) {
                source.offErrorValidator( element );
            } );
        }

        function getTextForItems( items, callback ) {
            return items
                .filter( function( item ) {
                    return property === item.Property;
                } )
                .map( function( item ) {
                    return item.Message;
                } )
                .join( ' ' );
        }
    }

};

InfinniUI.editorBaseBuilderMixin = editorBaseBuilderMixin;

//####app/elements/_base/editorBase/editorBaseMixin.js
/**
 *
 * @mixin editorBaseMixin
 */
var editorBaseMixin = {

    /**
     *
     */
    initialize_editorBase: function() {
    },

    /**
     * @returns {*}
     */
    getValue: function() {
        return this.control.getValue();
    },

    /**
     *
     * @param value
     */
    setValue: function( value ) {
        this.control.setValue( value );
    },

    /**
     * @returns {*}
     */
    getLabelFloating: function() {
        return this.control.get( 'labelFloating' );
    },

    /**
     *
     * @param value
     */
    setLabelFloating: function( value ) {
        this.control.set( 'labelFloating', value );
    },

    /**
     * @returns {*}
     */
    getHintText: function() {
        return this.control.get( 'hintText' );
    },

    /**
     *
     * @param value
     */
    setHintText: function( value ) {
        this.control.set( 'hintText', value );
    },

    /**
     * @returns {*}
     */
    getErrorText: function() {
        return this.control.get( 'errorText' );
    },

    /**
     *
     * @param value
     */
    setErrorText: function( value ) {
        this.control.set( 'errorText', value );
    },

    /**
     * @returns {*}
     */
    getWarningText: function() {
        return this.control.get( 'warningText' );
    },

    /**
     *
     * @param value
     */
    setWarningText: function( value ) {
        this.control.set( 'warningText', value );
    },

    convertValue: function( value ) {
        return value;
    },

    /**
     *
     * @param handler
     */
    onValueChanging: function( handler ) {
        this.control.onValueChanging(
            this.createControlEventHandler( this, handler, { property: 'value' } )
        );
    },

    /**
     *
     * @param handler
     */
    onValueChanged: function( handler ) {
        this.control.onValueChanged(
            this.createControlEventHandler( this, handler, { property: 'value' } )
        );
    }

};

InfinniUI.editorBaseMixin = editorBaseMixin;

//####app/elements/_base/listEditorBase/listEditorBase.js
/**
 *
 * @param parent
 * @param viewMode
 * @constructor
 * @mixes editorBaseMixin
 */
function ListEditorBase( parent, viewMode ) {
    _.superClass( ListEditorBase, this, parent, viewMode );

    this.initialize_editorBase();
}

InfinniUI.ListEditorBase = ListEditorBase;

_.inherit( ListEditorBase, Container );

_.extend( ListEditorBase.prototype, {

    /**
     * @returns {*}
     */
    getMultiSelect: function() {
        return this.control.get( 'multiSelect' );
    },

    /**
     *
     * @param value
     */
    setMultiSelect: function( value ) {
        this.control.set( 'multiSelect', value );
    },

    /**
     * @returns {*}
     */
    getValueSelector: function() {
        return this.control.get( 'valueSelector' );
    },

    /**
     *
     * @param value
     */
    setValueSelector: function( value ) {
        this.control.set( 'valueSelector', value );
    },

    /**
     * @returns {*}
     */
    getDisabledItemCondition: function() {
        return this.control.get( 'disabledItemCondition' );
    },

    /**
     *
     * @param value
     */
    setDisabledItemCondition: function( value ) {
        this.control.set( 'disabledItemCondition', value );
    },

    /**
     *
     * @param item
     */
    setValueItem: function( item ) {
        var result;
        var isMultiSelect = this.getMultiSelect();
        var valueSelector = this.getValueSelector();

        if( isMultiSelect ) {
            result = [];

            for( var i = 0, ii = item.length; i < ii; i++ ) {
                result[ i ] = valueSelector( null, { value: item[ i ] } );
            }

        } else {
            result = valueSelector( null, { value: item } );
        }

        this.setValue( result );
    },

    /**
     * @returns {*}
     */
    getSelectedItem: function() {
        return this.control.get( 'selectedItem' );
    },

    /**
     *
     * @param value
     */
    setSelectedItem: function( value ) {
        this.control.set( 'selectedItem', value );
    },

    /**
     *
     * @param handler
     */
    onSelectedItemChanged: function( handler ) {
        this.control.onSelectedItemChanged( this.createControlEventHandler( this, handler ) );
    }

}, editorBaseMixin );

//####app/elements/_base/listEditorBase/listEditorBaseBuilder.js
/**
 * @augments ContainerBuilder
 * @constructor
 * @mixes editorBaseBuilderMixin
 */
function ListEditorBaseBuilder() {
    _.superClass( ListEditorBaseBuilder, this );

    this.initialize_editorBaseBuilder();
}

InfinniUI.ListEditorBaseBuilder = ListEditorBaseBuilder;

_.inherit( ListEditorBaseBuilder, ContainerBuilder );

_.extend( ListEditorBaseBuilder.prototype, {

    /**
     * @returns {*}
     * @param params
     */
    applyMetadata: function( params ) {
        var applyingMetadataResult = ContainerBuilder.prototype.applyMetadata.call( this, params );
        var itemsBinding = applyingMetadataResult.itemsBinding;
        var applyingMetadataResult2;

        this.initSelecting( params, itemsBinding );
        this.initDisabledItemCondition( params );

        this.initValueFeatures( params );

        applyingMetadataResult2 = this.applyMetadata_editorBaseBuilder( params );
        return _.extend( applyingMetadataResult, applyingMetadataResult2 );
    },

    /**
     *
     * @param params
     * @param itemsBinding
     */
    initSelecting: function( params, itemsBinding ) {
        var metadata = params.metadata;
        var element = params.element;
        var source = itemsBinding.getSource();
        var sourceProperty = itemsBinding.getSourceProperty();
        var isBindingOnWholeDS = sourceProperty == '';
        var sourceIsDataSource = source instanceof InfinniUI.BaseDataSource;

        if( sourceIsDataSource && isBindingOnWholeDS ) {
            source.setSelectedItem( null );

            source.onSelectedItemChanged( function( context, args ) {
                var currentSelectedItem = element.getSelectedItem(),
                    newSelectedItem = args.value;

                if( newSelectedItem != currentSelectedItem ) {
                    element.setSelectedItem( newSelectedItem );
                }
            } );
        }

        var executorBuilderParams = {
            parentView: params.parentView,
            parent: element,
            basePathOfProperty: params.basePathOfProperty
        };
        var onSelectedItemExecutor = Executor( metadata.OnSelectedItemChanged, params.builder, executorBuilderParams );

        element.onSelectedItemChanged( function( context, args ) {

            if( sourceIsDataSource && isBindingOnWholeDS ) {
                var currentSelectedItem = source.getSelectedItem(),
                    newSelectedItem = args.value;

                if ( newSelectedItem != currentSelectedItem ) {
                    source.setSelectedItem( newSelectedItem );
                }
            }

            onSelectedItemExecutor( args );
        } );
    },

    /**
     *
     * @param params
     */
    initValueFeatures: function( params ) {
        var metadata = params.metadata;
        var element = params.element;

        if ( typeof metadata.MultiSelect !== 'undefined' && metadata.MultiSelect !== null ) {
            element.setMultiSelect( metadata.MultiSelect );
        }

        this.initValueSelector( params );
    },

    /**
     *
     * @param params
     */
    initValueSelector: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var valueSelector;

        if ( metadata.ValueSelector ) {
            valueSelector = function( context, args ) {
                var scriptExecutor = new ScriptExecutor( params.element.getScriptsStorage() );
                return scriptExecutor.executeScript( metadata.ValueSelector, args );
            };
        } else if ( metadata.ValueProperty ) {
            valueSelector = function( context, args ) {
                return InfinniUI.ObjectUtils.getPropertyValue( args.value, metadata.ValueProperty );
            };
        } else {
            valueSelector = function( context, args ) {
                return args.value;
            };
        }
        element.setValueSelector( valueSelector );
    },

    /**
     *
     * @param params
     */
    initDisabledItemCondition: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var disabledItemCondition;

        if ( metadata.DisabledItemCondition ) {
            disabledItemCondition = function( context, args ) {
                var scriptExecutor = new ScriptExecutor( element.getScriptsStorage() );
                return scriptExecutor.executeScript( metadata.DisabledItemCondition, args );
            };
        }

        element.setDisabledItemCondition( disabledItemCondition );
    }

}, editorBaseBuilderMixin );

//####app/elements/_base/textEditorBase/textEditorBase.js
/**
 *
 * @param parent
 * @constructor
 * @augments Element
 * @mixes editorBaseMixin
 * @mixes labelTextElementMixin
 */
function TextEditorBase( parent ) {
    _.superClass( TextEditorBase, this, parent );
    this.initialize_editorBase();
}

InfinniUI.TextEditorBase = TextEditorBase;

_.inherit( TextEditorBase, Element );

_.extend( TextEditorBase.prototype, {

    /**
     *
     * @param editor
     */
    setEditor: function( editor ) {
        this.control.set( 'editor', editor );
    },

    /**
     *
     * @param value
     */
    setDisplayFormat: function( value ) {
        this.control.set( 'displayFormat', value );
    },

    /**
     * @returns {*}
     */
    getDisplayFormat: function() {
        return this.control.get( 'displayFormat' );
    },

    /**
     *
     * @param value
     */
    setEditMask: function( value ) {
        this.control.set( 'editMask', value );
    },

    /**
     * @returns {*}
     */
    getEditMask: function() {
        return this.control.get( 'editMask' );
    },

    /**
     * @description Возвращает значение, которое введено в поле редактирования в данный момент
     * @returns {*}
     */
    getRawValue: function() {
        var value = this.control.getRawValue();
        var editMask = this.getEditMask();

        if ( editMask ) {
            var val = editMask.getValue();
            var txt = editMask.getText();

            if ( isNotEmpty( val ) ) {
                value = val;
            } else if ( isNotEmpty( txt ) ) {
                value = txt;
            }
        }

        return value;

        function isNotEmpty( val ) {
            return val !== null && typeof val !== 'undefined';
        }
    },

    /**
     * @returns {*}
     */
    getInputType: function() {
        return this.control.get( 'inputType' );
    },

    /**
     *
     * @param inputType
     */
    setInputType: function( inputType ) {
        if ( inputType ) {
            this.control.set( 'inputType', inputType );
        }
    }

}, editorBaseMixin, labelTextElementMixin );

//####app/elements/_base/textEditorBase/textEditorBaseBuilder.js
/**
 *
 * @constructor
 * @augments ElementBuilder
 * @mixes editorBaseBuilderMixin
 * @mixes displayFormatBuilderMixin
 *
 */
function TextEditorBaseBuilder() {
    _.superClass( TextEditorBaseBuilder, this );
    this.initialize_editorBaseBuilder();
}

InfinniUI.TextEditorBaseBuilder = TextEditorBaseBuilder;

_.inherit( TextEditorBaseBuilder, ElementBuilder );

_.extend( TextEditorBaseBuilder.prototype, {

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );
        this.applyMetadata_editorBaseBuilder( params );

        var element = params.element;

        this.initBindingToProperty( params, 'LabelText' );
        this.resolveExpressionInText( params, 'LabelText' );
        this.initBindingToProperty( params, 'LabelTextTitle' );

        element.setInputType( this.getCompatibleInputType( params ) );
        this
            .initDisplayFormat( params )
            .initEditMask( params );
    },

    /**
     *
     * @param params
     * @returns {number|string}
     */
    getCompatibleInputType: function( params ) {
        var inputType = params.metadata.Type;
        var editMask = params.metadata.EditMask;

        if( typeof inputType === 'undefined' ) {
            inputType = params.element.getInputType();
        }

        if( editMask ) {
            //Маска редактирования задается только для input[type=text]
            inputType = 'text';
        }

        return inputType;
    },


    /**
     *
     * @param params
     * @returns {TextEditorBaseBuilder}
     */
    initDisplayFormat: function( params ) {
        var metadata = params.metadata;
        var format = this.buildDisplayFormat( metadata.DisplayFormat, params );

        params.element.setDisplayFormat( format );

        return this;
    },

    /**
     *
     * @param params
     * @returns {TextEditorBaseBuilder}
     */
    initEditMask: function( params ) {
        var metadata = params.metadata;

        params.element.setEditMask( metadata.EditMask );
        return this;
    }

}, editorBaseBuilderMixin, displayFormatBuilderMixin );

//####app/elements/listBox/listBox.js
/**
 *
 * @param parent
 * @param viewMode
 * @constructor
 * @augments ListEditorBase
 */
function ListBox( parent, viewMode ) {
    _.superClass( ListBox, this, parent, viewMode );
}

InfinniUI.ListBox = ListBox;

_.inherit( ListBox, ListEditorBase );

/**
 *
 * @param viewMode
 * @returns {ListBoxControl}
 */
ListBox.prototype.createControl = function( viewMode ) {
    return new ListBoxControl( viewMode );
};

//####app/elements/listBox/listBoxBuilder.js
/**
 * @augments ListEditorBaseBuilder
 * @constructor
 */
function ListBoxBuilder() {
    _.superClass( ListBoxBuilder, this );
}

InfinniUI.ListBoxBuilder = ListBoxBuilder;

_.inherit( ListBoxBuilder, ListEditorBaseBuilder );

_.extend( ListBoxBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {ListBox}
     */
    createElement: function( params ) {
        return new ListBox( params.parent, params.metadata[ 'ViewMode' ] );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ListEditorBaseBuilder.prototype.applyMetadata.call( this, params );
    }

} );

//####app/elements/textBox/textBox.js
/**
 *
 * @param parent
 * @constructor
 * @augments TextEditorBase
 */
function TextBox( parent ) {
    _.superClass( TextBox, this, parent );
}

InfinniUI.TextBox = TextBox;

_.inherit( TextBox, TextEditorBase );

_.extend( TextBox.prototype, {

    /**
     *
     * @param parent
     * @returns {TextBoxControl}
     */
    createControl: function( parent ) {
        return new TextBoxControl( parent );
    },

    /**
     * @returns {*}
     */
    getMultiline: function() {
        return this.control.get( 'multiline' );
    },

    /**
     *
     * @param value
     */
    setMultiline: function( value ) {
        this.control.set( 'multiline', value );
    },

    /**
     * @returns {*}
     */
    getLineCount: function() {
        return this.control.get( 'lineCount' );
    },

    /**
     *
     * @param value
     */
    setLineCount: function( value ) {
        this.control.set( 'lineCount', value );
    }

} );



//####app/elements/textBox/textBoxBuilder.js
/**
 *
 * @constructor
 * @augments TextEditorBaseBuilder
 */
function TextBoxBuilder() {
    _.superClass( TextBoxBuilder, this );
}

InfinniUI.TextBoxBuilder = TextBoxBuilder;

_.inherit( TextBoxBuilder, TextEditorBaseBuilder );

/**
 *
 * @param params
 * @returns {TextBox}
 */
TextBoxBuilder.prototype.createElement = function( params ) {
    return new TextBox( params.parent );
};

/**
 *
 * @param params
 */
TextBoxBuilder.prototype.applyMetadata = function( params ) {
    TextEditorBaseBuilder.prototype.applyMetadata.call( this, params );

    var element = params.element;
    var metadata = params.metadata;
    var lineCount = metadata.LineCount;

    element.setMultiline( metadata.Multiline );
    if ( metadata.Multiline && lineCount === null || typeof lineCount === 'undefined' ) {
        lineCount = 2;
    }
    element.setLineCount( lineCount );
};

//####app/elements/dateTimePicker/dateTimePicker.js
/**
 *
 * @param parent
 * @constructor
 * @augments TextEditorBase
 */
function DateTimePicker( parent ) {
    _.superClass( DateTimePicker, this, parent );
}

InfinniUI.DateTimePicker = DateTimePicker;

_.inherit( DateTimePicker, TextEditorBase );

/**
 *
 * @param parent
 * @returns {DateTimePickerControl}
 */
DateTimePicker.prototype.createControl = function( parent ) {
    return new DateTimePickerControl( parent );
};

/**
 * @returns {*}
 */
DateTimePicker.prototype.getMinValue = function() {
    return this.control.get( 'minValue' );
};

/**
 *
 * @param value
 */
DateTimePicker.prototype.setMinValue = function( value ) {
    this.control.set( 'minValue', value );
};

/**
 * @returns {*}
 */
DateTimePicker.prototype.getMaxValue = function() {
    return this.control.get( 'maxValue' );
};

/**
 *
 * @param value
 */
DateTimePicker.prototype.setMaxValue = function( value ) {
    this.control.set( 'maxValue', value );
};

/**
 * @returns {*}
 */
DateTimePicker.prototype.getMode = function() {
    return this.control.get( 'mode' );
};

/**
 *
 * @param value
 */
DateTimePicker.prototype.setMode = function( value ) {
    this.control.set( 'mode', value );
};

/**
 * @returns {*}
 */
DateTimePicker.prototype.getTimeZone = function() {
    return this.control.get( 'timeZone' );
};

/**
 *
 * @param value
 */
DateTimePicker.prototype.setTimeZone = function( value ) {
    if( typeof value === 'number' ) {
        this.control.set( 'timeZone', value );
    }
};

/**
 *
 * @param value
 */
DateTimePicker.prototype.setDateFormat = function( value ) {
    this.control.set( 'format', value );
};

/**
 * @returns {*}
 */
DateTimePicker.prototype.getExpandOnEnter = function() {
    return this.control.get( 'expandOnEnter' );
};

/**
 *
 * @param value
 */
DateTimePicker.prototype.setExpandOnEnter = function( value ) {
    this.control.set( 'expandOnEnter', value );
};

//####app/elements/dateTimePicker/dateTimePickerBuilder.js
/**
 *
 * @constructor
 * @augments TextEditorBaseBuilder
 */
function DateTimePickerBuilder() {
    _.superClass( DateTimePickerBuilder, this );
}

InfinniUI.DateTimePickerBuilder = DateTimePickerBuilder;

_.inherit( DateTimePickerBuilder, TextEditorBaseBuilder );

/**
 *
 * @param params
 * @returns {DateTimePicker}
 */
DateTimePickerBuilder.prototype.createElement = function( params ) {
    return new DateTimePicker( params.parent );
};

/**
 *
 * @param params
 */
DateTimePickerBuilder.prototype.applyMetadata = function( params ) {
    var element = params.element;
    var metadata = params.metadata;

    this.applyDefaultMetadata( params );

    TextEditorBaseBuilder.prototype.applyMetadata.call( this, params );

    element.setTimeZone( metadata.TimeZone );
    element.setMode( metadata.Mode );

    this.applyMinValue( element, metadata.MinValue );
    this.applyMaxValue( element, metadata.MaxValue );

    if( 'ExpandOnEnter' in params.metadata ) {
        this.initBindingToProperty( params, 'ExpandOnEnter' );
    }

    //var format = params.builder.buildType(params.parent, 'DateFormat', {}, null);
    //element.setDateFormat(format);
};

/**
 *
 * @param element
 * @param minValue
 */
DateTimePickerBuilder.prototype.applyMinValue = function( element, minValue ) {
    element.setMinValue( InfinniUI.DateUtils.parseISO8601toDate( minValue ) );
};

/**
 *
 * @param element
 * @param maxValue
 */
DateTimePickerBuilder.prototype.applyMaxValue = function( element, maxValue ) {
    element.setMaxValue( InfinniUI.DateUtils.parseISO8601toDate( maxValue ) );
};

/**
 *
 * @param params
 */
DateTimePickerBuilder.prototype.applyDefaultMetadata = function( params ) {
    var metadata = params.metadata;
    var defaultFormat = {
        Date: '${:d}',
        DateTime: '${:g}',
        Time: '${:T}'
    };
    var defaultEditMask = {
        Date: { DateTimeEditMask: { Mask: 'd' } },
        DateTime: { DateTimeEditMask: { Mask: 'g' } },
        Time: { DateTimeEditMask: { Mask: 'T' } }
    };

    params.metadata = _.extend( {}, metadata );

    _.defaults( params.metadata, { Mode: 'Date' } );
    _.defaults( params.metadata, {
        DisplayFormat: defaultFormat[ params.metadata.Mode ],
        EditMask: defaultEditMask[ params.metadata.Mode ]
    } );
};

/**
 *
 * @param params
 * @returns {*}
 */
DateTimePickerBuilder.prototype.initDisplayFormat = function( params ) {
    return TextEditorBaseBuilder.prototype.initDisplayFormat.call( this, this.applyTimeZone( params ) );
};

/**
 *
 * @param params
 * @returns {*}
 */
DateTimePickerBuilder.prototype.initEditMask = function( params ) {
    return TextEditorBaseBuilder.prototype.initEditMask.call( this, this.applyTimeZone( params ) );
};

/**
 *
 * @param params
 * @returns {{}}
 */
DateTimePickerBuilder.prototype.applyTimeZone = function( params ) {
    var metadata = params.metadata;
    var _params = {};
    var formatOptions = {};

    if( typeof metadata.TimeZone !== 'undefined' && metadata.TimeZone !== null ) {
        formatOptions.TimeZone = metadata.TimeZone;
    }

    _.defaults( _params, params, { formatOptions: formatOptions } );
    return _params;
};

//####app/elements/datePicker/datePicker.js
/**
 *
 * @param parent
 * @constructor
 */
function DatePicker( parent ) {
    _.superClass( DatePicker, this, parent );

    this.setMode( 'DatePicker' );
    this.setTimeZone();
}

InfinniUI.DatePicker = DatePicker;

_.inherit( DatePicker, DateTimePicker );

/**
 *
 */
DatePicker.prototype.setTimeZone = function() {
    DateTimePicker.prototype.setTimeZone.call( this, 0 );
};

/**
 *
 * @param parent
 * @returns {DatePickerControl}
 */
DatePicker.prototype.createControl = function( parent ) {
    return new DatePickerControl( parent );
};

/**
 *
 * @param value
 * @returns {*}
 */
DatePicker.prototype.convertValue = function( value ) {
    var _value = null;

    if( typeof value === 'undefined' || value === null || !value.toString().length ) {
        _value = null;
    } else {
        _value = InfinniUI.DateUtils.dateToTimestamp( value );
    }

    return _value;
};

//####app/elements/datePicker/datePickerBuilder.js
/**
 *
 * @constructor
 */
function DatePickerBuilder() {
    _.superClass( DatePickerBuilder, this );
}

InfinniUI.DatePickerBuilder = DatePickerBuilder;

_.inherit( DatePickerBuilder, DateTimePickerBuilder );

/**
 *
 * @param params
 * @returns {DatePicker}
 */
DatePickerBuilder.prototype.createElement = function( params ) {
    return new DatePicker( params.parent );
};

/**
 *
 * @param params
 */
DatePickerBuilder.prototype.applyDefaultMetadata = function( params ) {

    params.metadata = _.extend( {}, params.metadata, {
        Mode: 'DatePicker',
        TimeZone: 0
    } );

    _.defaults( params.metadata, {
        DisplayFormat: '${:d}',
        EditMask: { DateTimeEditMask: { Mask: 'd' } }
    } );

};

//####app/elements/timePicker/timePicker.js
/**
 * @augments DateTimePicker
 * @param parent
 * @constructor
 */
function TimePicker( parent ) {
    _.superClass( TimePicker, this, parent );

    this.setMode( 'TimePicker' );
    this.setTimeZone();
}

InfinniUI.TimePicker = TimePicker;

_.inherit( TimePicker, DateTimePicker );

/**
 *
 * @param parent
 * @returns {TimePickerControl}
 */
TimePicker.prototype.createControl = function( parent ) {
    return new TimePickerControl( parent );
};

/**
 *
 */
TimePicker.prototype.setTimeZone = function() {
    DateTimePicker.prototype.setTimeZone.call( this, 0 );
};

/**
 *
 * @param value
 * @returns {*}
 */
TimePicker.prototype.convertValue = function( value ) {
    var _value = null;

    if( typeof value === 'undefined' || value === null || !value.toString().length ) {
        _value = null;
    } else {
        _value = InfinniUI.DateUtils.dateToTimestampTime( value );
    }

    return _value;
};

//####app/elements/timePicker/timePickerBuilder.js
/**
 * @augments DateTimePickerBuilder
 * @constructor
 */
function TimePickerBuilder() {
    _.superClass( TimePickerBuilder, this );
}

InfinniUI.TimePickerBuilder = TimePickerBuilder;

_.inherit( TimePickerBuilder, DateTimePickerBuilder );

/**
 *
 * @param params
 * @returns {TimePicker}
 */
TimePickerBuilder.prototype.createElement = function( params ) {
    return new TimePicker( params.parent );
};

/**
 *
 * @param params
 */
TimePickerBuilder.prototype.applyDefaultMetadata = function( params ) {
    params.metadata = _.extend( {}, params.metadata, {
        Mode: 'TimePicker',
        TimeZone: 0
    } );

    _.defaults( params.metadata, {
        DisplayFormat: '${:T}',
        EditMask: {
            DateTimeEditMask: {
                Mask: 'T'
            }
        }
    } );
};

/**
 *
 * @param element
 * @param minValue
 */
TimePickerBuilder.prototype.applyMinValue = function( element, minValue ) {
    var date = InfinniUI.DateUtils.parseTimeISO8601toDate( minValue, 0 );

    if( typeof date !== 'undefined' ) {
        element.setMinValue( date );
    }
};

/**
 *
 * @param element
 * @param maxValue
 */
TimePickerBuilder.prototype.applyMaxValue = function( element, maxValue ) {
    var date = InfinniUI.DateUtils.parseTimeISO8601toDate( maxValue, 0 );

    if( typeof date !== 'undefined' ) {
        element.setMaxValue( date );
    }
};

//####app/elements/stackPanel/stackPanel.js
/**
 * @param parent
 * @param viewMode
 * @constructor
 * @augments Container
 */
function StackPanel( parent, viewMode ) {
    _.superClass( StackPanel, this, parent, viewMode );
}

InfinniUI.StackPanel = StackPanel;

_.inherit( StackPanel, Container );

/**
 * @returns {*}
 */
StackPanel.prototype.getOrientation = function() {
    return this.control.get( 'orientation' );
};

/**
 *
 * @param value
 */
StackPanel.prototype.setOrientation = function( value ) {
    if( InfinniUI.Metadata.isValidValue( value, InfinniUI.StackPanelOrientation ) ) {
        this.control.set( 'orientation', value );
    }
};

/**
 *
 * @param viewMode
 * @returns {StackPanelControl}
 */
StackPanel.prototype.createControl = function( viewMode ) {
    return new StackPanelControl( viewMode );
};

//####app/elements/stackPanel/stackPanelBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 */
function StackPanelBuilder() {
    _.superClass( StackPanelBuilder, this );
}

InfinniUI.StackPanelBuilder = StackPanelBuilder;

_.inherit( StackPanelBuilder, ContainerBuilder );

_.extend( StackPanelBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {StackPanel}
     */
    createElement: function( params ) {
        return new StackPanel( params.parent, params.metadata[ 'ViewMode' ] );
    },

    /**
     * @param {Object} params
     * @param {StackPanel} params.element
     * @param {Object} params.metadata
     * @returns {*}
     */
    applyMetadata: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var result = ContainerBuilder.prototype.applyMetadata.call( this, params );

        element.setOrientation( metadata.Orientation );

        return result;
    }

} );

//####app/elements/button/button.js
/**
 * @param parent
 * @param viewMode
 * @augments Element
 * @constructor
 * @mixes buttonMixin
 */
function Button( parent, viewMode ) {
    _.superClass( Button, this, parent, viewMode );
    this.buttonInit();
}

InfinniUI.Button = Button;

_.inherit( Button, Element );

_.extend( Button.prototype, {

    /**
     *
     * @param viewMode
     * @returns {ButtonControl}
     */
    createControl: function( viewMode ) {
        return new ButtonControl( viewMode );
    },

    /**
     *
     * @param type
     */
    setType: function( type ) {
        this.control.setType( type );
    },

    /**
     *
     * @returns {*|string}
     */
    getType: function() {
        return this.control.getType();
    }

}, buttonMixin );

//####app/elements/button/buttonBuilder.js
/**
 * @augments ElementBuilder
 * @constructor
 * @mixes buttonBuilderMixin
 */
function ButtonBuilder() {
    _.superClass( ButtonBuilder, this );
}

InfinniUI.ButtonBuilder = ButtonBuilder;

_.inherit( ButtonBuilder, ElementBuilder );

_.extend( ButtonBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {Button}
     */
    createElement: function( params ) {
        var viewMode = this.detectViewMode( params );

        return new Button( params.parent, viewMode );
    },

    /**
     *
     * @param params
     */
    detectViewMode: function( params ) {
        var viewMode = params.metadata[ 'ViewMode' ];
        var el = params.parent;
        var exit = false;

        if( !viewMode ) {
            while( !exit ) {
                if( el ) {
                    if( el instanceof PopupButton ) {
                        viewMode = 'link';
                        exit = true;

                    } else if( el instanceof MenuBar ) {
                        viewMode = 'menuItem';
                        exit = true;

                    } else if( el instanceof View ) {
                        exit = true;

                    } else {
                        el = el.parent;

                    }
                } else {
                    exit = true;
                }
            }
        }

        return viewMode;
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );

        this.applyButtonMetadata( params );

        if( params.metadata.Type ) {
            params.element.setType( params.metadata.Type );
        }
    }

}, buttonBuilderMixin );

//####app/elements/buttonEdit/buttonEdit.js
/**
 *
 * @param parent
 * @constructor
 * @augments TextBox
 */
function ButtonEdit( parent ) {
    _.superClass( ButtonEdit, this, parent );
}

InfinniUI.ButtonEdit = ButtonEdit;

_.inherit( ButtonEdit, TextBox );

/**
 *
 * @param parent
 * @returns {ButtonEditControl}
 */
ButtonEdit.prototype.createControl = function( parent ) {
    return new ButtonEditControl( parent );
};

/**
 * @public
 * @param {String} icon
 */
ButtonEdit.prototype.setIcon = function( icon ) {
    if( icon && icon.toLowerCase ) {
        icon = icon.toLowerCase();
    }
    this.control.set( 'icon', icon );
};

/**
 * @public
 * @returns {String}
 */
ButtonEdit.prototype.getIcon = function() {
    return this.control.get( 'icon' );
};

/**
 * @public
 * @param {boolean} readOnly
 */
ButtonEdit.prototype.setReadOnly = function( readOnly ) {
    if( typeof  readOnly !== 'undefined' && readOnly !== null ) {
        this.control.set( 'readOnly', !!readOnly );
    }
};

/**
 * @public
 * @returns {boolean}
 */
ButtonEdit.prototype.getReadOnly = function() {
    return this.control.get( 'readOnly' );
};

/**
 * @public
 * @param {boolean} showClear
 */
ButtonEdit.prototype.setShowClear = function( showClear ) {
    if( typeof showClear !== 'undefined' && showClear !== null ) {
        this.control.set( 'showClear', !!showClear );
    }
};

/**
 * @public
 * @returns {boolean}
 */
ButtonEdit.prototype.getShowClear = function() {
    return this.control.get( 'showClear' );
};

/**
 *
 * @param handler
 * @returns {*}
 */
ButtonEdit.prototype.onButtonClick = function( handler ) {
    var element = this;
    var callback = function( nativeEventData ) {
        var eventData = element._getHandlingMouseEventData( nativeEventData );
        handler( eventData );
    };
    return this.control.onButtonClick( callback );
};

//####app/elements/buttonEdit/buttonEditBuilder.js
/**
 *
 * @constructor
 * @augments TextBoxBuilder
 */
function ButtonEditBuilder() {
    _.superClass( ButtonEditBuilder, this );
}

InfinniUI.ButtonEditBuilder = ButtonEditBuilder;

_.inherit( ButtonEditBuilder, TextBoxBuilder );

/**
 *
 * @param params
 * @returns {ButtonEdit}
 */
ButtonEditBuilder.prototype.createElement = function( params ) {
    return new ButtonEdit( params.parent );
};

/**
 *
 * @param params
 */
ButtonEditBuilder.prototype.applyMetadata = function( params ) {
    TextBoxBuilder.prototype.applyMetadata.call( this, params );

    this.initBindingToProperty( params, 'Icon' );
    this.initBindingToProperty( params, 'ReadOnly', true );
    this.initBindingToProperty( params, 'ShowClear', true );

    this.buildOnButtonClick( params );
    this.buildButtonAction( params );
};


/**
 * @protected
 * @param params
 */
ButtonEditBuilder.prototype.buildButtonAction = function( params ) {
    /** @type {ButtonEdit} **/
    var element = params.element;
    var metadata = params.metadata;
    var builder = params.builder;

    if( !metadata.Action ) {
        return;
    }

    var args = {
        parentView: params.parentView,
        parent: element,
        basePathOfProperty: params.basePathOfProperty
    };
    var action = builder.build( metadata.Action, args );

    element.onButtonClick( function() {
        action.execute();
    } );
};

/**
 * @protected
 * @param params
 */
ButtonEditBuilder.prototype.buildOnButtonClick = function( params ) {
    var element = params.element;
    var metadata = params.metadata;
    var onButtonClick = metadata.OnButtonClick;

    if( !onButtonClick ) {
        return;
    }

    var executorBuilderParams = {
        parentView: params.parentView,
        parent: element,
        basePathOfProperty: params.basePathOfProperty
    };
    var executor = Executor( onButtonClick, params.builder, executorBuilderParams );

    element.onButtonClick( executor );
};



//####app/elements/checkBox/checkBox.js
/**
 *
 * @param parent
 * @constructor
 * @augment Element
 * @mixes editorBaseMixin
 */
function CheckBox( parent ) {
    _.superClass( CheckBox, this, parent );
    this.initialize_editorBase();
}

InfinniUI.CheckBox = CheckBox;

_.inherit( CheckBox, Element );

_.extend( CheckBox.prototype, {

    /**
     *
     * @param parent
     * @returns {CheckBoxControl}
     */
    createControl: function( parent ) {
        return new CheckBoxControl( parent );
    }

}, editorBaseMixin );

//####app/elements/checkBox/checkBoxBuilder.js
/**
 *
 * @constructor
 * @augments ElementBuilder
 * @mixes editorBaseBuilderMixin
 */
function CheckBoxBuilder() {
    _.superClass( CheckBoxBuilder, this );
    this.initialize_editorBaseBuilder();
}

InfinniUI.CheckBoxBuilder = CheckBoxBuilder;

_.inherit( CheckBoxBuilder, ElementBuilder );

_.extend( CheckBoxBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {CheckBox}
     */
    createElement: function( params ) {
        return new CheckBox( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );
        this.applyMetadata_editorBaseBuilder( params );
    }

}, editorBaseBuilderMixin );


//####app/elements/comboBox/comboBox.js
/**
 * @augments ListEditorBase
 * @param parent
 * @constructor
 * @mixes labelTextElementMixin
 */
function ComboBox( parent ) {
    _.superClass( ComboBox, this, parent );
}

InfinniUI.ComboBox = ComboBox;

_.inherit( ComboBox, ListEditorBase );

_.extend( ComboBox.prototype, labelTextElementMixin );

/**
 *
 * @returns {ComboBoxControl}
 */
ComboBox.prototype.createControl = function() {
    return new ComboBoxControl();
};

/**
 *
 * @param value
 */
ComboBox.prototype.setValueTemplate = function( value ) {
    this.control.set( 'valueTemplate', value );
};

/**
 * @returns {*}
 */
ComboBox.prototype.getValueTemplate = function() {
    return this.control.get( 'valueTemplate' );
};

/**
 * @returns {*}
 */
ComboBox.prototype.getAutocomplete = function() {
    return this.control.get( 'autocomplete' );
};

/**
 *
 * @param value
 */
ComboBox.prototype.setAutocomplete = function( value ) {
    if ( typeof value === 'boolean' ) {
        this.control.set( 'autocomplete', value );
    }
};

/**
 *
 * @param value
 */
ComboBox.prototype.setShowClear = function( value ) {
    if ( typeof value === 'boolean' ) {
        this.control.set( 'showClear', value );
    }
};

/**
 * @returns {*}
 */
ComboBox.prototype.getShowClear = function() {
    return this.control.get( 'showClear' );
};

/**
 * @returns {*}
 */
ComboBox.prototype.getAutocompleteValue = function() {
    return this.control.get( 'autocompleteValue' );
};

/**
 *
 * @param value
 */
ComboBox.prototype.setAutocompleteValue = function( value ) {
    this.control.set( 'autocompleteValue', value );
};

/**
 *
 * @param value
 */
ComboBox.prototype.setNoItemsMessage = function( value ) {
    this.control.setNoItemsMessage( value );
};

/**
 * @returns {*}
 */
ComboBox.prototype.getExpandOnEnter = function() {
    return this.control.get( 'expandOnEnter' );
};

/**
 *
 * @param value
 */
ComboBox.prototype.setExpandOnEnter = function( value ) {
    this.control.set( 'expandOnEnter', value );
};

//####app/elements/comboBox/comboBoxBuilder.js
/**
 * @augments ListEditorBaseBuilder
 * @constructor
 */
function ComboBoxBuilder() {
    _.superClass( ComboBoxBuilder, this );
}

InfinniUI.ComboBoxBuilder = ComboBoxBuilder;

_.inherit( ComboBoxBuilder, ListEditorBaseBuilder );

_.extend( ComboBoxBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {ComboBox}
     */
    createElement: function( params ) {
        return new ComboBox( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        var element = params.element;
        var that = this;
        var data = ListEditorBaseBuilder.prototype.applyMetadata.call( this, params );

        this.initValueTemplate( data.valueBinding, params );
        this.initBindingToProperty( params, 'LabelText' );
        this.resolveExpressionInText( params, 'LabelText' );
        this.initBindingToProperty( params, 'LabelTextTitle' );

        if( 'NoItemsMessage' in params.metadata ) {
            this.initBindingToProperty( params, 'NoItemsMessage' );
            this.resolveExpressionInText( params, 'NoItemsMessage' );
        }

        if( 'ExpandOnEnter' in params.metadata ) {
            this.initBindingToProperty( params, 'ExpandOnEnter' );
        }

        element.setAutocomplete( params.metadata.Autocomplete );
        element.setShowClear( params.metadata.ShowClear );

        if( params.metadata.Autocomplete ) {
            var name = element.getName();

            if( !name ) {
                name = that.generateName();
                element.setName( name );
            }
        }
    },

    /**
     *
     * @param binding
     * @param params
     */
    initValueTemplate: function( binding, params ) {
        var metadata = params.metadata;
        var element = params.element;
        var valueTemplate;

        if( 'ValueTemplate' in metadata ) {
            valueTemplate = this.buildValueTemplate( metadata.ValueTemplate, params );
        } else if( 'ValueFormat' in metadata ) {
            valueTemplate = this.buildValueTemplateByFormat( binding, metadata.ValueFormat, params );
        } else {
            valueTemplate = this.buildValueTemplateByDefault( binding, params );
        }

        element.setValueTemplate( valueTemplate );
    },

    /**
     *
     * @param templateMetadata
     * @param params
     * @returns {Function}
     */
    buildValueTemplate: function( templateMetadata, params ) {
        var builder = params.builder;
        var basePathOfProperty = params.basePathOfProperty || new BasePathOfProperty( '' );

        return function( context, args ) {
            var index = args.index;
            var bindingIndex;
            var argumentForBuilder = {
                parent: params.element,
                parentView: params.parentView
            };

            if( typeof index !== 'undefined' && index !== null ) {
                //bindingIndex = that.bindingIndexByItemsIndex(index, params);
                bindingIndex = index;

                if( typeof bindingIndex !== 'undefined' && bindingIndex !== null ) {
                    argumentForBuilder.basePathOfProperty = basePathOfProperty.buildChild( '', bindingIndex );
                } else {
                    argumentForBuilder.basePathOfProperty = basePathOfProperty.buildChild( '', index );
                }
            }

            return builder.build( templateMetadata, argumentForBuilder );
        };
    },

    /**
     *
     * @param binding
     * @param valueFormatMetadata
     * @param params
     * @returns {Function}
     */
    buildValueTemplateByFormat: function( binding, valueFormatMetadata, params ) {
        var format = this.buildDisplayFormat( valueFormatMetadata, params );

        return function( context, args ) {
            var value = args.value;
            var label = new Label( this );

            label.setHorizontalAlignment( 'Left' );
            label.setDisplayFormat( format );
            label.setValue( value );

            return label;
        };
    },

    /**
     *
     * @param binding
     * @param params
     * @returns {Function}
     */
    buildValueTemplateByDefault: function( binding, params ) {
        return function( context, args ) {
            var value = args.value;
            var label = new Label( this );

            label.setHorizontalAlignment( 'Left' );
            label.setValue( value );

            return label;
        };
    },

    /**
     *
     * @returns {string}
     */
    generateName: function() {
        return 'combobox-' + guid();
    }

} );

//####app/elements/contextMenu/contextMenu.js
/**
 * @class
 * @constructor
 * @arguments Container
 */
function ContextMenu( parent ) {
    _.superClass( ContextMenu, this, parent );
}

InfinniUI.ContextMenu = ContextMenu;

_.inherit( ContextMenu, Container );

_.extend( ContextMenu.prototype, {

    /**
     *
     * @returns {ContextMenuControl}
     */
    createControl: function() {
        return new ContextMenuControl();
    }

} );

//####app/elements/contextMenu/contextMenuBuilder.js
/**
 * @constructor
 * @arguments ContainerBuilder
 */
function ContextMenuBuilder() {
    _.superClass( ContextMenuBuilder, this );
}

InfinniUI.ContextMenuBuilder = ContextMenuBuilder;

_.inherit( ContextMenuBuilder, ContainerBuilder );

_.extend( ContextMenuBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {ContextMenu}
     */
    createElement: function( params ) {
        return new ContextMenu( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ContainerBuilder.prototype.applyMetadata.call( this, params );
    }

} );

//####app/elements/dataGrid/dataGrid.js
/**
 * @augments ListEditorBase
 * @param parent
 * @constructor
 */
function DataGrid( parent ) {
    _.superClass( DataGrid, this, parent );
}

InfinniUI.DataGrid = DataGrid;

_.inherit( DataGrid, ListEditorBase );

/**
 * Возвращает коллекцию колонок таблицы {@see DataGridColumn}
 * @returns {Collection}
 */
DataGrid.prototype.getColumns = function() {
    return this.control.get( 'columns' );
};

/**
 *
 * @param value
 */
DataGrid.prototype.setShowSelectors = function( value ) {
    if( typeof value !== 'undefined' && value !== null ) {
        this.control.set( 'showSelectors', !!value );
    }
};

/**
 * @returns {*}
 */
DataGrid.prototype.getShowSelectors = function() {
    return this.control.get( 'showSelectors' );
};

/**
 *
 * @returns {DataGridRow}
 */
DataGrid.prototype.createRow = function() {
    return new DataGridRow( this );
};

/**
 *
 * @param value
 */
DataGrid.prototype.setEnabled = function( value ) {
    if( typeof value === 'boolean' ) {
        this.control.setEnabled( value );
    }
};

/**
 * @description Устанавливает значение, определяющее виден ли элемент "Выбрать все" в шапке таблицы.
 * @param {boolean} value
 */
DataGrid.prototype.setCheckAllVisible = function( value ) {
    if( typeof value === 'boolean' ) {
        this.control.set( 'checkAllVisible', value );
    }
};

/**
 * @description Возвращает значение, определяющее виден ли элемент "Выбрать все" в шапке таблицы.
 * @returns {boolean}
 */
DataGrid.prototype.getCheckAllVisible = function() {
    return this.control.get( 'checkAllVisible' );
};

/**
 * @description Возвращает состояние элемента "Выбрать все" из шапки таблицы
 * @returns {boolean}
 */
DataGrid.prototype.getCheckAll = function() {
    return this.control.get( 'checkAll' );
};

/**
 * @description Устанавливает состояние элемента "Выбрать все" из шапки таблицы
 * @params {boolean} checkAll
 */
DataGrid.prototype.setCheckAll = function( checkAll ) {
    this.control.set( 'checkAll', checkAll );
};

/**
 * @description Устанавливает обработчик события о том, что изменилось состояние элемента "Выбрать все" в шапке таблицы
 * @param {function} handler
 */
DataGrid.prototype.onCheckAllChanged = function( handler ) {
    this.control.onCheckAllChanged( this.createControlEventHandler( this, handler ) );
};

/**
 *
 * @returns {DataGridControl}
 */
DataGrid.prototype.createControl = function() {
    return new DataGridControl();
};

/**
 *
 * @param handler
 * @returns {*}
 */
DataGrid.prototype.onRowClick = function( handler ) {
    var that = this;
    var callback = function( nativeEventData ) {
        var eventData = that._getHandlingMouseEventData( nativeEventData );
        handler( eventData );
    };
    return this.control.onRowClick( callback );
};

/**
 *
 * @param handler
 * @returns {*}
 */
DataGrid.prototype.onRowDoubleClick = function( handler ) {
    var that = this;
    var callback = function( nativeEventData ) {
        var eventData = that._getHandlingMouseEventData( nativeEventData );
        handler( eventData );
    };
    return this.control.onRowDoubleClick( callback );
};

/**
 * @returns {*}
 */
DataGrid.prototype.getVerticalAlignment = function() {
    return this.control.get( 'verticalAlignment' );
};

/**
 *
 * @param verticalAlignment
 */
DataGrid.prototype.setVerticalAlignment = function( verticalAlignment ) {
    if( typeof verticalAlignment === 'string' ) {
        this.control.set( 'verticalAlignment', verticalAlignment );
    }
};

/**
 * @description dataGrid won't stretch to all free space
 */
DataGrid.prototype.makeUnscrollable = function() {
    this.control.set( 'scroll', false );
};

//####app/elements/dataGrid/dataGridBuilder.js
/**
 * @augments ListEditorBaseBuilder
 * @constructor
 */
function DataGridBuilder() {
    _.superClass( DataGridBuilder, this );
    this.columnBuilder = new DataGridColumnBuilder();
}

InfinniUI.DataGridBuilder = DataGridBuilder;

_.inherit( DataGridBuilder, ListEditorBaseBuilder );

_.extend( DataGridBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {DataGrid}
     */
    createElement: function( params ) {
        return new DataGrid( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ListEditorBaseBuilder.prototype.applyMetadata.call( this, params );

        var metadata = params.metadata;
        var element = params.element;

        element.setShowSelectors( metadata.ShowSelectors );
        element.setCheckAllVisible( metadata.CheckAllVisible );

        this.initBindingToProperty( params, 'VerticalAlignment' );

        var executorBuilderParams = {
            parentView: params.parentView,
            parent: element,
            basePathOfProperty: params.basePathOfProperty
        };

        if( metadata.OnCheckAllChanged ) {
            var onCheckAllChangedExecutor = Executor( metadata.OnCheckAllChanged, params.builder, executorBuilderParams );
            element.onCheckAllChanged( function( context, args ) {
                onCheckAllChangedExecutor( args );
            } );
        } else {
            setDefaultCheckAllBehavior( element );
        }

        if( metadata.OnRowClick ) {
            var onRowClickExecutor = Executor( metadata.OnRowClick, params.builder, executorBuilderParams );
            element.onRowClick( onRowClickExecutor );
        }

        if( metadata.OnRowDoubleClick ) {
            var onRowDoubleClickExecutor = Executor( metadata.OnRowDoubleClick, params.builder, executorBuilderParams );
            element.onRowDoubleClick( onRowDoubleClickExecutor );
        }

        if( typeof metadata.Scroll !== 'undefined' && metadata.Scroll === false ) {
            element.makeUnscrollable();
        }

        this.applyColumnsMetadata( params );
    },

    /**
     *
     * @param params
     */
    applyColumnsMetadata: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var collection = element.getColumns();

        if( Array.isArray( metadata.Columns ) ) {
            var columns = metadata.Columns.map( function( columnMetaData ) {
                return this.buildColumn( columnMetaData, params );
            }, this );

            collection.reset( columns );
        }
    },

    /**
     *
     * @param metadata
     * @param params
     * @returns {DataGridColumn}
     */
    buildColumn: function( metadata, params ) {
        return this.columnBuilder.build( params.element, metadata, params );
    },

    /**
     *
     * @param itemsBinding
     * @param itemPropertyMetadata
     * @param params
     * @returns {Function}
     */
    buildItemProperty: function( itemsBinding, itemPropertyMetadata, params ) {
        var dataGrid = params.element;
        var builder = this;

        return function( context, args ) {
            var row = params.builder.buildType( 'DataGridRow', {}, {
                parent: dataGrid,
                parentView: params.parentView,
                basePathOfProperty: params.basePathOfProperty
            } );

            row.setGrid( dataGrid );

            [ 'RowStyle', 'RowBackground', 'RowForeground', 'RowTextStyle' ]
                .forEach( initBindingToRowProperty.bind( null, row, args.index ) );

            var columns = dataGrid.getColumns();

            var cellElements = columns.toArray().map( function( column, index ) {
                var cellTemplate = column.getCellTemplate();
                var template = cellTemplate( itemsBinding, row );
                var cellEl = template( context, args );

                return cellEl;
            } );
            row.setCellElements( cellElements );
            row.setMultiSelect( dataGrid.getMultiSelect() );
            row.setShowSelectors( dataGrid.getShowSelectors() );
            return row;
        };

        function initBindingToRowProperty( row, index, propertyName ) {
            var basePathOfProperty = params.basePathOfProperty || new BasePathOfProperty( '' );
            var argumentForBuilder = {
                element: row,
                parent: dataGrid,
                builder: params.builder,
                metadata: params.metadata,
                parentView: params.parentView
            };
            argumentForBuilder.basePathOfProperty = basePathOfProperty.buildChild( '', index );

            builder.initBindingToProperty( argumentForBuilder, propertyName );
        }
    }

} );

/**
 * @description Устанавливает поведение по умолчанию для кнопки "Выбрать все"
 * @param {DataGrid} element
 * @constructor
 */
function setDefaultCheckAllBehavior( element ) {
    var checkAll = element.getCheckAll();

    element.onValueChanged( onValueChangedHandler );
    element.onCheckAllChanged( onCheckAllChangedHandler );

    /**
     *
     * @param context
     * @param {Object} event
     * @param {DataGrid} event.source
     * @param {boolean} event.newValue
     * @param {boolean} event.oldValue
     */
    function onValueChangedHandler( context, event ) {
        setCheckAll( _.isEqual( event.newValue, itemsToValue() ) );
    }

    /**
     *
     * @param context
     * @param {Object} event
     * @param {DataGrid} event.source
     * @param {boolean} event.value
     */
    function onCheckAllChangedHandler( context, event ) {
        var state = event.value;

        if( state === checkAll ) {
            return;
        }

        setCheckAll( state );

        var value = state ? itemsToValue() : [];

        element.setValue( value );
    }

    /**
     * @returns {Array}
     */
    function itemsToValue() {
        var valueSelector = element.getValueSelector();
        var items = element.getItems().toArray();

        return items.map( function( item ) {
            return valueSelector( undefined, { value: item } );
        } );
    }

    /**
     *
     * @param state
     */
    function setCheckAll( state ) {
        checkAll = state;
        element.setCheckAll( state );
    }
}

//####app/elements/dataGrid/dataGridColumn.js
/**
 * @augments Backbone.Events
 * @constructor
 */
function DataGridColumn() {
    this._values = Object.create( null );
}

/**
 *
 * @param value
 */
DataGridColumn.prototype.setHeader = function( value ) {
    this.setProperty( 'header', value );
};

/**
 * @returns {*}
 */
DataGridColumn.prototype.getHeader = function() {
    return this.getProperty( 'header' );
};

/**
 *
 * @param value
 */
DataGridColumn.prototype.setCellTemplate = function( value ) {
    this.setProperty( 'cellTemplate', value );
};

/**
 * @returns {*}
 */
DataGridColumn.prototype.getCellTemplate = function() {
    return this.getProperty( 'cellTemplate' );
};

/**
 *
 * @param value
 */
DataGridColumn.prototype.setCellSelector = function( value ) {
    this.setProperty( 'cellSelector', value );
};

/**
 * @returns {*}
 */
DataGridColumn.prototype.getCellSelector = function() {
    return this.getProperty( 'cellSelector' );
};

/**
 *
 * @param value
 */
DataGridColumn.prototype.setHeaderTemplate = function( value ) {
    this.setProperty( 'cellHeaderTemplate', value );
};

/**
 * @returns {*}
 */
DataGridColumn.prototype.getHeaderTemplate = function() {
    return this.getProperty( 'cellHeaderTemplate' );
};

/**
 *
 * @param value
 */
DataGridColumn.prototype.setWidth = function( value ) {
    this.setProperty( 'width', value );
};

/**
 * @returns {*}
 * @param value
 */
DataGridColumn.prototype.getWidth = function( value ) {
    return this.getProperty( 'width' );
};

/**
 *
 * @param value
 */
DataGridColumn.prototype.setSortable = function( value ) {
    this.setProperty( 'sortable', value );
};

/**
 * @returns {*}
 */
DataGridColumn.prototype.getSortable = function() {
    return this.getProperty( 'sortable' );
};

/**
 *
 * @returns {*}
 */
DataGridColumn.prototype.isSortable = function() {
    return this.getSortable();
};

/**
 *
 * @param value
 */
DataGridColumn.prototype.setSortDirection = function( value ) {
    this.setProperty( 'sortDirection', value );
};

/**
 * @returns {*}
 */
DataGridColumn.prototype.getSortDirection = function() {
    return this.getProperty( 'sortDirection' );
};

/**
 *
 * @param handler
 */
DataGridColumn.prototype.setSortFunction = function( handler ) {
    this.setProperty( 'sortFunction', handler );
};

/**
 * @returns {*}
 */
DataGridColumn.prototype.getSortFunction = function() {
    return this.getProperty( 'sortFunction' );
};

/**
 *
 * @param value
 */
DataGridColumn.prototype.setIsHeaderTemplateEmpty = function( value ) {
    this.setProperty( 'isHeaderTemplateEmpty', value );
};

/**
 * @returns {*}
 */
DataGridColumn.prototype.getIsHeaderTemplateEmpty = function() {
    return this.getProperty( 'isHeaderTemplateEmpty' );
};

/**
 *
 * @param handler
 */
DataGridColumn.prototype.onSort = function( handler ) {
    var that = this;
    var callback = function( nativeEventData ) {
        handler( nativeEventData );
    };
    this.on( 'onSort', callback );
};

/**
 * @description Для взаимодействие с DataBinding
 * @param propertyName
 * @param callback
 */
DataGridColumn.prototype.onPropertyChanged = function( propertyName, callback ) {
    this.on( 'change:' + propertyName, callback );
};

/**
 * @description Для взаимодействие с DataBinding
 * @param propertyName
 * @param propertyValue
 */
DataGridColumn.prototype.setProperty = function( propertyName, propertyValue ) {
    var oldValue = this._values[ propertyName ];

    this._values[ propertyName ] = propertyValue;
    if( oldValue !== propertyValue ) {
        this.trigger( 'change:' + propertyName, null, {
            property: propertyName,
            oldValue: oldValue,
            newValue: propertyValue
        } );
    }
};

/**
 *
 * @param propertyName
 * @returns {*}
 */
DataGridColumn.prototype.getProperty = function( propertyName ) {
    return this._values[ propertyName ];
};

_.extend( DataGridColumn.prototype, Backbone.Events );

InfinniUI.DataGridColumn = DataGridColumn;

//####app/elements/dataGrid/dataGridColumnBuilder.js
/**
 *
 * @constructor
 * @mixes displayFormatBuilderMixin
 */
function DataGridColumnBuilder() {
}

_.extend( DataGridColumnBuilder.prototype, displayFormatBuilderMixin );

/**
 *
 * @param {DataGrid} element
 * @param {Object} metadata метаданные колонки грида
 * @param {Object} params
 * @returns {DataGridColumn}
 */
DataGridColumnBuilder.prototype.build = function( element, metadata, params ) {
    var column = new DataGridColumn();

    this
        .buildHeader( column, metadata, params )
        .buildHeaderTemplate( column, metadata, params )
        .buildCellTemplate( column, metadata, params )
        .buildWidth( column, metadata );

    if( metadata.Sortable ) {
        column.setSortable( true );
        column.setSortDirection( null );
        if( metadata.SortedDefault && ( metadata.SortedDefault === 'asc' || metadata.SortedDefault === 'desc' ) ) {
            column.setSortDirection( metadata.SortedDefault );
        }

        if( metadata.SortFunction ) {
            column.onSort( function( args ) {
                new ScriptExecutor( element.getScriptsStorage() ).executeScript( metadata.SortFunction, args );
            } );
        }
    }

    return column;
};

/**
 *
 * @param column
 * @param metadata
 * @returns {DataGridColumnBuilder}
 */
DataGridColumnBuilder.prototype.buildWidth = function( column, metadata ) {
    var width = metadata.Width;

    if( width !== null && typeof width !== 'undefined' ) {
        column.setWidth( width );
    }

    return this;
};

/**
 * @protected
 * @param {DataGridColumn} column
 * @param {Object} metadata
 * @param {Object} params
 * @returns {DataGridColumnBuilder}
 */
DataGridColumnBuilder.prototype.buildHeader = function( column, metadata, params ) {
    if( metadata.Header && typeof metadata.Header === 'object' ) {
        //Header указывает на DataBinding
        var builder = params.builder;
        var binding = builder.buildType( 'PropertyBinding', metadata.Header, {
            parent: params.element,
            parentView: params.parentView,
            basePathOfProperty: params.basePathOfProperty
        } );

        binding.bindElement( column, 'header' );
    } else {
        //Header содержит значение для шаблона
        column.setHeader( metadata.Header );
    }

    return this;
};

/**
 * @protected
 * @param {DataGridColumn} column
 * @param {Object} metadata
 * @param {Object} params
 * @returns {DataGridColumnBuilder}
 */
DataGridColumnBuilder.prototype.buildCellTemplate = function( column, metadata, params ) {
    var cellTemplate;

    if( 'CellTemplate' in metadata ) {
        cellTemplate = this.buildCellTemplateByTemplate( params, metadata.CellTemplate );
    } else if( 'CellFormat' in metadata ) {
        cellTemplate = this.buildCellTemplateByFormat( params, metadata.CellFormat );
    } else if( 'CellSelector' in metadata ) {
        cellTemplate = this.buildCellTemplateBySelector( params, metadata.CellSelector );
    } else {
        var cellProperty = 'CellProperty' in metadata ? metadata.CellProperty : '';
        cellTemplate = this.buildCellTemplateByDefault( params, cellProperty );
    }
    column.setCellTemplate( cellTemplate );

    return this;
};

/**
 *
 * @param params
 * @param cellTemplateMetadata
 * @returns {Function}
 */
DataGridColumnBuilder.prototype.buildCellTemplateByTemplate = function( params, cellTemplateMetadata ) {
    var builder = params.builder;
    var basePathOfProperty = params.basePathOfProperty || new BasePathOfProperty( '' );

    return function( itemsBinding, row ) {
        return function( context, args ) {
            var index = args.index;
            var argumentForBuilder = {
                parent: row,
                parentView: params.parentView
            };
            argumentForBuilder.basePathOfProperty = basePathOfProperty.buildChild( '', index );

            return builder.build( cellTemplateMetadata, argumentForBuilder );
        };
    };
};

/**
 *
 * @param params
 * @param cellFormatMetadata
 * @returns {Function}
 */
DataGridColumnBuilder.prototype.buildCellTemplateByFormat = function( params, cellFormatMetadata ) {
    var format = this.buildDisplayFormat( cellFormatMetadata, params );

    return function( itemsBinding, row ) {
        return function( context, args ) {
            var index = args.index;
            var builder = params.builder;

            var sourceProperty = itemsBinding.getSourceProperty();
            var source = itemsBinding.getSource();
            var binding = new DataBinding();

            sourceProperty = index.toString();
            if( itemsBinding.getSourceProperty() != '' ) {
                sourceProperty = itemsBinding.getSourceProperty() + '.' + sourceProperty;
            }

            var label = builder.buildType( 'Label', {}, {
                parent: row,
                parentView: params.parentView,
                basePathOfProperty: params.basePathOfProperty
            } );

            label.setDisplayFormat( format );

            binding.bindSource( source, sourceProperty );
            binding.bindElement( label, 'value' );

            return label;
        };
    };
};

/**
 *
 * @param params
 * @param cellSelectorMetadata
 * @returns {Function}
 */
DataGridColumnBuilder.prototype.buildCellTemplateBySelector = function( params, cellSelectorMetadata ) {
    var column = params.element;
    var grid = column.parent;

    return function( itemsBinding, row ) {
        return function( context, args ) {

            var label = params.builder.buildType( 'Label', {}, {
                parent: row,
                parentView: params.parentView,
                basePathOfProperty: params.basePathOfProperty
            } );

            var scriptExecutor = new ScriptExecutor( grid.getScriptsStorage() );
            var value = scriptExecutor.executeScript( cellSelectorMetadata, {
                value: args.item
            } );

            label.setText( value );
            return label;
        };
    };
};

/**
 *
 * @param params
 * @param cellProperty
 * @returns {Function}
 */
DataGridColumnBuilder.prototype.buildCellTemplateByDefault = function( params, cellProperty ) {
    return function( itemsBinding, row ) {
        return function( context, args ) {
            var index = args.index;
            var builder = params.builder;

            var sourceProperty;
            var source = itemsBinding.getSource();
            var binding = new DataBinding();

            sourceProperty = index.toString();
            if( itemsBinding.getSourceProperty() != '' ) {
                sourceProperty = itemsBinding.getSourceProperty() + '.' + sourceProperty;
            }

            if( cellProperty != '' ) {
                sourceProperty = sourceProperty + '.' + cellProperty;
            }

            var label = builder.buildType( 'Label', {}, {
                parent: row,
                parentView: params.parentView,
                basePathOfProperty: params.basePathOfProperty
            } );

            binding.bindSource( source, sourceProperty );
            binding.bindElement( label, 'value' );

            return label;
        };
    };
};

/**
 * @protected
 * @param {DataGridColumn} column
 * @param {Object} metadata
 * @param {Object} params
 * @returns {DataGridColumnBuilder}
 */
DataGridColumnBuilder.prototype.buildCellSelector = function( column, metadata, params ) {
    var cellSelector;

    if( metadata.CellSelector ) {
        cellSelector = function( context, args ) {
            var scriptExecutor = new ScriptExecutor( params.parent );
            return scriptExecutor.executeScript( metadata.CellSelector, args );
        };
    } else if( metadata.CellProperty ) {
        var propertyName = metadata.CellProperty;
        cellSelector = function( value ) {
            return InfinniUI.ObjectUtils.getPropertyValue( value, propertyName );
        };
    } else {
        cellSelector = function( value ) {
            return value;
        };
    }

    column.setCellSelector( cellSelector );

    return this;
};

/**
 * @protected
 * @param {DataGridColumn} column
 * @param {Object} metadata
 * @param {Object} params
 * @returns {DataGridColumnBuilder}
 */
DataGridColumnBuilder.prototype.buildHeaderTemplate = function( column, metadata, params ) {
    var headerTemplate;
    var headerTemplateMetadata = metadata.HeaderTemplate;

    if( typeof headerTemplateMetadata === 'undefined' || _.isEmpty( headerTemplateMetadata ) ) {
        headerTemplate = this.buildHeaderTemplateByDefault( params );
        column.setIsHeaderTemplateEmpty( true );
    } else {
        headerTemplate = this.buildHeaderTemplateByMetadata( headerTemplateMetadata, params );
        column.setIsHeaderTemplateEmpty( false );
    }

    column.setHeaderTemplate( headerTemplate );

    return this;
};

/**
 * @protected
 * @param {Object} headerTemplateMetadata
 * @param {Object} params
 * @returns {Function}
 */
DataGridColumnBuilder.prototype.buildHeaderTemplateByMetadata = function( headerTemplateMetadata, params ) {
    var element = params.element;
    var builder = params.builder;

    return function( context, args ) {
        var argumentForBuilder = {
            parent: element,
            parentView: params.parentView
        };

        return builder.build( headerTemplateMetadata, argumentForBuilder );
    };
};

/**
 * @protected
 * @param {Object} params
 * @param {DataGrid} params.element
 * @returns {Function}
 */
DataGridColumnBuilder.prototype.buildHeaderTemplateByDefault = function( params ) {
    var builder = params.builder;

    return function( context, args ) {
        var label = builder.buildType( 'Label', {}, {
            parent: params.element,
            parentView: params.parentView,
            basePathOfProperty: params.basePathOfProperty
        } );

        label.setText( args.value );

        return label;
    };
};

InfinniUI.DataGridColumnBuilder = DataGridColumnBuilder;

//####app/elements/dataGrid/dataGridRowBuilder.js
/**
 * @augments ElementBuilder
 * @constructor
 */
function DataGridRowBuilder() {
    _.superClass( DataGridRowBuilder, this );
}

InfinniUI.DataGridRowBuilder = DataGridRowBuilder;

_.inherit( DataGridRowBuilder, ElementBuilder );

_.extend( DataGridRowBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {DataGridRow}
     */
    createElement: function( params ) {
        return new DataGridRow( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );
    }

} );

//####app/elements/dataNavigation/dataNavigation.js
/**
 * @augments Element
 * @param parent
 * @constructor
 */
function DataNavigation( parent ) {
    _.superClass( DataNavigation, this, parent );
}

InfinniUI.DataNavigation = DataNavigation;

_.inherit( DataNavigation, Element );

_.extend( DataNavigation.prototype, {

    /**
     *
     * @returns {DataNavigationControl}
     */
    createControl: function() {
        return new DataNavigationControl();
    },

    /**
     * @returns {*}
     */
    getDataSource: function() {
        return this.control.get( 'dataSource' );
    },

    /**
     *
     * @param value
     */
    setDataSource: function( value ) {
        this.control.set( 'dataSource', value );
    },

    /**
     * @returns {*}
     */
    getAvailablePageSizes: function() {
        return this.control.get( 'availablePageSizes' );
    },

    /**
     *
     * @param value
     */
    setPageNumber: function( value ) {
        this.control.set( 'pageNumber', value );
    },

    /**
     * @returns {*}
     */
    getPageNumber: function() {
        return this.control.get( 'pageNumber' );
    },

    /**
     *
     * @param handler
     */
    onPageNumberChanged: function( handler ) {
        this.control.onPageNumberChanged( this.createControlEventHandler( this, handler ) );
    },

    /**
     *
     * @param value
     */
    setPageSize: function( value ) {
        this.control.set( 'pageSize', value );
    },

    /**
     * @returns {*}
     */
    getPageSize: function() {
        return this.control.get( 'pageSize' );
    },

    /**
     *
     * @param handler
     */
    onPageSizeChanged: function( handler ) {
        this.control.onPageSizeChanged( this.createControlEventHandler( this, handler ) );
    },

    /**
     * @returns {*}
     */
    getPageCount: function() {
        return this.control.get( 'pageCount' );
    },

    /**
     *
     * @param value
     */
    setPageCount: function( value ) {
        this.control.set( 'pageCount', value );
    },

    /**
     * @returns {*}
     */
    getIsDataReady: function() {
        return this.control.get( 'isDataReady' );
    },

    /**
     *
     * @param value
     */
    setIsDataReady: function( value ) {
        this.control.set( 'isDataReady', value );
    }

} );

//####app/elements/dataNavigation/dataNavigationBuilder.js
/**
 * @augments ElementBuilder
 * @constructor
 */
function DataNavigationBuilder() {
    _.superClass( DataNavigationBuilder, this );
}

InfinniUI.DataNavigationBuilder = DataNavigationBuilder;

_.inherit( DataNavigationBuilder, ElementBuilder );

_.extend( DataNavigationBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {DataNavigation}
     */
    createElement: function( params ) {
        return new DataNavigation( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );

        var element = params.element;
        var metadata = params.metadata;
        var pageSize;
        var that = this;

        if( Array.isArray( metadata.AvailablePageSizes ) ) {
            element.getAvailablePageSizes().reset( metadata.AvailablePageSizes );
        }

        var ds = this.findDataSource( params );
        if( ds ) {
            pageSize = ds.getProperty( '.pageSize' );

            element.setDataSource( ds );
            element.setPageSize( pageSize );

            ds.onItemsUpdated( function() {
                that.onDataUpdated( element, ds );
            } );

            if( ds.isDataReady() ) {
                this.onDataUpdated( element, ds );
            }

            element.onPageNumberChanged( function( context, message ) {
                ds.setProperty( '.pageNumber', message.value );
            } );

            element.onPageSizeChanged( function( context, message ) {
                ds.setProperty( '.pageSize', message.value );
            } );
        } else {
            console.error( 'DataSource not found' );
        }
    },

    /**
     *
     * @param element
     * @param dataSource
     */
    onDataUpdated: function( element, dataSource ) {
        var dsTotalCount = dataSource.getProperty( '.totalCount' );
        var pageSize = dataSource.getProperty( '.pageSize' );
        var pageNumber = dataSource.getProperty( '.pageNumber' );
        var pageCount;

        if( typeof dsTotalCount == 'number' ) {
            pageCount = Math.ceil( dsTotalCount / pageSize );
            element.setPageCount( pageCount );
        }

        element.setPageNumber( pageNumber );
        element.setIsDataReady( true );
    },

    /**
     *
     * @param params
     * @returns {*}
     */
    findDataSource: function( params ) {
        var name = params.metadata.DataSource;
        var view = params.parentView;
        var context;
        var dataSource;

        if( name && view ) {
            context = view.getContext();
            dataSource = context.dataSources[ name ];
        }

        return dataSource;
    }

} );

//####app/elements/divider/divider.js
/**
 *
 * @param parent
 * @constructor
 * @argument Element
 */
function Divider( parent ) {
    _.superClass( Divider, this, parent );
}

InfinniUI.Divider = Divider;

_.inherit( Divider, Element );

/**
 *
 * @param parent
 * @returns {DividerControl}
 */
Divider.prototype.createControl = function( parent ) {
    return new DividerControl( parent );
};

//####app/elements/divider/dividerBuilder.js
/**
 *
 * @constructor
 * @arguments ElementBuilder
 */
function DividerBuilder() {
    _.superClass( DividerBuilder, this );
}

InfinniUI.DividerBuilder = DividerBuilder;

_.inherit( DividerBuilder, ElementBuilder );

/**
 *
 * @param params
 * @returns {Divider}
 */
DividerBuilder.prototype.createElement = function( params ) {
    return new Divider( params.parent );
};

/**
 *
 * @param params
 */
DividerBuilder.prototype.applyMetadata = function( params ) {
    ElementBuilder.prototype.applyMetadata.call( this, params );
};


//####app/elements/extensionPanel/extensionPanel.js
/**
 *
 * @param parent
 * @constructor
 */
function ExtensionPanel( parent ) {
    _.superClass( ExtensionPanel, this, parent );
}

InfinniUI.ExtensionPanel = ExtensionPanel;

_.inherit( ExtensionPanel, Container );

_.extend( ExtensionPanel.prototype, {

    /**
     *
     * @returns {ExtensionPanelControl}
     */
    createControl: function() {
        var control = new ExtensionPanelControl();
        return control;
    },

    /**
     * @returns {*}
     * @param extensionName
     */
    setExtensionName: function( extensionName ) {
        return this.control.set( 'extensionName', extensionName );
    },

    /**
     * @returns {*}
     * @param parameters
     */
    setParameters: function( parameters ) {
        return this.control.set( 'parameters', parameters );
    },

    /**
     * @returns {*}
     */
    getParameters: function() {
        return this.control.get( 'parameters' );
    },

    /**
     *
     * @param context
     */
    setContext: function( context ) {
        this.control.set( 'context', context );
    },

    /**
     *
     * @param builder
     */
    setBuilder: function( builder ) {
        this.control.set( 'builder', builder );
    }

} );

//####app/elements/extensionPanel/extensionPanelBuilder.js
/**
 * @augments ContainerBuilder
 * @constructor
 */
function ExtensionPanelBuilder() {
}

InfinniUI.ExtensionPanelBuilder = ExtensionPanelBuilder;

_.inherit( ExtensionPanelBuilder, ContainerBuilder );

_.extend( ExtensionPanelBuilder.prototype, {

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var parentView = params.parentView;
        var builder = params.builder;

        ContainerBuilder.prototype.applyMetadata.call( this, params );

        element.setExtensionName( metadata[ 'ExtensionName' ] );

        var parameters = {};
        _.each( metadata.Parameters, function( parameterMetadata ) {
            var param = builder.buildType( 'Parameter', parameterMetadata, {
                parentView: parentView,
                basePathOfProperty: params.basePathOfProperty
            } );
            parameters[ param.getName() ] = param;
        } );

        element.setParameters( parameters );
        element.setContext( parentView.getContext() );
        element.setBuilder( builder );
    },

    /**
     *
     * @param params
     * @returns {ExtensionPanel}
     */
    createElement: function( params ) {
        var element = new ExtensionPanel( params.parent );

        return element;
    }

} );

//####app/elements/fileBox/fileBox.js
/**
 *
 * @param parent
 * @augments Element
 * @mixes editorBaseMixin
 * @mixes labelTextElementMixin
 * @constructor
 */
function FileBox( parent ) {
    _.superClass( FileBox, this, parent );

    this.initialize_editorBase();
}

InfinniUI.FileBox = FileBox;

_.inherit( FileBox, Element );

_.extend( FileBox.prototype, {

    /**
     * @returns {*}
     */
    getFile: function() {
        return this.control.get( 'file' );
    },

    /**
     *
     * @returns {FileBoxControl}
     */
    createControl: function() {
        return new FileBoxControl();
    },

    /**
     * @description Возвращает максимальный размер данных в байтах
     * @returns {number}
     */
    getMaxSize: function() {
        return this.control.get( 'maxSize' );
    },

    /**
     * @description Устанавливает максимальный размер данных в байтах
     * @param {number} value
     */
    setMaxSize: function( value ) {
        this.control.set( 'maxSize', value );
    },

    /**
     * @description Возвращает коллекцию допустимых форматов данных
     * @returns {Collection}
     */
    getAcceptTypes: function() {
        return this.control.get( 'acceptTypes' );
    },


    /**
     *  Методы, не описанные в документации
     */


    /**
     * @description Недокументированный!
     * @param {Array} types
     */
    setAcceptTypes: function( types ) {
        var collection = this.getAcceptTypes();
        if ( Array.isArray( types ) ) {
            collection.set( types );
        }
    },

    // Недокументированные методы
    /**
     *
     * @param value
     */
    setFile: function( value ) {
        this.control.set( 'file', value );
    },

    /**
     *
     * @param value
     * @returns {FileBox}
     */
    setFileName: function( value ) {
        this.control.set( 'fileName', value );
        return this;
    },

    /**
     *
     * @param value
     * @returns {FileBox}
     */
    setFileSize: function( value ) {
        this.control.set( 'fileSize', value );
        return this;
    },

    /**
     *
     * @param value
     * @returns {FileBox}
     */
    setFileTime: function( value ) {
        this.control.set( 'fileTime', value );
        return this;
    },

    /**
     *
     * @param value
     * @returns {FileBox}
     */
    setFileType: function( value ) {
        this.control.set( 'fileType', value );
        return this;
    }

}, editorBaseMixin, labelTextElementMixin );

//####app/elements/fileBox/fileBoxBuilder.js
/**
 *
 * @constructor
 * @augments ElementBuilder
 * @mixes editorBaseBuilderMixin
 */
function FileBoxBuilder() {
    _.superClass( FileBoxBuilder, this );
    this.initialize_editorBaseBuilder();
}

InfinniUI.FileBoxBuilder = FileBoxBuilder;

_.inherit( FileBoxBuilder, ElementBuilder );

_.extend( FileBoxBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {FileBox}
     */
    createElement: function( params ) {
        return new FileBox( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );

        var element = params.element;
        var metadata = params.metadata;

        if( Array.isArray( metadata.AcceptTypes ) ) {
            element.setAcceptTypes( metadata.AcceptTypes );
        }

        if( metadata.MaxSize !== null && typeof metadata.MaxSize !== 'undefined' ) {
            element.setMaxSize( metadata.MaxSize );
        }

        this.initBindingToProperty( params, 'LabelText' );
        this.resolveExpressionInText( params, 'LabelText' );
        this.initBindingToProperty( params, 'LabelTextTitle' );

        // Привязка данных односторонняя т.к.:
        // 1. по значению из источника данных - сформировать URL изображения.
        // 2. при выборе в элементе файла на загрузку - добавить выбранный файл в очередь на загрузку

        var converter = new FileBoxValueConverter( element );
        var data = this.applyMetadata_editorBaseBuilder( params, {
            mode: InfinniUI.BindingModes.toElement,
            converter: converter
        } );
        var binding = data.valueBinding;

        if( binding ) {
            var ds = binding.getSource();

            params.element.onPropertyChanged( 'file', function( context, args ) {
                var file = args.newValue;

                if( file === null ) {
                    ds.setProperty( binding.getSourceProperty(), null );
                } else if( file instanceof File ) {
                    ds.setProperty( binding.getSourceProperty(), args.newValue );
                }
            } );
        }
    }

}, editorBaseBuilderMixin );

//####app/elements/fileBox/fileBoxValueConverter.js
/**
 *
 * @param element
 * @constructor
 */
function FileBoxValueConverter( element ) {
    this._element = element;
}

InfinniUI.FileBoxValueConverter = FileBoxValueConverter;

/**
 *
 * @param context
 * @param args
 * @returns {*}
 */
FileBoxValueConverter.prototype.toElement = function( context, args ) {
    var value = args.value;
    var binding = args.binding;
    var ds = binding.getSource();
    var fileProvider = ds.getFileProvider();
    var url = null;
    //Формируем ссылку для получения файла

    if( value ) {
        if( fileProvider && InfinniUI.BlobUtils.isFileInfo( value ) ) {
            url = fileProvider.getFileUrl( null, null, InfinniUI.BlobUtils.getContentId( value ) );
            this._element
                .setFileName( InfinniUI.BlobUtils.getName( value ) )
                .setFileSize( InfinniUI.BlobUtils.getSize( value ) )
                .setFileTime( InfinniUI.BlobUtils.getTime( value ) )
                .setFileType( InfinniUI.BlobUtils.getType( value ) );

        } else if( typeof value === 'string' ) {
            //@TODO Добавить проверку на валидность URI
            url = value;
        } else {
            //Native File instance from FileAPI
            url = value;
        }
    }

    return url;
};

//####app/elements/form/form.js
/**
 *
 * @param parent
 * @constructor
 * @augment StackPanel
 */
function Form( parent ) {
    _.superClass( Form, this, parent );
}

InfinniUI.Form = Form;

_.inherit( Form, StackPanel );

/**
 *
 * @param parent
 * @returns {FormControl}
 */
Form.prototype.createControl = function( parent ) {
    return new FormControl( parent );
};

/**
 *
 * @param handler
 * @returns {*}
 */
Form.prototype.onSubmit = function( handler ) {
    var callback = function( nativeEventData ) {
        handler( nativeEventData );
    };

    return this.control.onSubmit( callback );
};

/**
 *
 * @param func
 */
Form.prototype.setSubmitFunction = function( func ) {
    this.control.setSubmitFunction( func );
};

/**
 *
 * @returns {*}
 */
Form.prototype.getSubmitFunction = function() {
    return this.control.getSubmitFunction();
};

/**
 *
 * @param method
 */
Form.prototype.setMethod = function( method ) {
    this.control.setMethod( method );
};

/**
 *
 * @returns {*}
 */
Form.prototype.getMethod = function() {
    return this.control.getMethod();
};

/**
 *
 * @param action
 */
Form.prototype.setAction = function( action ) {
    this.control.setAction( action );
};

/**
 *
 * @returns {*}
 */
Form.prototype.getAction = function() {
    return this.control.getAction();
};

//####app/elements/form/formBuilder.js
/**
 *
 * @constructor
 * @augments StackPanelBuilder
 */
function FormBuilder() {
    _.superClass( FormBuilder, this );
}

InfinniUI.FormBuilder = FormBuilder;

_.inherit( FormBuilder, StackPanelBuilder );

_.extend( FormBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {Form}
     */
    createElement: function( params ) {
        return new Form( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        var element = params.element;
        var metadata = params.metadata;
        StackPanelBuilder.prototype.applyMetadata.call( this, params );

        if( metadata.OnSubmit ) {
            var executorBuilderParams = {
                parentView: params.parentView,
                parent: element,
                basePathOfProperty: params.basePathOfProperty
            };
            var onSubmitExecutor = Executor( metadata.OnSubmit, params.builder, executorBuilderParams );
            element.onSubmit( onSubmitExecutor );
        }

        if( metadata.Method ) {
            element.setMethod( metadata.Method );
        }

        if( metadata.Action ) {
            element.setAction( metadata.Action );
        }
    }

} );

//####app/elements/frame/frame.js
/**
 *
 * @constructor
 * @augments Element
 * @mixes editorBaseMixin
 */
function Frame() {
    _.superClass( Frame, this );
    this.initialize_editorBase();
}

InfinniUI.Frame = Frame;

_.inherit( Frame, Element );

_.extend( Frame.prototype, {

    /**
     *
     * @returns {FrameControl}
     */
    createControl: function() {
        return new FrameControl();
    }

}, editorBaseMixin );

//####app/elements/frame/frameBuilder.js
/**
 *
 * @constructor
 * @augments TextEditorBaseBuilder
 * @mixes displayFormatBuilderMixin
 * @mixes editorBaseBuilderMixin
 */
function FrameBuilder() {
    _.superClass( TextEditorBaseBuilder, this );
    this.initialize_editorBaseBuilder();
}

InfinniUI.FrameBuilder = FrameBuilder;

_.inherit( FrameBuilder, TextEditorBaseBuilder );

_.extend( FrameBuilder.prototype, {

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        var element = params.element;
        ElementBuilder.prototype.applyMetadata.call( this, params );
        this.applyMetadata_editorBaseBuilder( params );
    },

    /**
     *
     * @param params
     * @returns {Frame}
     */
    createElement: function( params ) {
        var element = new Frame( params.parent );

        return element;
    }

}, editorBaseBuilderMixin );

//####app/elements/gridPanel/gridPanel.js
/**
 * @param parent
 * @constructor
 * @augments Container
 */
function GridPanel( parent ) {
    _.superClass( GridPanel, this, parent );
}

InfinniUI.GridPanel = GridPanel;

_.inherit( GridPanel, Container );

_.extend( GridPanel.prototype, {

    /**
     *
     * @returns {GridPanelControl}
     */
    createControl: function() {
        return new GridPanelControl();
    }

} );

//####app/elements/gridPanel/gridPanelBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 */
function GridPanelBuilder() {
    _.superClass( GridPanelBuilder, this );
}

InfinniUI.GridPanelBuilder = GridPanelBuilder;

_.inherit( GridPanelBuilder, ContainerBuilder );

_.extend( GridPanelBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {GridPanel}
     */
    createElement: function( params ) {
        return new GridPanel( params.parent );
    },

    /**
     * @param {Object} params
     * @param {TablePanel} params.element
     * @param {Object} params.metadata
     */
    applyMetadata: function( params ) {
        ContainerBuilder.prototype.applyMetadata.call( this, params );
    }

} );

//####app/elements/icon/icon.js
/**
 *
 * @param parent
 * @constructor
 */
function Icon( parent ) {
    _.superClass( Icon, this, parent );
}

InfinniUI.Icon = Icon;

_.inherit( Icon, Element );

_.extend( Icon.prototype, {

    /**
     *
     * @returns {IconControl}
     */
    createControl: function() {
        return new IconControl();
    },

    /**
     *
     * @param value
     */
    setValue: function( value ) {
        this.control.set( 'value', value );
    },

    /**
     * @returns {*}
     */
    getValue: function() {
        return this.control.get( 'value' );
    },

    /**
     * @returns {*}
     */
    getSize: function() {
        return this.control.get( 'size' );
    },

    /**
     *
     * @param size
     */
    setSize: function( size ) {
        if( typeof size === 'string' ) {
            this.control.set( 'size', size );
        }
    },

    /**
     *
     */
    onValueChanged: function() {
    }

} );

//####app/elements/icon/iconBuilder.js
/**
 * @augments ElementBuilder
 * @constructor
 */
function IconBuilder() {
    _.superClass( ButtonBuilder, this );
}

InfinniUI.IconBuilder = IconBuilder;

_.inherit( IconBuilder, ElementBuilder );

_.extend( IconBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {Icon}
     */
    createElement: function( params ) {
        return new Icon( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );

        this.initBindingToProperty( params, 'Value' );
        this.initBindingToProperty( params, 'Size' );
    }

} );

//####app/elements/imageBox/imageBox.js
/**
 *
 * @param parent
 * @augments Element
 * @mixes editorBaseMixin
 * @constructor
 */
function ImageBox( parent ) {
    _.superClass( ImageBox, this, parent );

    this.initialize_editorBase();
}

InfinniUI.ImageBox = ImageBox;

_.inherit( ImageBox, Element );

_.extend( ImageBox.prototype, {

    /**
     * @returns {*}
     */
    getFile: function() {
        return this.control.get( 'file' );
    },

    /**
     *
     * @returns {ImageBoxControl}
     */
    createControl: function() {
        return new ImageBoxControl();
    },

    /**
     * @description Возвращает максимальный размер данных в байтах
     * @returns {number}
     */
    getMaxSize: function() {
        return this.control.get( 'maxSize' );
    },

    /**
     * @description Устанавливает максимальный размер данных в байтах
     * @param {number} value
     */
    setMaxSize: function( value ) {
        this.control.set( 'maxSize', value );
    },

    /**
     * @description Возвращает коллекцию допустимых форматов данных
     * @returns {Collection}
     */
    getAcceptTypes: function() {
        return this.control.get( 'acceptTypes' );
    },

    /**
     * @description Недокументированный!
     * @param {Array} types
     */
    setAcceptTypes: function( types ) {
        var collection = this.getAcceptTypes();
        if( Array.isArray( types ) ) {
            collection.set( types );
        }
    }

}, editorBaseMixin );

//####app/elements/imageBox/imageBoxBuilder.js
/**
 *
 * @constructor
 * @augments ElementBuilder
 * @mixes editorBaseBuilderMixin
 */
function ImageBoxBuilder() {
    _.superClass( ImageBoxBuilder, this );
    this.initialize_editorBaseBuilder();
}

InfinniUI.ImageBoxBuilder = ImageBoxBuilder;

_.inherit( ImageBoxBuilder, ElementBuilder );

_.extend( ImageBoxBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {ImageBox}
     */
    createElement: function( params ) {
        return new ImageBox( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );

        var element = params.element;
        var metadata = params.metadata;

        if( Array.isArray( metadata.AcceptTypes ) ) {
            element.setAcceptTypes( metadata.AcceptTypes );
        }

        if( metadata.MaxSize !== null && typeof metadata.MaxSize !== 'undefined' ) {
            element.setMaxSize( metadata.MaxSize );
        }

        // Привязка данных односторонняя т.к.:
        // 1. по значению из источника данных - сформировать URL изображения.
        // 2. при выборе в элементе файла на загрузку - добавить выбранный файл в очередь на загрузку

        var converter = new ImageBoxValueConverter( element );
        var data = this.applyMetadata_editorBaseBuilder( params, {
            mode: InfinniUI.BindingModes.toElement,
            converter: converter
        } );
        var binding = data.valueBinding;

        if( binding ) {
            var ds = binding.getSource();

            params.element.onPropertyChanged( 'file', function( context, args ) {
                var file = args.newValue;

                if( file instanceof File || file === null ) {
                    ds.setProperty( binding.getSourceProperty(), args.newValue );
                }
            } );
        }

    }

}, editorBaseBuilderMixin );

//####app/elements/imageBox/imageBoxValueConverter.js
/**
 *
 * @param element
 * @constructor
 */
function ImageBoxValueConverter( element ) {
    this._element = element;
}

/**
 *
 * @param context
 * @param args
 * @returns {*}
 */
ImageBoxValueConverter.prototype.toElement = function( context, args ) {
    var value = args.value;
    var binding = args.binding;
    var ds = binding.getSource();
    var fileProvider = ds.getFileProvider();
    var url = null;
    //Формируем URL изображения

    if ( value ) {
        if ( fileProvider && InfinniUI.BlobUtils.isFileInfo( value ) ) {
            url = fileProvider.getFileUrl( null, null, InfinniUI.BlobUtils.getContentId( value ) );
        } else if ( typeof value === 'string' ) {
            //@TODO Добавить проверку на валидность URI
            url = value;
        } else {
            //Native File instance from FileAPI
            url = value;
        }
    }
    return url;
};

InfinniUI.ImageBoxValueConverter = ImageBoxValueConverter;

//####app/elements/indeterminateCheckBox/indeterminateCheckBox.js
/**
 *
 * @param parent
 * @constructor
 * @augment CheckBox
 * @mixes editorBaseMixin
 */
function IndeterminateCheckBox( parent ) {
    _.superClass( IndeterminateCheckBox, this, parent );
    this.initialize_editorBase();
}

InfinniUI.IndeterminateCheckBox = IndeterminateCheckBox;

_.inherit( IndeterminateCheckBox, CheckBox );

_.extend( IndeterminateCheckBox.prototype, {

    /**
     *
     * @param parent
     * @returns {IndeterminateCheckBoxControl}
     */
    createControl: function( parent ) {
        return new IndeterminateCheckBoxControl( parent );
    }

}, editorBaseMixin );

//####app/elements/indeterminateCheckBox/indeterminateCheckBoxBuilder.js
/**
 *
 * @constructor
 * @augments CheckBoxBuilder
 */
function IndeterminateCheckBoxBuilder() {
    _.superClass( IndeterminateCheckBoxBuilder, this );
    this.initialize_editorBaseBuilder();
}

InfinniUI.IndeterminateCheckBoxBuilder = IndeterminateCheckBoxBuilder;

_.inherit( IndeterminateCheckBoxBuilder, CheckBoxBuilder );

_.extend( IndeterminateCheckBoxBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {IndeterminateCheckBox}
     */
    createElement: function( params ) {
        return new IndeterminateCheckBox( params.parent );
    }

} );


//####app/elements/label/label.js
/**
 *
 * @param parent
 * @param viewMode
 * @constructor
 * @mixes editorBaseMixin
 * @augments Element
 */
function Label( parent, viewMode ) {
    _.superClass( Label, this, parent, viewMode );
    this.initialize_editorBase();
}

InfinniUI.Label = Label;

_.inherit( Label, Element );

_.extend( Label.prototype, {

    /**
     *
     * @returns {LabelControl}
     */
    createControl: function() {
        return new LabelControl();
    },

    /**
     *
     * @param value
     */
    setTextWrapping: function( value ) {
        if( typeof value === 'boolean' ) {
            this.control.set( 'textWrapping', value );
        }
    },

    /**
     * @returns {*}
     */
    getTextWrapping: function() {
        return this.control.get( 'textWrapping' );
    },

    /**
     *
     * @param value
     */
    setTextTrimming: function( value ) {
        if( typeof value === 'boolean' ) {
            this.control.set( 'textTrimming', value );
        }
    },

    /**
     * @returns {*}
     */
    getTextTrimming: function() {
        return this.control.get( 'textTrimming' );
    },

    /**
     * @returns {*}
     */
    getDisplayFormat: function() {
        return this.control.get( 'displayFormat' );
    },

    /**
     * @param value
     * @returns {*}
     */
    setDisplayFormat: function( value ) {
        return this.control.set( 'displayFormat', value );
    },

    /**
     * @returns {*}
     */
    getDisplayValue: function() {
        return this.control.getDisplayValue();
    },

    /**
     * @description Возвращает режим отображения HTML разметки
     * @returns {Boolean}
     */
    getEscapeHtml: function() {
        return this.control.get( 'escapeHtml' );
    },

    /**
     * @description Устанавливает режим отображения HTML разметки
     * @param {Boolean} value
     */
    setEscapeHtml: function( value ) {
        if( typeof value === 'boolean' ) {
            this.control.set( 'escapeHtml', value );
        }
    }

}, editorBaseMixin );

//####app/elements/label/labelBuilder.js
/**
 *
 * @constructor
 * @augments ElementBuilder
 * @mixes displayFormatBuilderMixin
 * @mixes editorBaseBuilderMixin
 */
function LabelBuilder() {
    _.superClass( TextEditorBaseBuilder, this );
    this.initialize_editorBaseBuilder();
}

InfinniUI.LabelBuilder = LabelBuilder;

_.inherit( LabelBuilder, ElementBuilder );

_.extend( LabelBuilder.prototype, {

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        var element = params.element;

        ElementBuilder.prototype.applyMetadata.call( this, params );
        this.applyMetadata_editorBaseBuilder( params );

        element.setTextWrapping( params.metadata.TextWrapping );
        element.setTextTrimming( params.metadata.TextTrimming );
        element.setEscapeHtml( params.metadata.EscapeHtml );

        this.initDisplayFormat( params );
    },

    /**
     *
     * @param params
     */
    initDisplayFormat: function( params ) {
        var metadata = params.metadata;
        var format = this.buildDisplayFormat( metadata.DisplayFormat, params );

        params.element.setDisplayFormat( format );
    },

    /**
     *
     * @param params
     * @returns {Label}
     */
    createElement: function( params ) {
        var label = new Label( params.parent, params.metadata[ 'ViewMode' ] );

        label.getHeight = function() {
            return 34;
        };

        return label;
    }

}, editorBaseBuilderMixin, displayFormatBuilderMixin );

//####app/elements/link/link.js
/**
 * @param parent
 * @augments Button
 * @constructor
 */
function Link( parent ) {
    _.superClass( Link, this, parent );
}

InfinniUI.Link = Link;

_.inherit( Link, Button );

/**
 *
 * @returns {LinkElementControl}
 */
Link.prototype.createControl = function() {
    return new LinkElementControl();
};

/**
 *
 * @param value
 */
Link.prototype.setHref = function( value ) {
    this.control.set( 'href', value );
};

/**
 * @returns {*}
 */
Link.prototype.getHref = function() {
    return this.control.get( 'href' );
};

/**
 *
 * @param value
 */
Link.prototype.setTarget = function( value ) {
    this.control.set( 'target', value );
};

/**
 * @returns {*}
 */
Link.prototype.getTarget = function() {
    return this.control.get( 'target' );
};

//####app/elements/link/linkBuilder.js
/**
 * @augments ButtonBuilder
 * @mixes routerServiceMixin
 * @constructor
 */
function LinkBuilder() {
    _.superClass( LinkBuilder, this );
}

InfinniUI.LinkBuilder = LinkBuilder;

_.inherit( LinkBuilder, ButtonBuilder );

_.extend( LinkBuilder.prototype, routerServiceMixin, {

    /**
     *
     * @param params
     * @returns {Link}
     */
    createElement: function( params ) {
        return new Link( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ButtonBuilder.prototype.applyMetadata.call( this, params );

        var metadata = params.metadata;
        var element = params.element;

        if( metadata.Href && typeof metadata.Href === 'string' ) {
            element.setHref( metadata.Href );
        } else if( metadata.Href ) {
            var pathName = metadata.Href.Name;
            var hrefParams = metadata.Href.Params;
            var query = metadata.Href.Query;
            var href = routerService.getLinkByName( pathName, 'no' );
            var newHref = href;

            element.setHref( newHref );

            if( hrefParams ) {
                for( var i = 0, ii = hrefParams.length; i < ii; i += 1 ) {
                    if( typeof hrefParams[ i ].Value === 'string' ) {
                        if( element.getHref() !== newHref ) {
                            newHref = element.getHref();
                        }
                        newHref = this.replaceParamsInHref( newHref, hrefParams[ i ].Name, hrefParams[ i ].Value );
                        element.setHref( newHref );
                    } else {
                        this.bindParams( params, hrefParams[ i ].Name, hrefParams[ i ].Value, newHref );
                    }
                }
            }
            if( query ) {
                for( var j = 0, jj = query.length; j < jj; j += 1 ) {
                    if( typeof query[ j ].Value === 'string' ) {
                        if( element.getHref() !== newHref ) {
                            newHref = element.getHref();
                        }
                        newHref = this.replaceParamsInQuery( newHref, query[ j ].Name, query[ j ].Value );
                        element.setHref( newHref );
                    } else {
                        this.bindQuery( params, query[ j ].Name, query[ j ].Value, newHref );
                    }
                }
            }
        }

        if( metadata.Target ) {
            element.setTarget( metadata.Target );
        }
    }

} );

//####app/elements/menuBar/menuBar.js
/**
 * @param parent
 * @constructor
 * @augments Container
 */
function MenuBar( parent ) {
    _.superClass( MenuBar, this, parent );
}

InfinniUI.MenuBar = MenuBar;

_.inherit( MenuBar, Container );

_.extend( MenuBar.prototype, {

    /**
     *
     * @param viewMode
     * @returns {MenuBarControl}
     */
    createControl: function( viewMode ) {
        return new MenuBarControl( viewMode );
    },

    /**
     * @description Устанавливает/снимает выделение элемента меню с заданным именем
     * @param {String|*} name Имя выделяемого элемента меню
     */
    highlightItem: function( name ) {
        ( function highlight( element ) {
            var childElements = element.getChildElements();
            childElements.forEach( function( childElement ) {
                var highlight = typeof name === 'string' && childElement.getName() === name;
                var control = childElement.control;

                if( control ) {
                    control.setHighlight( highlight );
                }
            } );
        } )( this );
    }

} );

//####app/elements/menuBar/menuBarBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 */
function MenuBarBuilder() {
    _.superClass( MenuBarBuilder, this );
}

InfinniUI.MenuBarBuilder = MenuBarBuilder;

_.inherit( MenuBarBuilder, ContainerBuilder );

_.extend( MenuBarBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {MenuBar}
     */
    createElement: function( params ) {
        return new MenuBar( params.parent );
    }

} );

//####app/elements/numericBox/numericBox.js
/**
 *
 * @param parent
 * @constructor
 * @augments TextEditorBase
 */
function NumericBox( parent ) {
    _.superClass( NumericBox, this, parent );
}

InfinniUI.NumericBox = NumericBox;

_.inherit( NumericBox, TextEditorBase );

/**
 *
 * @param parent
 * @returns {NumericBoxControl}
 */
NumericBox.prototype.createControl = function( parent ) {
    return new NumericBoxControl( parent );
};

/**
 * @returns {*}
 */
NumericBox.prototype.getMinValue = function() {
    return this.control.get( 'minValue' );
};

/**
 *
 * @param value
 */
NumericBox.prototype.setMinValue = function( value ) {
    this.control.set( 'minValue', value );
};

/**
 * @returns {*}
 */
NumericBox.prototype.getMaxValue = function() {
    return this.control.get( 'maxValue' );
};

/**
 *
 * @param value
 */
NumericBox.prototype.setMaxValue = function( value ) {
    this.control.set( 'maxValue', value );
};

/**
 * @returns {*}
 */
NumericBox.prototype.getIncrement = function() {
    return this.control.get( 'increment' );
};

/**
 *
 * @param value
 */
NumericBox.prototype.setIncrement = function( value ) {
    this.control.set( 'increment', value );
};

/**
 * @public
 * @description Устанавливает начальное значение
 * @param {Number} value
 */
NumericBox.prototype.setStartValue = function( value ) {
    this.control.set( 'startValue', value );
};

/**
 *
 * @param value
 * @description Конвертирует значение в число
 * @return {Number | null}
 */
NumericBox.prototype.convertValue = function( value ) {
    var val = ( value === null || value === '' || typeof value === 'undefined' ) ? null : +value;

    return typeof val === 'number' ? val : null;
};

/**
 * @public
 * @description Возвращает начальное значение
 * @returns {Number}
 */
NumericBox.prototype.getStartValue = function() {
    return this.control.get( 'startValue' );
};

/**
 * @public
 * @param {Boolean} value
 * @description Устанавливает необходимость валидации вводимого значения
 */
NumericBox.prototype.setIsNeedValidation = function( value ) {
    this.control.set( 'isNeedValidation', value );
};

//####app/elements/numericBox/numericBoxBuilder.js
/**
 *
 * @constructor
 * @augments TextEditorBaseBuilder
 */
function NumericBoxBuilder() {
    _.superClass( NumericBoxBuilder, this );
}

InfinniUI.NumericBoxBuilder = NumericBoxBuilder;

_.inherit( NumericBoxBuilder, TextEditorBaseBuilder );

/**
 *
 * @param params
 * @returns {NumericBox}
 */
NumericBoxBuilder.prototype.createElement = function( params ) {
    return new NumericBox( params.parent );
};

/**
 *
 * @param params
 */
NumericBoxBuilder.prototype.applyMetadata = function( params ) {
    TextEditorBaseBuilder.prototype.applyMetadata.call( this, params );

    var element = params.element;
    var metadata = params.metadata;

    element.setMinValue( metadata.MinValue );
    element.setMaxValue( metadata.MaxValue );
    element.setIncrement( metadata.Increment );
    element.setStartValue( metadata.StartValue );

    if( typeof metadata.MinValue !== 'undefined' || typeof metadata.MaxValue !== 'undefined' ) {
        element.setIsNeedValidation( true );
    }
};


//####app/elements/panel/panel.js
/**
 * @param parent
 * @constructor
 * @augments Container
 */
function Panel( parent ) {
    _.superClass( Panel, this, parent );
}

InfinniUI.Panel = Panel;

_.inherit( Panel, Container );

/**
 * @description Возвращает значение, определяющее, свернута ли панель
 * @returns {boolean}
 */
Panel.prototype.getCollapsible = function() {
    return this.control.get( 'collapsible' );
};

/**
 * @description Устанавливает значение, определяющее, разрешено ли сворачивание панели
 * @param {boolean} value
 */
Panel.prototype.setCollapsible = function( value ) {
    if ( typeof value !== 'undefined' ) {
        this.control.set( 'collapsible', !!value );
    }
};

/**
 * @description Возвращает значение, определяющее, свернута ли панель
 * @returns {boolean}
 */
Panel.prototype.getCollapsed = function() {
    return this.control.get( 'collapsed' );
};

/**
 * @description Устанавливает значение, определяющее, свернута ли панель
 * @param {boolean} value
 */
Panel.prototype.setCollapsed = function( value ) {
    if ( typeof value !== 'undefined' ) {
        this.control.set( 'collapsed', !!value );
    }
};

/**
 * @description Возвращает функцию шаблонизации заголовка панели
 * @returns {Function}
 */
Panel.prototype.getHeaderTemplate = function() {
    return this.control.get( 'headerTemplate' );
};

/**
 * @description Устанавливает функцию шаблонизации заголовка панели
 * @param {Function} value
 */
Panel.prototype.setHeaderTemplate = function( value ) {
    this.control.set( 'headerTemplate', value );
};

/**
 * @description Возвращает заголовок панели
 * @returns {*}
 */
Panel.prototype.getHeader = function() {
    return this.control.get( 'header' );
};

/**
 * @description Устанавливает заголовок панели
 * @param {*} value
 */
Panel.prototype.setHeader = function( value ) {
    this.control.set( 'header', value );
};

/**
 * @description Возвращает элемент для открытия панели
 * @returns {string}
 */
Panel.prototype.getCollapseChanger = function() {
    return this.control.get( 'collapseChanger' );
};

/**
 * @description Устанавливает элемент при клике на который раскрывается панель
 * @param {string} value
 */
Panel.prototype.setCollapseChanger = function( value ) {
    this.control.set( 'collapseChanger', value );
};

/**
 * @description Устанавливает обработчик события о том, что панель разворачивается
 * @param {Function} handler
 */
Panel.prototype.onExpanding = function( handler ) {
    this.control.on( 'expanding', handler );
};

/**
 * @description Устанавливает обработчик события о том, что панель была развернута
 * @param {Function} handler
 */
Panel.prototype.onExpanded = function( handler ) {
    this.control.on( 'expanded', handler );
};

/**
 * @description Устанавливает обработчик события о том, что панель сворачивается
 * @param {Function} handler
 */
Panel.prototype.onCollapsing = function( handler ) {
    this.control.on( 'collapsing', handler );
};

/**
 * @description Устанавливает обработчик события о том, что панель была свернута
 * @param {Function} handler
 */
Panel.prototype.onCollapsed = function( handler ) {
    this.control.on( 'collapsed', handler );
};

/**
 *
 * @returns {PanelControl}
 */
Panel.prototype.createControl = function() {
    return new PanelControl();
};

//####app/elements/panel/panelBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 */
function PanelBuilder() {
    _.superClass( PanelBuilder, this );
}

InfinniUI.PanelBuilder = PanelBuilder;

_.inherit( PanelBuilder, ContainerBuilder );

_.extend( PanelBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {Panel}
     */
    createElement: function( params ) {
        return new Panel( params.parent );
    },

    /**
     * @param {Object} params
     * @param {Panel} params.element
     * @param {Object} params.metadata
     */
    applyMetadata: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var data = ContainerBuilder.prototype.applyMetadata.call( this, params );

        element.setCollapsible( metadata.Collapsible );
        element.setCollapsed( metadata.Collapsed );
        element.setCollapseChanger( metadata.CollapseChanger );

        if( metadata.Header && typeof metadata.Header === 'object' ) {
            //Header указывает на DataBinding
            var builder = params.builder;
            var binding = builder.buildType( 'PropertyBinding', metadata.Header, {
                parent: element,
                parentView: params.parentView,
                basePathOfProperty: params.basePathOfProperty
            } );

            binding.bindElement( element, 'header' );
        } else {
            //Header содержит значение для шаблона
            element.setHeader( metadata.Header );
        }

        if( !metadata.Header && !metadata.HeaderTemplate ) {
            element.setHeaderTemplate( null );
        } else {
            var headerTemplate = this.buildHeaderTemplate( metadata.HeaderTemplate, params );
            element.setHeaderTemplate( headerTemplate );
        }

        this.initEventHandler( params );

        return data;
    },

    /**
     * @protected
     * @param {Object} params
     */
    initEventHandler: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var executorBuilderParams = {
            parentView: params.parentView,
            parent: element,
            basePathOfProperty: params.basePathOfProperty
        };

        if( metadata.OnExpanding ) {
            var onExpandingExecutor = Executor( metadata.OnExpanding, params.builder, executorBuilderParams );
            element.onExpanding( function( context, args ) {
                return onExpandingExecutor( args );
            } );
        }
        if( metadata.OnExpanded ) {
            var onExpandedExecutor = Executor( metadata.OnExpanded, params.builder, executorBuilderParams );
            element.onExpanded( function( context, args ) {
                return onExpandedExecutor( args );
            } );
        }
        if( metadata.OnCollapsing ) {
            var onCollapsingExecutor = Executor( metadata.OnCollapsing, params.builder, executorBuilderParams );

            element.onCollapsing( function( context, args ) {
                return onCollapsingExecutor( args );
            } );
        }
        if( metadata.OnCollapsed ) {
            var onCollapsedExecutor = Executor( metadata.OnCollapsed, params.builder, executorBuilderParams );

            element.onCollapsed( function( context, args ) {
                return onCollapsedExecutor( args );
            } );
        }
    },

    /**
     * @protected
     * @param {Object} headerTemplateMetadata
     * @param {Object} params
     * @returns {Function}
     */
    buildHeaderTemplate: function( headerTemplateMetadata, params ) {
        var headerTemplate;

        if( typeof headerTemplateMetadata === 'undefined' || _.isEmpty( headerTemplateMetadata ) ) {
            headerTemplate = this.buildDefaultHeaderTemplate( params );
        } else {
            headerTemplate = this.buildMetadataHeaderTemplate( headerTemplateMetadata, params );
        }

        return headerTemplate;
    },

    /**
     * @protected
     * @params {Object} params
     * @return {Function}
     */
    buildDefaultHeaderTemplate: function( params ) {
        return function( context, args ) {
            var label = new Label( this );
            label.setText( args.value );
            return label;
        };
    },

    /**
     * @protected
     * @param {Object} headerTemplateMetadata
     * @param {Object} params
     * @returns {Function}
     */
    buildMetadataHeaderTemplate: function( headerTemplateMetadata, params ) {
        var element = params.element;
        var builder = params.builder;

        return function( context, args ) {
            var argumentForBuilder = {
                parent: element,
                parentView: params.parentView,
                basePathOfProperty: params.basePathOfProperty
            };

            return builder.build( headerTemplateMetadata, argumentForBuilder );
        };
    }

} );

//####app/elements/passwordBox/passwordBox.js
/**
 *
 * @constructor
 * @augments Element
 * @mixes editorBaseMixin
 * @mixes labelTextElementMixin
 */
function PasswordBox( parent ) {
    _.superClass( PasswordBox, this, parent );
    this.initialize_editorBase();
}

InfinniUI.PasswordBox = PasswordBox;

_.inherit( PasswordBox, Element );

_.extend( PasswordBox.prototype, {

    /**
     *
     * @param value
     */
    setAutocomplete: function( value ) {
        if( typeof value === 'undefined' || value === null ) {
            return;
        }
        this.control.set( 'autocomplete', !!value );
    },

    /**
     * @returns {*}
     */
    getAutocomplete: function() {
        return this.control.get( 'autocomplete' );
    },

    /**
     *
     * @returns {PasswordBoxControl}
     */
    createControl: function() {
        return new PasswordBoxControl();
    },

    /**
     * @returns {*}
     */
    getRawValue: function() {
        return this.control.get( 'rawValue' );
    }

}, editorBaseMixin, labelTextElementMixin );

//####app/elements/passwordBox/passwordBoxBuilder.js
/**
 * @constructor
 * @augments ElementBuilder
 * @mixes editorBaseBuilderMixin
 */
function PasswordBoxBuilder() {
    _.superClass( PasswordBoxBuilder, this );
    this.initialize_editorBaseBuilder();
}

InfinniUI.PasswordBoxBuilder = PasswordBoxBuilder;

_.inherit( PasswordBoxBuilder, ElementBuilder );

_.extend( PasswordBoxBuilder.prototype, {

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );
        this.applyMetadata_editorBaseBuilder( params );

        var metadata = params.metadata;
        var element = params.element;

        this.initBindingToProperty( params, 'LabelText' );
        this.resolveExpressionInText( params, 'LabelText' );
        this.initBindingToProperty( params, 'LabelTextTitle' );

        element.setAutocomplete( metadata.Autocomplete );
    },

    /**
     *
     * @param params
     * @returns {PasswordBox}
     */
    createElement: function( params ) {
        var element = new PasswordBox( params.parent );
        return element;
    }

}, editorBaseBuilderMixin );

//####app/elements/popupButton/popupButton.js
/**
 * @param parent
 * @param viewMode
 * @constructor
 * @augments Container
 * @mixes buttonMixin
 */
function PopupButton( parent, viewMode ) {
    _.superClass( PopupButton, this, parent, viewMode );
    this.buttonInit();
}

InfinniUI.PopupButton = PopupButton;

_.inherit( PopupButton, Container );

_.extend( PopupButton.prototype, {

    /**
     *
     * @param viewMode
     * @returns {PopupButtonControl}
     */
    createControl: function( viewMode ) {
        return new PopupButtonControl( viewMode );
    }

}, buttonMixin );

//####app/elements/popupButton/popupButtonBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 * @mixes buttonBuilderMixin
 */
function PopupButtonBuilder() {
    _.superClass( PopupButtonBuilder, this );
}

InfinniUI.PopupButtonBuilder = PopupButtonBuilder;

_.inherit( PopupButtonBuilder, ContainerBuilder );

_.extend( PopupButtonBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {PopupButton}
     */
    createElement: function( params ) {
        var viewMode = this.detectViewMode( params );
        return new PopupButton( params.parent, viewMode );
    },

    /**
     *
     * @param params
     */
    detectViewMode: function( params ) {
        var viewMode = params.metadata[ 'ViewMode' ];
        var el = params.parent;
        var exit = false;

        if( !viewMode ) {
            while( !exit ) {
                if( el ) {
                    if( el instanceof MenuBar ) {
                        viewMode = 'forMenu';
                        exit = true;
                    } else {
                        el = el.parent;
                    }
                } else {
                    exit = true;
                }
            }

        }

        return viewMode;
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ContainerBuilder.prototype.applyMetadata.call( this, params );
        this.applyButtonMetadata.call( this, params );
    }

}, buttonBuilderMixin );

//####app/elements/radioGroup/radioGroupBuilder.js
/**
 * @augments ListBoxBuilder
 * @constructor
 */
function RadioGroupBuilder() {
    _.superClass( RadioGroupBuilder, this );
}

InfinniUI.RadioGroupBuilder = RadioGroupBuilder;

_.inherit( RadioGroupBuilder, ListBoxBuilder );

_.extend( RadioGroupBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {ListBox}
     */
    createElement: function( params ) {
        var viewMode = params.metadata[ 'ViewMode' ] || 'checking';

        return new ListBox( params.parent, viewMode );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        var element = params.element;
        ListBoxBuilder.prototype.applyMetadata.call( this, params );

        element.setMultiSelect( false );
    }

} );

//####app/elements/scrollPanel/scrollPanel.js
/**
 * @param parent
 * @constructor
 * @augments Container
 */
function ScrollPanel( parent ) {
    _.superClass( ScrollPanel, this, parent );
}

InfinniUI.ScrollPanel = ScrollPanel;

_.inherit( ScrollPanel, Container );

/**
 * @description Возвращает видимость полосы прокрутки по горизонтали
 * @returns {*}
 */
ScrollPanel.prototype.getHorizontalScroll = function() {
    return this.control.get( 'horizontalScroll' );
};

/**
 * @description Устанавливает видимость полосы прокрутки по горизонтали
 * @param value
 */
ScrollPanel.prototype.setHorizontalScroll = function( value ) {
    if( InfinniUI.Metadata.isValidValue( value, InfinniUI.ScrollVisibility ) ) {
        this.control.set( 'horizontalScroll', value );
    }
};

/**
 * @description Возвращает видимость полосы прокрутки по вертикали
 * @returns {*}
 */
ScrollPanel.prototype.getVerticalScroll = function() {
    return this.control.get( 'verticalScroll' );
};

/**
 * @description Устанавливает видимость полосы прокрутки по вертикали
 * @param value
 */
ScrollPanel.prototype.setVerticalScroll = function( value ) {
    if( InfinniUI.Metadata.isValidValue( value, InfinniUI.ScrollVisibility ) ) {
        this.control.set( 'verticalScroll', value );
    }
};

/**
 * @protected
 * @returns {PanelControl}
 */
ScrollPanel.prototype.createControl = function() {
    return new ScrollPanelControl();
};

//####app/elements/scrollPanel/scrollPanelBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 */
function ScrollPanelBuilder() {
    _.superClass( ScrollPanelBuilder, this );
}

InfinniUI.ScrollPanelBuilder = ScrollPanelBuilder;

_.inherit( ScrollPanelBuilder, ContainerBuilder );

_.extend( ScrollPanelBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {ScrollPanel}
     */
    createElement: function( params ) {
        return new ScrollPanel( params.parent );
    },

    /**
     * @param {Object} params
     * @param {Panel} params.element
     * @param {Object} params.metadata
     * @returns {*}
     */
    applyMetadata: function( params ) {
        var metadata = params.metadata;
        var element = params.element;

        var data = ContainerBuilder.prototype.applyMetadata.call( this, params );

        element.setHorizontalScroll( metadata.HorizontalScroll );
        element.setVerticalScroll( metadata.VerticalScroll );

        return data;
    }

} );

//####app/elements/tabPanel/tabPanel.js
/**
 * @param parent
 * @constructor
 * @augments Container
 */
function TabPanel( parent ) {
    _.superClass( TabPanel, this, parent );
}

InfinniUI.TabPanel = TabPanel;

_.inherit( TabPanel, Container );


/**
 * @description Возвращает расположение закладок
 * @returns {*}
 */
TabPanel.prototype.getHeaderLocation = function() {
    return this.control.get( 'headerLocation' );
};

/**
 * @description Устанавливает расположение закладок
 * @param value
 */
TabPanel.prototype.setHeaderLocation = function( value ) {
    if( InfinniUI.Metadata.isValidValue( value, InfinniUI.TabHeaderLocation ) ) {
        this.control.set( 'headerLocation', value );
    }
};

/**
 * @description Возвращает ориентацию закладок.
 * @returns {*}
 */
TabPanel.prototype.getHeaderOrientation = function() {
    return this.control.get( 'headerOrientation' );
};

/**
 * @description Устанавливает ориентацию закладок
 * @param value
 */
TabPanel.prototype.setHeaderOrientation = function( value ) {
    if( InfinniUI.Metadata.isValidValue( value, InfinniUI.TabHeaderOrientation ) ) {
        this.control.set( 'headerOrientation', value );
    }
};

/**
 * @description Устанавливает функцию шаблонизации закладок дочерних элементов панели
 * @param {Function} value
 */
TabPanel.prototype.setHeaderTemplate = function( value ) {
    this.control.set( 'headerTemplate', value );
};

/**
 * @description Возвращает функцию шаблонизации закладок дочерних элементов панели
 * @returns {Function}
 */
TabPanel.prototype.getHeaderTemplate = function() {
    return this.control.get( 'headerTemplate' );
};

/**
 * @description Устанавливает выделенный дочерний элемент панели
 * @param {TabPage} value
 * @returns {boolean} успешность выделения дочернего элемента панели. false - элемент не был выделен, true - элемент успешно выделен
 */
TabPanel.prototype.setSelectedItem = function( value ) {
    return this.control.setSelectedItem( value );
};

/**
 * @description Возвращает выделенный дочерний элемент панели
 * @returns {TabPage}
 */
TabPanel.prototype.getSelectedItem = function() {
    return this.control.get( 'selectedItem' );
};

/**
 * @description Устанавливает обработчик события о том, что выделенный элемент изменился
 * @param {Function} handler
 */
TabPanel.prototype.onSelectedItemChanged = function( handler ) {
    this.control.on( 'change:selectedItem', handler );
};

/**
 * @description Недокументированный метод. Закрывает заданную вкладку
 * @param {TabPage} element
 */
TabPanel.prototype.closeTab = function( element ) {
    var index = this.childElements.indexOf( element );

    if( index === -1 ) {
        throw new Error( 'TabPage not found in TabPanel.childElements' );
    } else {
        this.getItems().removeAt( index );
    }
};

/**
 * @protected
 * @returns {PanelControl}
 */
TabPanel.prototype.createControl = function() {
    return new TabPanelControl();
};

//####app/elements/tabPanel/tabPanelBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 */
function TabPanelBuilder() {
    _.superClass( TabPanelBuilder, this );
}

InfinniUI.TabPanelBuilder = TabPanelBuilder;

_.inherit( TabPanelBuilder, ContainerBuilder );

_.extend( TabPanelBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {TabPanel}
     */
    createElement: function( params ) {
        return new TabPanel( params.parent );
    },

    /**
     * @param {Object} params
     * @param {Panel} params.element
     * @param {Object} params.metadata
     */
    applyMetadata: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var data = ContainerBuilder.prototype.applyMetadata.call( this, params );

        element.setHeaderLocation( metadata.HeaderLocation );
        element.setHeaderOrientation( metadata.HeaderOrientation );

        this.initScriptHandlers( params );
        return data;
    },

    /**
     *
     * @param params
     */
    initScriptHandlers: function( params ) {
        var metadata = params.metadata;
        var element = params.element;

        element.onSelectedItemChanged( function( context, args ) {
            var exchange = InfinniUI.global.messageBus;
            exchange.send( 'OnChangeLayout', {} );
        } );

        var executorBuilderParams = {
            parentView: params.parentView,
            parent: element,
            basePathOfProperty: params.basePathOfProperty
        };

        if( metadata.OnSelectedItemChanged ) {
            var onSelectedItemChangedExecutor = Executor( metadata.OnSelectedItemChanged, params.builder, executorBuilderParams );
            element.onSelectedItemChanged( function( context, args ) {
                onSelectedItemChangedExecutor( args );
            } );
        }
    }

} );

//####app/elements/tablePanel/tablePanel.js
/**
 * @param parent
 * @constructor
 * @augments Container
 */
function TablePanel( parent ) {
    _.superClass( TablePanel, this, parent );
}

InfinniUI.TablePanel = TablePanel;

_.inherit( TablePanel, Container );

_.extend( TablePanel.prototype, {

    /**
     *
     * @returns {TablePanelControl}
     */
    createControl: function() {
        return new TablePanelControl();
    }

} );

//####app/elements/tablePanel/tablePanelBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 */
function TablePanelBuilder() {
    _.superClass( TablePanelBuilder, this );
}

InfinniUI.TablePanelBuilder = TablePanelBuilder;

_.inherit( TablePanelBuilder, ContainerBuilder );

_.extend( TablePanelBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {TablePanel}
     */
    createElement: function( params ) {
        return new TablePanel( params.parent );
    },

    /**
     * @param {Object} params
     * @param {TablePanel} params.element
     * @param {Object} params.metadata
     */
    applyMetadata: function( params ) {
        ContainerBuilder.prototype.applyMetadata.call( this, params );
    }

} );

//####app/elements/toggleButton/toggleButton.js
/**
 * @mixes editorBaseMixin
 * @param parent
 * @constructor
 * @augment Element
 */
function ToggleButton( parent ) {
    _.superClass( ToggleButton, this, parent );
    this.initialize_editorBase();
}

InfinniUI.ToggleButton = ToggleButton;

_.inherit( ToggleButton, Element );

_.extend( ToggleButton.prototype, {

    /**
     *
     * @param parent
     * @returns {ToggleButtonControl}
     */
    createControl: function( parent ) {
        return new ToggleButtonControl( parent );
    },

    /**
     * @returns {*}
     */
    getTextOn: function() {
        return this.control.get( 'textOn' );
    },

    /**
     * @returns {*}
     * @param value
     */
    setTextOn: function( value ) {
        return this.control.set( 'textOn', value ? value : '' );
    },

    /**
     * @returns {*}
     */
    getTextOff: function() {
        return this.control.get( 'textOff' );
    },

    /**
     * @returns {*}
     * @param value
     */
    setTextOff: function( value ) {
        return this.control.set( 'textOff', value ? value : '' );
    }

}, editorBaseMixin );

//####app/elements/toggleButton/toggleButtonBuilder.js
/**
 *
 * @constructor
 * @augments ElementBuilder
 */
function ToggleButtonBuilder() {
    _.superClass( ToggleButtonBuilder, this );
    this.initialize_editorBaseBuilder();
}

InfinniUI.ToggleButtonBuilder = ToggleButtonBuilder;

_.inherit( ToggleButtonBuilder, ElementBuilder );


_.extend( ToggleButtonBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {ToggleButton}
     */
    createElement: function( params ) {
        return new ToggleButton( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );
        this.applyMetadata_editorBaseBuilder( params );

        var element = params.element;
        var metadata = params.metadata;

        element.setTextOff( metadata.TextOff );
        element.setTextOn( metadata.TextOn );
    }

}, editorBaseBuilderMixin );

//####app/elements/toolBar/toolBar.js
/**
 *
 * @param parent
 * @constructor
 * @augments Container
 */
var ToolBar = function( parent ) {
    _.superClass( ToolBar, this, parent );
};

InfinniUI.ToolBar = ToolBar;

_.inherit( ToolBar, Container );

/**
 *
 * @returns {ToolBarControl}
 */
ToolBar.prototype.createControl = function() {
    return new ToolBarControl();
};

//####app/elements/toolBar/toolBarBuilder.js
/**
 *
 * @constructor
 * @augments ContainerBuilder
 */
function ToolBarBuilder() {
    _.superClass( ToolBarBuilder, this );
}

InfinniUI.ToolBarBuilder = ToolBarBuilder;

_.inherit( ToolBarBuilder, ContainerBuilder );

_.extend( ToolBarBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {ToolBar}
     */
    createElement: function( params ) {
        return new ToolBar( params.parent );
    }

} );

//####app/elements/tooltip/tooltip.js
/**
 * @augments Element
 * @param parent
 * @constructor
 */
var Tooltip = function( parent ) {
    _.superClass( Icon, this, parent );
};

_.inherit( Tooltip, Element );

_.extend( Tooltip.prototype, {

    /**
     *
     * @returns {TooltipControl}
     */
    createControl: function() {
        return new InfinniUI.TooltipControl();
    },

    /**
     *
     * @param content
     */
    setContent: function( content ) {
        this.control.set( 'content', content );
    }

} );

InfinniUI.Tooltip = Tooltip;

//####app/elements/tooltip/tooltipBuilder.js
/**
 * @augments ElementBuilder
 * @constructor
 */
function TooltipBuilder() {
    _.superClass( TooltipBuilder, this );
}

InfinniUI.TooltipBuilder = TooltipBuilder;

_.inherit( TooltipBuilder, ElementBuilder );

_.extend( TooltipBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {Tooltip}
     */
    createElement: function( params ) {
        return new InfinniUI.Tooltip();
    },

    /**
     *
     * @param metadata
     * @returns {*}
     */
    normalizeMetadata: function( metadata ) {
        if( typeof metadata === 'string' ) {
            metadata = {
                Text: metadata
            };
        }

        return metadata;
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        var tooltip = params.element;

        params.metadata = this.normalizeMetadata( params.metadata );

        ElementBuilder.prototype.applyMetadata.call( this, params );
        tooltip.setContent( this.buildContent( params.metadata, params ) );

        var exchange = InfinniUI.global.messageBus;

        exchange.send( messageTypes.onToolTipInit, { element: params.parent, content: tooltip } );
        params.parent.onRemove( function() {
            exchange.send( messageTypes.onToolTipDestroy, { element: params.parent } );
        } );

    },

    /**
     *
     * @param metadata
     * @param params
     * @returns {*}
     */
    buildContent: function( metadata, params ) {
        var builder = params.builder;
        var content;
        var builderParams = {
            parent: params.element,
            parentView: params.parentView,
            basePathOfProperty: params.basePathOfProperty
        };

        if( 'Text' in metadata ) {
            content = this.buildTextContent( metadata[ 'Text' ], builder, builderParams );
        } else {
            content = this.buildElementContent( metadata, builder, builderParams );
        }

        return content;
    },

    /**
     * @protected
     * @param text
     * @param builder
     * @param builderParams
     * @return {*}
     */
    buildTextContent: function( text, builder, builderParams ) {
        return builder.buildType( 'Label', {
            'Text': text
        }, builderParams );
    },

    /**
     * @protected
     * @param metadata
     * @param builder
     * @param builderParams
     */
    buildElementContent: function( metadata, builder, builderParams ) {
        return builder.build( metadata, builderParams );
    }

} );

//####app/elements/treeView/treeView.js
/**
 * @param parent
 * @constructor
 * @augments ListEditorBase
 */
function TreeView( parent ) {
    _.superClass( TreeView, this, parent );
}

InfinniUI.TreeView = TreeView;

_.inherit( TreeView, ListEditorBase );

/**
 *
 * @returns {TreeViewControl}
 */
TreeView.prototype.createControl = function() {
    return new TreeViewControl();
};

/**
 *
 * @returns Function}
 */
TreeView.prototype.getKeySelector = function() {
    return this.control.get( 'keySelector' );
};

/**
 *
 * @param {Function} value
 */
TreeView.prototype.setKeySelector = function( value ) {
    this.control.set( 'keySelector', value );
};

/**
 *
 * @returns {Function}
 */
TreeView.prototype.getParentSelector = function() {
    return this.control.get( 'parentSelector' );
};

/**
 *
 * @param {Function} value
 */
TreeView.prototype.setParentSelector = function( value ) {
    this.control.set( 'parentSelector', value );
};

/**
 *
 * @param key
 */
TreeView.prototype.expand = function( key ) {
    this.control.expand( key );
};

/**
 *
 * @param key
 */
TreeView.prototype.collapse = function( key ) {
    this.control.collapse( key );
};

/**
 *
 * @param key
 */
TreeView.prototype.toggle = function( key ) {
    this.control.toggle( key );
};

/**
 *
 * @returns {Function}
 */
TreeView.prototype.getOnExpand = function() {
    return this.control.get( 'onExpand' );
};

/**
 *
 * @param {Function} callback
 */
TreeView.prototype.setOnExpand = function( callback ) {
    this.control.set( 'onExpand', callback );
};

/**
 *
 * @returns {Function}
 */
TreeView.prototype.getOnCollapse = function() {
    return this.control.get( 'onCollapse' );
};

/**
 *
 * @param {Function} callback
 */
TreeView.prototype.setOnCollapse = function( callback ) {
    this.control.set( 'onCollapse', callback );
};

//####app/elements/treeView/treeViewBuilder.js
/**
 * @augments ListEditorBaseBuilder
 * @constructor
 */
function TreeViewBuilder() {
    _.superClass( TreeViewBuilder, this );
}

InfinniUI.TreeViewBuilder = TreeViewBuilder;

_.inherit( TreeViewBuilder, ListEditorBaseBuilder );

_.extend( TreeViewBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {TreeView}
     */
    createElement: function( params ) {
        return new TreeView( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        var element = params.element;
        var metadata = params.metadata;
        var data = ListEditorBaseBuilder.prototype.applyMetadata.call( this, params );

        this._initKeySelector( params );
        this._initParentSelector( params );

        if( metadata.OnExpand ) {
            var onExpandExecutor = function( item ) {
                new ScriptExecutor( element.getScriptsStorage() ).executeScript( metadata.OnExpand, { item: item } );
            };
            element.setOnExpand( onExpandExecutor );
        }

        if( metadata.OnCollapse ) {
            var onCollapseExecutor = function( item ) {
                new ScriptExecutor( element.getScriptsStorage() ).executeScript( metadata.OnCollapse, { item: item } );
            };
            element.setOnCollapse( onCollapseExecutor );
        }
    },

    /**
     *
     * @param params
     * @private
     */
    _initKeySelector: function( params ) {
        var element = params.element;
        var metadata = params.metadata;
        var keySelector;

        if( metadata.KeySelector ) {
            keySelector = function( context, args ) {
                var scriptExecutor = new ScriptExecutor( element.getScriptsStorage() );
                return scriptExecutor.executeScript( metadata.KeySelector, args );
            };
        } else if( metadata.KeyProperty ) {
            keySelector = function( context, args ) {
                return InfinniUI.ObjectUtils.getPropertyValue( args.value, metadata.KeyProperty );
            };
        } else {
            keySelector = function( context, args ) {
                return args.value;
            };
        }
        element.setKeySelector( keySelector );
    },

    /**
     *
     * @param params
     * @private
     */
    _initParentSelector: function( params ) {
        var element = params.element;
        var metadata = params.metadata;
        var parentSelector;

        if( metadata.ParentSelector ) {
            parentSelector = function( context, args ) {
                var scriptExecutor = new ScriptExecutor( element.getScriptsStorage() );
                return scriptExecutor.executeScript( metadata.ParentSelector, args );
            };
        } else if( metadata.ParentProperty ) {
            parentSelector = function( context, args ) {
                return InfinniUI.ObjectUtils.getPropertyValue( args.value, metadata.ParentProperty );
            };
        } else {
            parentSelector = function( context, args ) {
                return args.value;
            };
        }
        element.setParentSelector( parentSelector );
    }

} );

//####app/elements/view/view.js
/**
 * @param parent
 * @constructor
 * @augments Container
 */
function View( parent ) {
    _.superClass( View, this, parent );

    var view = this;

    this.eventManager = new EventManager();
    this.openStrategy = new OpenModeDefaultStrategy();
    this.openStrategy.setView( this );
    this.members = {};
    this.membersDeferreds = {};
    this.handlers = {
        onBeforeLoaded: $.Deferred(),
        onLoaded: $.Deferred(),
        onSelectedElementChange: null
    };
    this._initContext();

    var parentView = this.getView();

    if( parentView ) {
        // перед закрытием родительской view необходимо также убедиться, что могут быть закрыты все дочерние view
        parentView.onClosing && parentView.onClosing( function( context, message ) {
            if( !view.isRemoved ) {
                return view.eventManager.trigger( 'onClosing', view.getContext(), view._getScriptArgs() );
            }
        } );

        // при закрытии родительской view необходимо закрыть все дочерние view
        parentView.onClosed && parentView.onClosed( function( context, message ) {
            view.close( null, null, true );
        } );
    }

    this.control.get( 'dataSources' ).onChange( function() {
        view._initDataSourceHandlers();
    } );
}

InfinniUI.View = View;

_.inherit( View, Container );

_.extend( View.prototype, {

    isView: true,

    /**
     *
     * @private
     */
    _initDataSourceHandlers: function() {
        var that = this;
        var dataSources = this.getContext().dataSources;
        var readyDsDeferred = [];

        this.control.onLoaded( function() {
            for( var k in dataSources ) {
                readyDsDeferred.push( dataSources[ k ].getCurrentRequestPromise() );
            }

            if( readyDsDeferred.length > 0 ) {
                $.when.apply( $, readyDsDeferred ).done( function() {
                    that._notifyAboutDsReady();
                } );
            } else {
                that._notifyAboutDsReady();
            }

        } );
    },

    /**
     *
     * @private
     */
    _notifyAboutDsReady: function() {
        this.handlers.onBeforeLoaded.resolve();
        this.handlers.onLoaded.resolve();
    },

    /**
     *
     * @returns {ViewControl}
     */
    createControl: function() {
        return new ViewControl();
    },

    /**
     *
     * @private
     */
    _initContext: function() {
        this.context = {
            view: this,
            scripts: {},
            parameters: {},
            dataSources: {},
            controls: {},
            messageBus: new MessageBus( this ),
            global: InfinniUI.global
        };

        var that = this;

        // on scripts changing
        this.control.get( 'scripts' ).onChange( function() {
            that.context.scripts = {};

            var newScripts = that.getScripts();

            newScripts.forEach( function( item ) {
                that.context.scripts[ item.name ] = item.func;
            } );
        } );

        // on parameters changing
        this.control.get( 'parameters' ).onChange( function() {
            that.context.parameters = {};

            var newParameters = that.getParameters();

            newParameters.forEach( function( item ) {
                that.context.parameters[ item.name ] = item;
                that.registerMember( item.name, item );
            } );
        } );

        // on dataSources changing
        this.control.get( 'dataSources' ).onChange( function() {
            that.context.dataSources = {};

            var newParameters = that.getDataSources();

            newParameters.forEach( function( item ) {
                that.context.dataSources[ item.get( 'name' ) ] = item;
                that.registerMember( item.name, item );
            } );
        } );
    },

    /**
     *
     * @returns {*}
     */
    getApplicationView: function() {
        var isApplication = this.control.get( 'isApplication' );
        var parent = this.parent;

        if( isApplication ) {
            return this;
        } else {
            return _.isEmpty( parent ) ? null : parent.getApplicationView();
        }
    },

    /**
     *
     * @param param
     */
    isApplication: function( param ) {
        var result = this.control.get( 'isApplication' );

        if( typeof param === 'boolean' ) {
            this.control.set( 'isApplication', param );
        }

        return result;
    },

    /**
     *
     * @param element
     */
    registerElement: function( element ) {
        this.context.controls[ element.name ] = element;
        this.registerMember( element.name, element );
    },

    /**
     *
     * @returns {*}
     */
    getContext: function() {
        return this.context;
    },

    /**
     * @returns {*}
     */
    getScripts: function() {
        return this.control.get( 'scripts' );
    },

    /**
     * @returns {*}
     */
    getParameters: function() {
        return this.control.get( 'parameters' );
    },

    /**
     * @returns {*}
     */
    getDataSources: function() {
        return this.control.get( 'dataSources' );
    },

    /**
     * @returns {*}
     */
    getDialogResult: function() {
        return this.control.get( 'dialogResult' );
    },

    /**
     * @returns {*}
     * @param value
     */
    setDialogResult: function( value ) {
        return this.control.set( 'dialogResult', value );
    },

    /**
     *
     * @param success
     * @param error
     */
    open: function( success, error ) {
        var context = this.getContext();
        var scriptArgs = this._getScriptArgs();

        if( this.eventManager.trigger( 'onOpening', scriptArgs, context ) ) {
            this.openStrategy.open();
            this.eventManager.trigger( 'onOpened', scriptArgs, context );

            if( success ) {
                success( context, scriptArgs );
            }
        } else if( error ) {
            error( context, scriptArgs );
        }
    },

    /**
     *
     * @param success
     * @param error
     * @param notCallOnClosing
     */
    close: function( success, error, notCallOnClosing ) {
        if( this.isClosing ) {
            return;
        } else {
            this.isClosing = true;
        }

        var context = this.getContext();
        var scriptArgs = this._getScriptArgs();

        if( notCallOnClosing || this.eventManager.trigger( 'onClosing', scriptArgs, context ) ) {
            this.eventManager.trigger( 'onClosed', scriptArgs, context );

            this.openStrategy.close();
            this.removeParameters();

            if( success ) {
                success( context, scriptArgs );
            }

        } else if( error ) {
            error( context, scriptArgs );
        }
    },

    /**
     *
     */
    removeParameters: function() {
        var context = this.getContext();
        var parameters = this.control.get( 'parameters' );

        if( parameters._items.length ) {
            parameters.forEach( function( parameter ) {
                parameter.remove();
            } );

            parameters.removeAll();
            context.parameters = {};
        }
    },

    /**
     *
     * @returns {View}
     */
    getScriptsStorage: function() {
        return this;
    },

    /**
     *
     * @param openStrategy
     */
    setOpenStrategy: function( openStrategy ) {
        this.openStrategy = openStrategy;
    },

    /**
     *
     * @param handler
     */
    onBeforeLoaded: function( handler ) {
        this.handlers.onBeforeLoaded.done( handler );
    },

    /**
     *
     * @param handler
     */
    onLoaded: function( handler ) {
        this.handlers.onLoaded.done( handler );
    },
    /**
     *
     * @param callback
     */
    onOpening: function( callback ) {
        this.eventManager.on( 'onOpening', callback );
    },

    /**
     *
     * @param callback
     */
    onOpened: function( callback ) {
        this.eventManager.on( 'onOpened', callback );
    },

    /**
     *
     * @param callback
     */
    onClosing: function( callback ) {
        this.eventManager.on( 'onClosing', callback );
    },

    /**
     *
     * @param callback
     */
    onClosed: function( callback ) {
        this.eventManager.on( 'onClosed', callback );
    },

    /**
     *
     * @returns {{source: View}}
     * @private
     */
    _getScriptArgs: function() {
        return {
            source: this
        };
    },

    /**
     * @description Устанаваливает шаблон заголовка
     * @param {Function} template
     */
    setHeaderTemplate: function( template ) {
        this.headerTemplate = template;
    },

    /**
     * @description Возвращает шаблон заголовка
     * @returns {Function|*}
     */
    getHeaderTemplate: function() {
        return this.headerTemplate;
    },

    /**
     * @description Устанавливает флаг видитмости кнопки закрытия
     * @param {boolean} value
     */
    setCloseButtonVisibility: function( value ) {
        if( typeof value === 'boolean' ) {
            this.control.set( 'closeButtonVisibility', value );
        }
    },

    /**
     * @description Возвращает флаг видимости кнопки закрытия
     * @returns {boolean}
     */
    getCloseButtonVisibility: function() {
        return this.control.get( 'closeButtonVisibility' );
    },

    /**
     *
     */
    noDataSourceOnView: function() {
        this._initDataSourceHandlers();
    },

    /**
     *
     * @param memberName
     * @param member
     */
    registerMember: function( memberName, member ) {
        this.members[ memberName ] = member;

        if( memberName in this.membersDeferreds ) {
            this.membersDeferreds[ memberName ].resolve( member );
        }
    },

    /**
     *
     * @param memberName
     * @returns {*}
     */
    getDeferredOfMember: function( memberName ) {
        if( memberName === 'LocalStorageDS' ) {
            return $.Deferred().resolve( InfinniUI.localStorageDataSource );
        }

        if( !( memberName in this.membersDeferreds ) ) {
            this.membersDeferreds[ memberName ] = $.Deferred();

            if( this.members[ memberName ] ) {
                var member = this.members[ memberName ];
                this.membersDeferreds[ memberName ].resolve( member );
            }
        }

        return this.membersDeferreds[ memberName ];
    },

    /**
     *
     * @param {string} value
     */
    setFocusOnControl: function( value ) {
        this.control.set( 'focusOnControl', value );
    },

    /**
     *
     * @returns {string}
     */
    getFocusOnControl: function() {
        return this.control.get( 'focusOnControl' );
    }

} );

//####app/elements/view/viewBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 * @mixes viewBuilderHeaderTemplateMixin
 */
function ViewBuilder() {
    _.superClass( ViewBuilder, this );
}

InfinniUI.ViewBuilder = ViewBuilder;

_.inherit( ViewBuilder, ContainerBuilder );

_.extend( ViewBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {View}
     */
    createElement: function( params ) {
        return new View( params.parent );
    },

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        var parentView = params.parentView;

        // новые params, где parentView будет уже текущая вьюха
        params = _.extend( {}, params );
        params.parentView = params.element;

        var metadata = params.metadata;
        var element = params.element;
        var builder = params.builder;
        var scripts = element.getScripts();
        var parameters = element.getParameters();

        if( metadata.Scripts ) {
            for( var i = 0, len = metadata.Scripts.length; i < len; ++i ) {
                var scriptMetadata = metadata.Scripts[ i ];

                var script = {
                    name: scriptMetadata.Name,
                    func: builder.buildType( 'Script', scriptMetadata, { parentView: element } )
                };

                scripts.add( script );
            }
        }

        this.triggerStartCreatingEvent( params );

        if( metadata.Parameters ) {
            var passedParams = params.params || {};
            var parameterName;
            var defaultValue;
            var param;

            for( var j = 0, jj = metadata.Parameters.length; j < jj; ++j ) {
                parameterName = metadata.Parameters[ j ][ 'Name' ];
                param = passedParams[ parameterName ];

                if( !param ) {
                    param = new Parameter( { view: element } );
                    param.setName( parameterName );


                    if( 'DefaultValue' in metadata.Parameters[ j ] ) {
                        defaultValue = metadata.Parameters[ j ][ 'DefaultValue' ];
                        param.setValue( defaultValue );
                    }
                }

                param.set( 'view', params.element );
                parameters.add( param );
                if( typeof metadata.Parameters[ j ][ 'OnPropertyChanged' ] !== 'undefined' ) {
                    var handler = metadata.Parameters[ j ][ 'OnPropertyChanged' ];
                    param.onPropertyChanged( function() {
                        new ScriptExecutor( element ).executeScript( handler );
                    } );
                }
            }
        }

        if( metadata.DataSources && metadata.DataSources.length ) {
            var dataSources = builder.buildMany( metadata.DataSources, {
                parentView: element,
                suspended: params.suspended
            } );

            element.getDataSources()
                .set( dataSources );

            this.changeDataSourcesReadinessByPriority( dataSources );

            for( var k = 0, kk = dataSources.length; k < kk; k++ ) {
                if( !dataSources[ k ].isLazy() ) {
                    dataSources[ k ].tryInitData();
                }
            }
        } else {
            element.noDataSourceOnView();
        }

        if( metadata.NotificationSubscriptions ) {
            var subscriptor = InfinniUI.global.notificationSubscription;

            for( var key in metadata.NotificationSubscriptions ) {
                ( function() {
                    var script = metadata.NotificationSubscriptions[ key ];
                    subscriptor.subscribe( key, function( context, args ) {
                        new ScriptExecutor( element ).executeScript( script, {
                            context: context,
                            message: args.message
                        } );
                    }, this );
                } )();
            }

            element.onClosing( function() {
                for( var key2 in metadata.NotificationSubscriptions ) {
                    subscriptor.unsubscribe( key2, this );
                }
            } );
        }

        this.initBindingToProperty( params, 'CloseButtonVisibility', true );

        element.setHeaderTemplate( this.buildHeaderTemplate( element, params ) );

        var executorBuilderParams = {
            parentView: element,
            parent: element,
            basePathOfProperty: params.basePathOfProperty
        };

        if( metadata.OnOpening ) {
            var onOpeningExecutor = Executor( metadata.OnOpening, params.builder, executorBuilderParams );
            element.onOpening( onOpeningExecutor );
        }

        if( metadata.OnOpened ) {
            var onOpenedExecutor = Executor( metadata.OnOpened, params.builder, executorBuilderParams );
            element.onOpened( onOpenedExecutor );
        }

        if( metadata.OnClosing ) {
            var onClosingExecutor = Executor( metadata.OnClosing, params.builder, executorBuilderParams );
            element.onClosing( onClosingExecutor );
        }

        if( metadata.OnClosed ) {
            var onClosedExecutor = Executor( metadata.OnClosed, params.builder, executorBuilderParams );
            element.onClosed( onClosedExecutor );
        }

        ContainerBuilder.prototype.applyMetadata.call( this, params );

        element.setFocusOnControl( metadata.FocusOnControl );
    },

    /**
     *
     * @param params
     */
    triggerStartCreatingEvent: function( params ) {
        var element = params.element;
        var metadata = params.metadata;
        var onStartCreating = metadata.OnStartCreating;

        if( onStartCreating ) {
            var executorBuilderParams = {
                parentView: params.parentView,
                parent: element,
                basePathOfProperty: params.basePathOfProperty
            };
            var onStartCreatingExecutor = Executor( onStartCreating, params.builder, executorBuilderParams );

            onStartCreatingExecutor( {} );
        }
    },

    /**
     *
     * @param dataSources
     */
    changeDataSourcesReadinessByPriority: function( dataSources ) {
        var dataSourcesByPriority = _.groupBy( dataSources, function( ds ) {
            return ds.getResolvePriority();
        } );

        var updateTopPriorityDataSources = function( priorityGroups ) {
            if( _.keys( priorityGroups ).length ) {
                var maxPriority = _.chain( priorityGroups ).keys().max().value();
                var topPriorityDataSources = priorityGroups[ maxPriority ];
                var topPriorityDataSourcesCount = topPriorityDataSources.length;
                var nonPriorityDataSourceGroups = _.omit( priorityGroups, maxPriority );
                var count = 0;

                _.each( topPriorityDataSources, function( ds ) {
                    ds.onItemsUpdatedOnce( function( context, args ) {
                        if( ++count == topPriorityDataSourcesCount ) {
                            setTimeout( function() {
                                updateTopPriorityDataSources( nonPriorityDataSourceGroups );
                            }, 0 );
                        }
                    } );

                    ds.setIsWaiting( false );
                } );
            }
        };

        if( _.keys( dataSourcesByPriority ).length > 1 ) {
            _.each( dataSources, function( ds ) {
                ds.setIsWaiting( true );
            } );

            updateTopPriorityDataSources( dataSourcesByPriority );
        }
    }

}, viewBuilderHeaderTemplateMixin );

//####app/elements/viewPanel/viewPanel.js
/**
 *
 * @param parent
 * @constructor
 * @augments Element
 */
function ViewPanel( parent ) {
    _.superClass( ViewPanel, this, parent );
}

InfinniUI.ViewPanel = ViewPanel;

_.inherit( ViewPanel, Element );

_.extend( ViewPanel.prototype, {

    /**
     *
     * @param layout
     */
    setLayout: function( layout ) {
        var oldLayout = this.getLayout();

        if( oldLayout ) {
            oldLayout.close();
        }

        this.control.set( 'layout', layout );
    },

    /**
     * @returns {*}
     */
    getLayout: function() {
        return this.control.get( 'layout' );
    },

    /**
     *
     * @returns {ViewPanelControl}
     */
    createControl: function() {
        return new ViewPanelControl();
    }

} );

//####app/elements/viewPanel/viewPanelBuilder.js
/**
 * @augments ElementBuilder
 * @constructor
 */
function ViewPanelBuilder() {
}

InfinniUI.ViewPanelBuilder = ViewPanelBuilder;

_.inherit( ViewPanelBuilder, ElementBuilder );

_.extend( ViewPanelBuilder.prototype, {

    /**
     *
     * @param params
     */
    applyMetadata: function( params ) {
        ElementBuilder.prototype.applyMetadata.call( this, params );

        var builder = params.builder;
        var panel = params.element;
        var metadata = params.metadata;

        /* Помощь для обработки OpenMode = Inline */
        if( _.isEmpty( metadata.Name ) ) {
            metadata.Name = guid();
            panel.setName( metadata.Name );
        }

        InfinniUI.global.containers[ metadata.Name ] = panel;

        if( 'LinkView' in metadata ) {
            var linkView = builder.build( metadata[ 'LinkView' ], {
                parentView: params.parentView,
                parent: params.element
            } );

            linkView.setOpenMode( 'Container' );
            linkView.setContainer( metadata.Name );
            linkView.createView( function( view ) {
                view.open();
            } );
        }
    },

    /**
     *
     * @param params
     * @returns {ViewPanel}
     */
    createElement: function( params ) {
        return new ViewPanel( params.parent );
    }

} );

InfinniUI.global.containers = {};

//####app/elements/dataGrid/dataGridRow/dataGridRow.js
/**
 * @augments Element
 * @constructor
 */
function DataGridRow( parent ) {
    _.superClass( DataGridRow, this, parent );

    this._transformRowProperties( {
        rowBackground: 'background',
        rowForeground: 'foreground',
        rowTextStyle: 'textStyle',
        rowStyle: 'style'
    } );
}

_.inherit( DataGridRow, Element );

_.extend( DataGridRow.prototype, {

    /**
     *
     * @returns {DataGridRowControl}
     */
    createControl: function() {
        return new DataGridRowControl();
    },

    /**
     *
     * @param cellElements
     */
    setCellElements: function( cellElements ) {
        this.control.set( 'cellElements', cellElements );
    },

    /**
     *
     * @param toggle
     */
    toggle: function( toggle ) {
        this.control.set( 'toggle', toggle );
    },

    /**
     *
     */
    getSelected: function() {
        this.control.get( 'selected' );
    },

    /**
     *
     * @param selected
     */
    setSelected: function( selected ) {
        this.control.set( 'selected', selected );
    },

    /**
     *
     * @param multiSelect
     */
    setMultiSelect: function( multiSelect ) {
        this.control.set( 'multiSelect', multiSelect );
    },

    /**
     *
     * @param showSelectors
     */
    setShowSelectors: function( showSelectors ) {
        this.control.set( 'showSelectors', showSelectors );
    },

    /**
     *
     * @param handler
     */
    onToggle: function( handler ) {
        this.control.onToggle( handler );
    },

    /**
     *
     * @param value
     */
    setRowBackground: function( value ) {
        this.control.set( 'rowBackground', value );
    },

    /**
     * @returns {*}
     */
    getRowBackground: function() {
        return this.control.get( 'rowBackground' );
    },

    /**
     *
     * @param value
     */
    setRowForeground: function( value ) {
        this.control.set( 'rowForeground', value );
    },

    /**
     * @returns {*}
     */
    getRowForeground: function() {
        return this.control.get( 'rowForeground' );
    },

    /**
     *
     * @param value
     */
    setRowTextStyle: function( value ) {
        this.control.set( 'rowTextStyle', value );
    },

    /**
     * @returns {*}
     */
    getRowTextStyle: function() {
        return this.control.get( 'rowTextStyle' );
    },

    /**
     *
     * @param value
     */
    setRowStyle: function( value ) {
        this.control.set( 'rowStyle', value );
    },

    /**
     * @returns {*}
     */
    getRowStyle: function() {
        return this.control.get( 'rowStyle' );
    },

    /**
     *
     * @param grid
     */
    setGrid: function( grid ) {
        this.control.set( 'grid', grid );
    },

    /**
     *
     * @param properties
     * @private
     */
    _transformRowProperties: function( properties ) {
        for( var name in properties ) {
            if( !properties.hasOwnProperty( name ) ) {
                continue;
            }

            this.setProperty( properties[ name ], this.getProperty( name ) );

            this.onPropertyChanged( name, ( function( row, prop ) {
                return function( context, args ) {
                    row.setProperty( prop, args.newValue );
                };
            } )( this, properties[ name ] ) );
        }

    }

} );


//####app/elements/tabPanel/tabPage/tabPage.js
/**
 * @param parent
 * @constructor
 * @augments Container
 */
function TabPage( parent ) {
    _.superClass( TabPage, this, parent );
    this.events = new EventsManager();
    var element = this;

    this.control.on( 'close', function() {
        element.close();
    } );
}

_.inherit( TabPage, Container );

/**
 * @description Возвращает изображение заголовка страницы
 * @returns {string}
 */
TabPage.prototype.getIcon = function() {
    return this.control.get( 'icon' );
};

/**
 * @description Устанавливает изображение заголовка страницы
 * @param {string} value
 */
TabPage.prototype.setIcon = function( value ) {
    this.control.set( 'icon', value );
};

/**
 * @description Возвращает значение, определяющее, разрешено ли закрытие страницы
 * @returns {boolean}
 */
TabPage.prototype.getCanClose = function() {
    return this.control.get( 'canClose' );
};

/**
 * @description Устанавливает значение, определяющее, разрешено ли закрытие страницы
 * @param {boolean} value
 */
TabPage.prototype.setCanClose = function( value ) {
    this.control.set( 'canClose', value );
};

/**
 * @description Закрывает страницу
 * @param {Function} [success] Необязательный. Обработчик события о том, что страница была закрыта
 * @param {Function} [error] Необязательный. Обработчик события о том, что при закрытии произошла ошибка
 */
TabPage.prototype.close = function( success, error ) {
    var canClose = this.getCanClose();
    var element = this;
    var events = this.events;

    if ( canClose ) {
        this.events.trigger( 'closing' )
            .done( function() {
                //@TODO Закрыть представление
                if ( element.parent ) {
                    element.parent.closeTab( element );
                }
                typeof success === 'function' && success();
                events.trigger( 'closed' );
            } )
            .fail( function() {
                typeof error === 'function' && error();
            } );
    }
};

/**
 * @description Устанавливает обработчик события о том, что страница закрывается
 * @param handler
 */
TabPage.prototype.onClosing = function( handler ) {
    this.events.on( 'closing', handler );
};

/**
 * @description Устанавливает обработчик события о том, что страница была закрыта
 * @param handler
 */
TabPage.prototype.onClosed = function( handler ) {
    this.events.on( 'closed', handler );
};

/**
 * @description Возвращает значение, определябщее что данная вкладка выбрана
 * @returns {boolean}
 */
TabPage.prototype.getSelected = function() {
    return this.control.get( 'selected' );
};

TabPage.prototype.setSelected = function( value ) {
    this.control.set( 'selected', value );
};

/**
 * @protected
 * @returns {PanelControl}
 */
TabPage.prototype.createControl = function() {
    return new TabPageControl();
};

InfinniUI.TabPage = TabPage;

//####app/elements/tabPanel/tabPage/tabPageBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 */
function TabPageBuilder() {
    _.superClass( TabPageBuilder, this );
}

_.inherit( TabPageBuilder, ContainerBuilder );

_.extend( TabPageBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {TabPage}
     */
    createElement: function( params ) {
        return new TabPage( params.parent );
    },

    /**
     * @param {Object} params
     * @param {Panel} params.element
     * @param {Object} params.metadata
     */
    applyMetadata: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var data = ContainerBuilder.prototype.applyMetadata.call( this, params );

        element.setIcon( metadata.Icon );
        element.setCanClose( metadata.CanClose );

        this.initScriptHandlers( params );

        return data;
    },

    /**
     * @protected
     * @param params
     */
    initScriptHandlers: function( params ) {
        var metadata = params.metadata;
        var element = params.element;
        var executorBuilderParams = {
            parentView: params.parentView,
            parent: element,
            basePathOfProperty: params.basePathOfProperty
        };

        if ( metadata.OnClosing ) {
            var onClosingExecutor = Executor( metadata.OnClosing, params.builder, executorBuilderParams );
            element.onClosing( onClosingExecutor.bind( null, {} ) );
        }

        if ( metadata.OnClosed ) {
            var onClosedExecutor = Executor( metadata.OnClosed, params.builder, executorBuilderParams );
            element.onClosed( onClosedExecutor.bind( null, {} ) );
        }
    }

} );

InfinniUI.TabPageBuilder = TabPageBuilder;

//####app/elements/tablePanel/cell/cell.js
/**
 * @param parent
 * @constructor
 * @augments Container
 */
function Cell( parent ) {
    _.superClass( Cell, this, parent );
}

_.inherit( Cell, Container );

_.extend( Cell.prototype, {

    /**
     *
     * @returns {CellControl}
     */
    createControl: function() {
        return new CellControl();
    },

    /**
     * @returns {*}
     */
    getColumnSpan: function() {
        return this.control.get( 'columnSpan' );
    },

    /**
     *
     * @param newColumnSpan
     */
    setColumnSpan: function( newColumnSpan ) {
        this.control.set( 'columnSpan', newColumnSpan );
    }

} );

InfinniUI.Cell = Cell;

//####app/elements/tablePanel/cell/cellBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 */
function CellBuilder() {
    _.superClass( CellBuilder, this );
}

_.inherit( CellBuilder, ContainerBuilder );

_.extend( CellBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {Cell}
     */
    createElement: function( params ) {
        return new Cell( params.parent );
    },

    /**
     * @param {Object} params
     * @param {CellBuilder} params.element
     * @param {Object} params.metadata
     */
    applyMetadata: function( params ) {
        var metadata = params.metadata;
        var element = params.element;

        ContainerBuilder.prototype.applyMetadata.call( this, params );

        element.setColumnSpan( metadata.ColumnSpan );
    }

} );

InfinniUI.CellBuilder = CellBuilder;

//####app/elements/tablePanel/row/row.js
/**
 * @param parent
 * @constructor
 * @augments Container
 */
function Row( parent ) {
    _.superClass( Row, this, parent );
}

_.inherit( Row, Container );

_.extend( Row.prototype, {

    /**
     *
     * @returns {RowControl}
     */
    createControl: function() {
        return new RowControl();
    }

} );

InfinniUI.Row = Row;

//####app/elements/tablePanel/row/rowBuilder.js
/**
 * @constructor
 * @augments ContainerBuilder
 */
function RowBuilder() {
    _.superClass( RowBuilder, this );
}

_.inherit( RowBuilder, ContainerBuilder );

_.extend( RowBuilder.prototype, {

    /**
     *
     * @param params
     * @returns {Row}
     */
    createElement: function( params ) {
        return new Row( params.parent );
    },

    /**
     * @param {Object} params
     * @param {RowBuilder} params.element
     * @param {Object} params.metadata
     */
    applyMetadata: function( params ) {
        ContainerBuilder.prototype.applyMetadata.call( this, params );
    }

} );

InfinniUI.RowBuilder = RowBuilder;

//####app/actions/_base/baseAction/baseAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function BaseAction( parentView ) {
    this.parentView = parentView;
    this._properties = Object.create( null );
    _.defaults( this._properties, this.defaults );
    this.initDefaultValues();
}

InfinniUI.BaseAction = BaseAction;

_.extend( BaseAction.prototype, {

    defaults: {
        canExecute: null
    },

    /**
     *
     * @param name
     * @param value
     */
    setProperty: function( name, value ) {
        var props = this._properties;
        if ( props[ name ] !== value ) {
            props[ name ] = value;
            this.trigger( 'change:' + name, this, value );
        }
    },

    /**
     *
     * @param name
     * @returns {*}
     */
    getProperty: function( name ) {
        return this._properties[ name ];
    },

    initDefaultValues: function() {
    },

    /**
     *
     * @param args
     */
    onExecutedHandler: function( args ) {
        var onExecutedHandler = this.getProperty( 'onExecutedHandler' );

        if( typeof onExecutedHandler === 'function' ) {
            onExecutedHandler( args );
        }
    },

    /**
     *
     * @param path
     * @returns {boolean}
     * @private
     */
    _isRootElementPath: function( path ) {
        return !path.includes( '.' );
    }

}, Backbone.Events );

/**
 *
 * @param context
 * @param executeActionMetadata
 * @param resultCallback
 */
InfinniUI.global.executeAction = function( context, executeActionMetadata, resultCallback ) {
    var builder = new ApplicationBuilder();
    var action = builder.build( executeActionMetadata, { parentView: context.view } );

    action.execute( resultCallback );
};

//####app/actions/_base/baseAction/baseActionBuilderMixin.js
/**
 *
 * @mixin
 */
var baseActionBuilderMixin = {

    /**
     *
     * @param action
     * @param params
     */
    applyBaseActionMetadata: function( action, params ) {
        var metadata = params.metadata;
        var executorBuilderParams = {
            parentView: params.parentView,
            parent: params.parent,
            basePathOfProperty: params.basePathOfProperty
        };

        if( 'OnExecuted' in metadata ) {
            var executor = Executor( metadata.OnExecuted, params.builder, executorBuilderParams );
            action.setProperty( 'onExecutedHandler', executor );
        }

        if( metadata.CanExecute ) {
            var canExecute = Executor( metadata.CanExecute, params.builder, executorBuilderParams );
            action.setProperty( 'canExecute', canExecute );
        }
    }

};

InfinniUI.baseActionBuilderMixin = baseActionBuilderMixin;

//####app/actions/_base/baseEditAction/baseEditAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function BaseEditAction( parentView ) {
    _.superClass( BaseEditAction, this, parentView );
}

InfinniUI.BaseEditAction = BaseEditAction;

_.inherit( BaseEditAction, BaseAction );

_.extend( BaseEditAction.prototype, {

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var that = this;
        var linkView = this.getProperty( 'linkView' );

        this.setProperty( 'callback', callback );

        linkView.createView( function( createdView ) {
            that.handleViewReady( createdView );
        } );
    },

    /**
     *
     * @param editView
     */
    handleViewReady: function( editView ) {
        var editSourceName = this.getProperty( 'sourceSource' );
        var editDataSource = editView.getContext().dataSources[ editSourceName ];
        var destinationSourceName = this.getProperty( 'destinationSource' );
        var destinationDataSource = this.parentView.getContext().dataSources[ destinationSourceName ];
        var that = this;

        this.setProperty( 'editDataSource', editDataSource );
        this.setProperty( 'destinationDataSource', destinationDataSource );

        var isSuccessfulPreset = this.setSelectedItem();

        if( isSuccessfulPreset ) {
            editView.open();

            editView.onClosed( function() {
                var dialogResult = editView.getDialogResult();

                if ( dialogResult == DialogResult.accepted ) {
                    that.handleClosingView();
                }
            } );
        } else {
            editView.close();
        }
    },

    handleClosingView: function() {
        var callback = this.getProperty( 'callback' );

        this.save();
        this.onExecutedHandler();

        if ( typeof callback === 'function' ) {
            callback();
        }
    },

    /**
     *
     * @param source
     * @returns {boolean}
     * @private
     */
    _isObjectDataSource: function( source ) {
        return 'setItems' in source;
    }

} );

//####app/actions/_base/baseEditAction/baseEditActionBuilderMixin.js
/**
 *
 * @mixin
 */
var baseEditActionBuilderMixin = {

    /**
     *
     * @param action
     * @param args
     */
    applyBaseEditActionMetadata: function( action, args ) {
        var metadata = args.metadata;
        var parentView = args.parentView;
        var builder = args.builder;
        var suspended = {};

        suspended[ metadata.SourceValue.Source ] = 'BaseEditAction';

        var linkView = builder.build( metadata[ 'LinkView' ], {
            parent: args.parent,
            parentView: parentView,
            basePathOfProperty: args.basePathOfProperty,
            suspended: suspended
        } );

        action.setProperty( 'linkView', linkView );
        action.setProperty( 'sourceSource', metadata.SourceValue.Source );

        if( metadata.DestinationValue && metadata.DestinationValue.Source ) {
            action.setProperty( 'destinationSource', metadata.DestinationValue.Source );

            var destinationProperty = ( args.basePathOfProperty !== null && typeof args.basePathOfProperty !== 'undefined' ) ?
                args.basePathOfProperty.resolveProperty( metadata.DestinationValue.Property ) :
                metadata.DestinationValue.Property;

            action.setProperty( 'destinationProperty', destinationProperty );
        }
    }

};

InfinniUI.baseEditActionBuilderMixin = baseEditActionBuilderMixin;

//####app/actions/_base/baseFallibleAction/baseFallibleActionBuilderMixin.js
/**
 *
 * @mixin
 */
var baseFallibleActionBuilderMixin = {

    /**
     *
     * @param action
     * @param params
     */
    applyBaseFallibleActionMetadata: function( action, params ) {
        var metadata = params.metadata;
        var executorBuilderParams = {
            parentView: params.parentView,
            parent: params.parent,
            basePathOfProperty: params.basePathOfProperty
        };

        if( 'OnSuccess' in metadata ) {
            var onSuccessExecutor = Executor( metadata.OnSuccess, params.builder, executorBuilderParams );
            action.setProperty( 'onSuccessHandler', onSuccessExecutor );
        }

        if( 'OnError' in metadata ) {
            var onErrorExecutor = Executor( metadata.OnError, params.builder, executorBuilderParams );
            action.setProperty( 'onErrorHandler', onErrorExecutor );
        }
    }

};

InfinniUI.baseFallibleActionBuilderMixin = baseFallibleActionBuilderMixin;

//####app/actions/_base/baseFallibleAction/baseFallibleActionMixin.js
/**
 *
 * @mixin
 */
var baseFallibleActionMixin = {

    /**
     *
     * @param args
     */
    onSuccessHandler: function( args ) {
        var onSuccessHandler = this.getProperty( 'onSuccessHandler' );

        if( typeof onSuccessHandler === 'function' ) {
            onSuccessHandler( args );
        }
    },

    /**
     *
     * @param args
     */
    onErrorHandler: function( args ) {
        var onErrorHandler = this.getProperty( 'onErrorHandler' );

        if( typeof onErrorHandler === 'function' ) {
            onErrorHandler( args );
        }
    }

};

InfinniUI.baseFallibleActionMixin = baseFallibleActionMixin;

//####app/actions/acceptAction/acceptAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function AcceptAction( parentView ) {
    _.superClass( AcceptAction, this, parentView );
}

_.inherit( AcceptAction, BaseAction );

_.extend( AcceptAction.prototype, {

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var that = this;

        this.parentView.onClosed( function() {
            that.onExecutedHandler();

            if( callback ) {
                callback();
            }
        } );

        this.parentView.setDialogResult( DialogResult.accepted );
        this.parentView.close();
    }

} );

InfinniUI.AcceptAction = AcceptAction;

//####app/actions/acceptAction/acceptActionBuilder.js
/**
 *
 * @constructor
 */
function AcceptActionBuilder() {
}

_.extend( AcceptActionBuilder.prototype, baseActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {AcceptAction}
     */
    build: function( context, args ) {
        var action = new AcceptAction( args.parentView );

        this.applyBaseActionMetadata( action, args );

        return action;
    }

} );

InfinniUI.AcceptActionBuilder = AcceptActionBuilder;

//####app/actions/addAction/addAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function AddAction( parentView ) {
    _.superClass( AddAction, this, parentView );
}

_.inherit( AddAction, BaseEditAction );

_.extend( AddAction.prototype, {

    /**
     *
     * @returns {boolean}
     */
    setSelectedItem: function() {
        var editDataSource = this.getProperty( 'editDataSource' );
        var editView = editDataSource.getView();

        editView.onBeforeLoaded( function() {
            editDataSource.createItem();
        } );

        return true;
    },

    /**
     * Save item in destination data source
     */
    save: function() {
        var editDataSource = this.getProperty( 'editDataSource' );
        var destinationDataSource = this.getProperty( 'destinationDataSource' );
        var destinationProperty = this.getProperty( 'destinationProperty' ) || '';

        if( !destinationDataSource ) {
            return;
        }

        if( this._isObjectDataSource( editDataSource ) ) {
            var newItem = editDataSource.getSelectedItem();

            if( this._isRootElementPath( destinationProperty ) ) {
                destinationDataSource._includeItemToModifiedSet( newItem );
                destinationDataSource.saveItem( newItem, function() {
                    destinationDataSource.updateItems();
                } );
            } else {
                var items = destinationDataSource.getProperty( destinationProperty ) || [];

                items = _.clone( items );
                items.push( newItem );

                destinationDataSource.setProperty( destinationProperty, items );
            }
        } else {
            destinationDataSource.updateItems();
        }
    }

} );

InfinniUI.AddAction = AddAction;

//####app/actions/addAction/addActionBuilder.js
/**
 *
 * @constructor
 */
function AddActionBuilder() {
}

_.extend( AddActionBuilder.prototype, baseActionBuilderMixin, baseEditActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {AddAction}
     */
    build: function( context, args ) {
        var action = new AddAction( args.parentView );

        this.applyBaseActionMetadata( action, args );
        this.applyBaseEditActionMetadata( action, args );

        return action;
    }

} );

InfinniUI.AddActionBuilder = AddActionBuilder;

//####app/actions/cancelAction/cancelAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function CancelAction( parentView ) {
    _.superClass( CancelAction, this, parentView );
}

_.inherit( CancelAction, BaseAction );

_.extend( CancelAction.prototype, {

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var that = this;

        this.parentView.onClosed( function() {
            that.onExecutedHandler();

            if ( callback ) {
                callback();
            }
        } );

        this.parentView.setDialogResult( DialogResult.canceled );
        this.parentView.close();
    }

} );

InfinniUI.CancelAction = CancelAction;

//####app/actions/cancelAction/cancelActionBuilder.js
/**
 *
 * @constructor
 */
function CancelActionBuilder() {
}

_.extend( CancelActionBuilder.prototype, baseActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {CancelAction}
     */
    build: function( context, args ) {
        var action = new CancelAction( args.parentView );

        this.applyBaseActionMetadata( action, args );

        return action;
    }

} );

InfinniUI.CancelActionBuilder = CancelActionBuilder;

//####app/actions/createItemAction/createItemAction.js
/**
 *
 * @constructor
 */
function CreateItemAction() {
    _.superClass( CreateItemAction, this );
}

_.inherit( CreateItemAction, BaseAction );

_.extend( CreateItemAction.prototype, {

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var destinationDataSource = this.getProperty( 'destinationDataSource' );
        var destinationProperty = this.getProperty( 'destinationProperty' ) || '';

        if( !destinationDataSource ) {
            return;
        }

        if( !destinationProperty || this._isRootElementPath( destinationProperty ) ) {
            destinationDataSource.createItem( function( context, args ) {
                if( callback ) {
                    callback();
                }
            } );
        } else {
            var items = destinationDataSource.getProperty( destinationProperty ) || [];

            items = _.clone( items );
            items.push( {} );

            destinationDataSource.setProperty( destinationProperty, items );

            if( callback ) {
                callback();
            }
        }
    }

} );

InfinniUI.CreateItemAction = CreateItemAction;

//####app/actions/createItemAction/createItemActionBuilder.js
/**
 *
 * @constructor
 */
function CreateItemActionBuilder() {
}

_.extend( CreateItemActionBuilder.prototype, baseActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {CreateItemAction}
     */
    build: function( context, args ) {
        var action = new CreateItemAction( args.parentView );
        var metadata = args.metadata;

        this.applyBaseActionMetadata( action, args );

        if( metadata.DestinationValue && metadata.DestinationValue.Source ) {
            action.setProperty( 'destinationSource', metadata.DestinationValue.Source );
            action.setProperty( 'destinationDataSource', context.dataSources[ metadata.DestinationValue.Source ] );

            var destinationProperty = ( args.basePathOfProperty !== null && typeof args.basePathOfProperty !== 'undefined' ) ?
                args.basePathOfProperty.resolveProperty( metadata.DestinationValue.Property ) :
                metadata.DestinationValue.Property;

            action.setProperty( 'destinationProperty', destinationProperty );
        }

        return action;
    }

} );

InfinniUI.CreateItemActionBuilder = CreateItemActionBuilder;

//####app/actions/deleteAction/deleteAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function DeleteAction( parentView ) {
    _.superClass( DeleteAction, this, parentView );
}

_.inherit( DeleteAction, BaseAction );

_.extend( DeleteAction.prototype, baseFallibleActionMixin, {

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var accept = this.getProperty( 'accept' );
        var that = this;
        var dataSource = this.getProperty( 'destinationSource' );
        var property = this.getProperty( 'destinationProperty' );
        var acceptMessage = this.getProperty( 'acceptMessage' ) || localized.strings.DeleteAction.warnMessage;
        var acceptMessageType = this.getProperty( 'acceptMessageType' ) || 'default';

        if( dataSource.getProperty( property ) ) {
            if( accept ) {
                new MessageBox( {
                    text: acceptMessage,
                    type: acceptMessageType,
                    buttons: [
                        {
                            name: localized.strings.DeleteAction.agree,
                            type: 'action',
                            onClick: function() {
                                that.remove( callback );
                            }
                        },
                        {
                            name: localized.strings.DeleteAction.disagree
                        }
                    ]
                } );
            } else {
                this.remove( callback );
            }
        } else {
            new MessageBox( {
                text: localized.strings.DeleteAction.warnMessageNoItem,
                type: 'error',
                buttons: [
                    {
                        name: localized.strings.DeleteAction.cancel
                    }
                ]
            } );
        }
    },

    /**
     *
     * @param callback
     */
    remove: function( callback ) {
        var dataSource = this.getProperty( 'destinationSource' );
        var property = this.getProperty( 'destinationProperty' );

        if( this._isRootElementPath( property ) ) {
            this._deleteDocument( dataSource, property, callback );
        } else {
            this._deleteArrayElement( dataSource, property, callback );
        }
    },

    /**
     *
     * @param dataSource
     * @param property
     * @param callback
     * @private
     */
    _deleteDocument: function( dataSource, property, callback ) {
        var that = this;
        var onSuccessDelete = function( context, args ) {
            dataSource.updateItems();

            that.onExecutedHandler( args );
            that.onSuccessHandler( args );

            if( typeof callback === 'function' ) {
                callback();
            }
        };
        var onErrorDelete = function( context, args ) {
            that.onExecutedHandler( args );
            that.onErrorHandler( args );

            if( typeof callback === 'function' ) {
                callback();
            }
        };
        var selectedItem = dataSource.getProperty( property );

        dataSource.deleteItem( selectedItem, onSuccessDelete, onErrorDelete );
    },

    /**
     *
     * @param dataSource
     * @param {string} property
     * @param callback
     * @private
     */
    _deleteArrayElement: function( dataSource, property, callback ) {
        var propertyPathList = property.split( '.' );
        var index = propertyPathList.pop();
        var parentProperty = propertyPathList.join( '.' );
        var items = dataSource.getProperty( parentProperty );

        items = _.clone( items );
        items.splice( index, 1 );
        dataSource.setProperty( parentProperty, items );

        this.onExecutedHandler();
        this.onSuccessHandler();

        if( typeof callback === 'function' ) {
            callback();
        }
    }

} );

InfinniUI.DeleteAction = DeleteAction;

//####app/actions/deleteAction/deleteActionBuilder.js
/**
 *
 * @constructor
 */
function DeleteActionBuilder() {
}

_.extend( DeleteActionBuilder.prototype, baseActionBuilderMixin, baseFallibleActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {DeleteAction}
     */
    build: function( context, args ) {
        var metadata = args.metadata;
        var parentView = args.parentView;
        var sourceName = metadata.DestinationValue.Source;
        var propertyName = metadata.DestinationValue.Property || '$';
        var action = new DeleteAction( parentView );

        this.applyBaseActionMetadata( action, args );
        this.applyBaseFallibleActionMetadata( action, args );

        var accept = ( metadata[ 'Accept' ] !== false );
        var dataSource = parentView.getContext().dataSources[ sourceName ];
        var destinationProperty = ( args.basePathOfProperty !== null && typeof args.basePathOfProperty !== 'undefined' ) ?
            args.basePathOfProperty.resolveProperty( propertyName ) :
            propertyName;

        action.setProperty( 'accept', accept );
        action.setProperty( 'acceptMessage', metadata.AcceptMessage );
        action.setProperty( 'acceptMessageType', metadata.AcceptMessageType );
        action.setProperty( 'destinationSource', dataSource );
        action.setProperty( 'destinationProperty', destinationProperty );

        return action;
    }

} );

InfinniUI.DeleteActionBuilder = DeleteActionBuilder;

//####app/actions/editAction/editAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function EditAction( parentView ) {
    _.superClass( EditAction, this, parentView );
}

_.inherit( EditAction, BaseEditAction );

_.extend( EditAction.prototype, {

    /**
     *
     * @returns {boolean}
     */
    setSelectedItem: function() {
        var editDataSource = this.getProperty( 'editDataSource' );
        var destinationDataSource = this.getProperty( 'destinationDataSource' );
        var destinationProperty = this.getProperty( 'destinationProperty' );
        var selectedItem = destinationDataSource.getProperty( destinationProperty );

        if( selectedItem === null || typeof selectedItem === 'undefined' ) {
            // if selectedItem is empty and it is must be document
            // return error
            if( this._isRootElementPath( destinationProperty ) ) {
                var logger = InfinniUI.global.logger;
                var message = stringUtils.format( 'EditAction: edit item has not been found. {0} does not have item by path "{1}"', [ destinationDataSource.getName(), destinationProperty ] );
                logger.error( message );

                return false;
            }

            // but if selectedItem is property of document
            // it will be created
            selectedItem = selectedItem || {};
        }

        if( this._isObjectDataSource( editDataSource ) ) {
            this._setItem( editDataSource, selectedItem );
        } else {
            this._setDocument( editDataSource, selectedItem );
        }

        return true;
    },

    /**
     *
     * @private
     */
    _resumeUpdateEditDataSource: function() {
        var editDataSource = this.getProperty( 'editDataSource' );

        editDataSource.resumeUpdate( 'BaseEditAction' );
    },

    /**
     *
     * @param editDataSource
     * @param selectedItem
     * @private
     */
    _setDocument: function( editDataSource, selectedItem ) {
        var selectedItemId = editDataSource.idOfItem( selectedItem );

        editDataSource.setIdFilter( selectedItemId );
        editDataSource.tryInitData();
        this._resumeUpdateEditDataSource();
    },

    /**
     *
     * @param editDataSource
     * @param selectedItem
     * @private
     */
    _setItem: function( editDataSource, selectedItem ) {
        var item = _.recursiveDeepCopy( selectedItem );

        if( typeof item === 'undefined' || item === null ) {
            item = {};
        }
        this._resumeUpdateEditDataSource();
        editDataSource.setItems( [ item ] );
        editDataSource.setSelectedItem( item );
    },

    /**
     * save item in destination data source
     */
    save: function() {
        var editDataSource = this.getProperty( 'editDataSource' );
        var destinationDataSource = this.getProperty( 'destinationDataSource' );
        var destinationProperty = this.getProperty( 'destinationProperty' );

        if( this._isObjectDataSource( editDataSource ) ) {
            var editedItem = editDataSource.getSelectedItem();
            var originItem = destinationDataSource.getProperty( destinationProperty );

            if( this._isRootElementPath( destinationProperty ) ) {
                this._overrideOriginItem( originItem, editedItem );
                destinationDataSource._includeItemToModifiedSet( originItem );
                destinationDataSource.saveItem( originItem, function() {
                    destinationDataSource.updateItems();
                } );
            } else {
                destinationDataSource.setProperty( destinationProperty, editedItem );
            }

        } else {
            destinationDataSource.updateItems();
        }
    },

    /**
     *
     * @param originItem
     * @param newItem
     * @private
     */
    _overrideOriginItem: function( originItem, newItem ) {
        var property;

        for( property in originItem ) {
            delete originItem[ property ];
        }

        for( property in newItem ) {
            originItem[ property ] = _.clone( newItem[ property ] );
        }
    }

} );

InfinniUI.EditAction = EditAction;

//####app/actions/editAction/editActionBuilder.js
/**
 *
 * @constructor
 */
function EditActionBuilder() {
}

_.extend( EditActionBuilder.prototype, baseActionBuilderMixin, baseEditActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {EditAction}
     */
    build: function( context, args ) {
        var action = new EditAction( args.parentView );

        this.applyBaseActionMetadata( action, args );
        this.applyBaseEditActionMetadata( action, args );

        return action;
    }

} );

InfinniUI.EditActionBuilder = EditActionBuilder;

//####app/actions/openAction/openAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function OpenAction( parentView ) {
    _.superClass( OpenAction, this, parentView );
}

_.inherit( OpenAction, BaseAction );

_.extend( OpenAction.prototype, {

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var linkView = this.getProperty( 'linkView' );
        var that = this;

        linkView.createView( function( view ) {
            view.onLoaded( function() {
                that.onExecutedHandler();

                if ( callback ) {
                    callback( view );
                }
            } );

            view.open();
        } );
    }

} );

InfinniUI.OpenAction = OpenAction;

//####app/actions/openAction/openActionBuilder.js
/**
 *
 * @constructor
 */
function OpenActionBuilder() {
}


_.extend( OpenActionBuilder.prototype, baseActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {OpenAction}
     */
    build: function( context, args ) {
        var action = new OpenAction( args.parentView );

        this.applyBaseActionMetadata( action, args );

        var linkView = args.builder.build( args.metadata.LinkView, {
            parent: args.parent,
            parentView: args.parentView,
            basePathOfProperty: args.basePathOfProperty
        } );
        action.setProperty( 'linkView', linkView );

        return action;
    }

} );

InfinniUI.OpenActionBuilder = OpenActionBuilder;

//####app/actions/routeToAction/routeToAction.js
/**
 *
 * @constructor
 */
function RouteToAction() {
    _.superClass( RouteToAction, this );
    this.href = '';
    this.replace = false;
}

_.inherit( RouteToAction, BaseAction );

_.extend( RouteToAction.prototype, {

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var router = InfinniUI.AppRouter;
        var href = this.getHref();
        var replace = this.getReplace();
        var options = {
            trigger: true
        };

        if( replace ) {
            options.replace = true;
        }
        router.navigate( href, options );
    },

    /**
     *
     * @returns {string}
     */
    getHref: function() {
        return this.href;
    },

    /**
     *
     * @param {string} href
     */
    setHref: function( href ) {
        this.href = href;
    },

    /**
     *
     * @returns {boolean}
     */
    getReplace: function() {
        return this.replace;
    },

    /**
     *
     * @param {boolean} replace
     */
    setReplace: function( replace ) {
        if( typeof replace === 'boolean' ) {
            this.replace = replace;
        }
    }

} );

InfinniUI.RouteToAction = RouteToAction;

//####app/actions/routeToAction/routeToActionBuilder.js
/**
 *
 * @constructor
 */
function RouteToActionBuilder() {
}

_.extend( RouteToActionBuilder.prototype, baseActionBuilderMixin, routerServiceMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {RouteToAction}
     */
    build: function( context, args ) {
        var action = new RouteToAction();
        var newHref = InfinniUI.routerService.getLinkByName( args.metadata.Name, 'no' );
        var hrefParams = args.metadata.Params;
        var query = args.metadata.Query;
        var replace = args.metadata.Replace; // when true, can delete url from history

        action.setReplace( replace );
        action.setHref( newHref );
        args.element = action;

        if( hrefParams ) {
            for( var i = 0, ii = hrefParams.length; i < ii; i += 1 ) {
                if( typeof hrefParams[ i ].Value === 'string' ) {
                    if( action.getHref() !== newHref ) {
                        newHref = action.getHref();
                    }
                    newHref = this.replaceParamsInHref( newHref, hrefParams[ i ].Name, hrefParams[ i ].Value );
                    action.setHref( newHref );
                } else {
                    this.bindParams( args, hrefParams[ i ].Name, hrefParams[ i ].Value, newHref );
                }
            }
        }

        if( query ) {
            for( var j = 0, jj = query.length; j < jj; j += 1 ) {
                if( typeof query[ j ].Value === 'string' ) {
                    if( action.getHref() !== newHref ) {
                        newHref = action.getHref();
                    }
                    newHref = this.replaceParamsInQuery( newHref, query[ j ].Name, query[ j ].Value );
                    action.setHref( newHref );
                } else {
                    this.bindQuery( args, query[ j ].Name, query[ j ].Value, newHref );
                }
            }
        }
        return action;
    }

} );

InfinniUI.RouteToActionBuilder = RouteToActionBuilder;

//####app/actions/saveAction/saveAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function SaveAction( parentView ) {
    _.superClass( SaveAction, this, parentView );
}

_.inherit( SaveAction, BaseAction );

_.extend( SaveAction.prototype, baseFallibleActionMixin, {

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var parentView = this.parentView;
        var dataSource = this.getProperty( 'dataSource' );
        var canClose = this.getProperty( 'canClose' );
        var that = this;
        var onSuccessSave = function( context, args ) {
            parentView.setDialogResult( DialogResult.accepted );

            if( canClose !== false ) {
                parentView.close();
            }

            that.onExecutedHandler( args );
            that.onSuccessHandler( args );

            if( typeof callback === 'function' ) {
                callback( context, args );
            }
        };
        var onErrorSave = function( context, args ) {
            that.onExecutedHandler( args );
            that.onErrorHandler( args );

            if( typeof callback === 'function' ) {
                callback( context, args );
            }
        };

        var selectedItem = dataSource.getSelectedItem();

        dataSource.saveItem( selectedItem, onSuccessSave, onErrorSave );
    }

} );

InfinniUI.SaveAction = SaveAction;

//####app/actions/saveAction/saveActionBuilder.js
/**
 *
 * @constructor
 */
function SaveActionBuilder() {
}

_.extend( SaveActionBuilder.prototype, baseActionBuilderMixin, baseFallibleActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {SaveAction}
     */
    build: function( context, args ) {
        var parentView = args.parentView;
        var dataSource = parentView.getContext().dataSources[ args.metadata.DestinationValue.Source ];
        var action = new SaveAction( parentView );

        this.applyBaseActionMetadata( action, args );
        this.applyBaseFallibleActionMetadata( action, args );

        action.setProperty( 'dataSource', dataSource );
        action.setProperty( 'canClose', args.metadata.CanClose );

        return action;
    }

} );

InfinniUI.SaveActionBuilder = SaveActionBuilder;

//####app/actions/selectAction/selectAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function SelectAction( parentView ) {
    _.superClass( SelectAction, this, parentView );
}

_.inherit( SelectAction, BaseAction );

_.extend( SelectAction.prototype, {

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var that = this;
        var parentView = this.parentView;
        var linkView = this.getProperty( 'linkView' );
        var srcDataSourceName = this.getProperty( 'sourceSource' );
        var srcPropertyName = this.getProperty( 'sourceProperty' );
        var dstDataSourceName = this.getProperty( 'destinationSource' );
        var dstPropertyName = this.getProperty( 'destinationProperty' );

        linkView.createView( function( createdView ) {
            createdView.onClosed( function( context, args ) {
                var dialogResult = createdView.getDialogResult();

                if( dialogResult == DialogResult.accepted ) {
                    var srcDataSource = createdView.getContext().dataSources[ srcDataSourceName ];
                    var dstDataSource = parentView.getContext().dataSources[ dstDataSourceName ];
                    var value = srcDataSource.getProperty( srcPropertyName );

                    dstDataSource.setProperty( dstPropertyName, value );
                }

                that.onExecutedHandler( args );

                if( callback ) {
                    callback( context, args );
                }
            } );

            createdView.open();
        } );
    }

} );

InfinniUI.SelectAction = SelectAction;

//####app/actions/selectAction/selectActionBuilder.js
/**
 *
 * @constructor
 */
function SelectActionBuilder() {
}

_.extend( SelectActionBuilder.prototype, baseActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {SelectAction}
     */
    build: function( context, args ) {
        var builder = args.builder;
        var metadata = args.metadata;
        var parentView = args.parentView;
        var action = new SelectAction( parentView );

        this.applyBaseActionMetadata( action, args );

        var linkView = builder.build( metadata[ 'LinkView' ], { parentView: parentView } );

        action.setProperty( 'linkView', linkView );
        action.setProperty( 'sourceSource', metadata.SourceValue.Source );
        action.setProperty( 'sourceProperty', metadata.SourceValue.Property );
        action.setProperty( 'destinationSource', metadata.DestinationValue.Source );
        action.setProperty( 'destinationProperty', metadata.DestinationValue.Property );

        return action;
    }

} );

InfinniUI.SelectActionBuilder = SelectActionBuilder;

//####app/actions/serverAction/downloadExecutor.js
/**
 * @description
 * Для закачки контента по POST запросу используется подход: {@link http://gruffcode.com/2010/10/28/detecting-the-file-download-dialog-in-the-browser/}
 * @param resultCallback
 * @param successCallback
 * @param failCallback
 * @constructor
 */
function DownloadExecutor( resultCallback, successCallback, failCallback ) {
    this.guid = guid();
    this.options = {
        timeout: 1 * 60 * 1000,
        poll: 100
    };

    this.resultCallback = resultCallback;
    this.successCallback = successCallback;
    this.failCallback = failCallback;
}

InfinniUI.DownloadExecutor = DownloadExecutor;

/**
 *
 * @param options
 */
DownloadExecutor.prototype.config = function( options ) {
    _.extend( this.options, options );
};

/**
 *
 * @param requestData
 */
DownloadExecutor.prototype.run = function( requestData ) {
    var cleanup = this.cleanup.bind( this );
    var onResult = function() {
        if( typeof this.resultCallback === 'function' ) {
            this.resultCallback.apply( this, arguments );
        }
    }.bind( this );
    var onSuccess = function( data ) {
        if( typeof this.successCallback === 'function' ) {
            this.successCallback.call( this, data );
        }
        onResult( data );
    }.bind( this );
    var onError = function( err ) {
        if( typeof this.successCallback === 'function' ) {
            this.successCallback.call( this, data );
        }
        onResult( err );
    };

    this.waitResponse( cleanup )
        .always( function() {
            cleanup();
        } )
        .done( onSuccess )
        .fail( onError );

    this.openWindow( requestData );
};

/**
 *
 * @param requestData
 */
DownloadExecutor.prototype.openWindow = function( requestData ) {
    var windowName = this.getName( 'window' );
    var form = document.createElement( 'form' );

    this.form = form;

    form.setAttribute( 'method', requestData.method );
    form.setAttribute( 'action', requestData.requestUrl );
    form.setAttribute( 'target', windowName );
    form.setAttribute( 'style', 'display: none;' );

    var dataField = document.createElement( 'input' );
    dataField.setAttribute( 'name', 'data' );
    dataField.setAttribute( 'value', JSON.stringify( requestData.args ) );
    form.appendChild( dataField );

    //Cookie которую долден вернуть сервер с отправкой запрошенного контента
    var tokenField = document.createElement( 'input' );
    tokenField.setAttribute( 'name', 'token' );
    tokenField.setAttribute( 'value', this.getName( 'token' ) );
    form.appendChild( tokenField );

    document.body.appendChild( form );
    this.popup = window.open( 'about:blank', windowName );
    form.submit();
};

/**
 *
 * @param name
 * @returns {*}
 */
DownloadExecutor.prototype.getName = function( name ) {
    return name + this.guid;
};

/**
 *
 */
DownloadExecutor.prototype.cleanup = function() {
    clearInterval( this.intervalId );
    clearTimeout( this.timeout );
    $.removeCookie( this.getName( 'token' ) );
    if( this.form ) {
        this.form.remove();
        this.form = null;
    }
    if( this.popup ) {
        this.popup.close();
        this.popup = null;
    }
};

/**
 *
 * @param beforeStart
 * @returns {Promise}
 */
DownloadExecutor.prototype.waitResponse = function( beforeStart ) {
    var cookieName = this.getName( 'token' );
    var defer = $.Deferred( beforeStart );

    //Check cookie from server's response
    this.intervalId = setInterval( function() {
        var cookie = $.cookie( cookieName );
        if( cookie === cookieName ) {
            defer.resolve();
        }
    }, this.options.poll );

    //Check timeout
    this.timeout = setTimeout( function() {
        defer.reject();
    }, this.options.timeout );

    return defer.promise();
};

//####app/actions/serverAction/serverAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function ServerAction( parentView ) {
    _.superClass( ServerAction, this, parentView );
    this.provider = InfinniUI.providerRegister.build( 'ServerActionProvider' );
    this.updateContentTypeStrategy();
    this.on( 'change:contentType', this.updateContentTypeStrategy );
}

_.inherit( ServerAction, BaseAction );

_.extend( ServerAction.prototype, baseFallibleActionMixin, {

    defaults: {
        contentType: 'application/x-www-form-urlencoded; charset=utf-8',
        method: 'GET',
        data: {}
    },

    /**
     *
     */
    updateContentTypeStrategy: function() {
        var contentType = this.getProperty( 'contentType' );

        if( typeof contentType === 'string' && contentType.includes( 'multipart' ) ) {
            this.contentTypeStrategy = serverActionContentTypeStrategy[ 'File' ];
        } else {
            this.contentTypeStrategy = serverActionContentTypeStrategy[ 'Object' ];
        }
    },

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var that = this;
        var onExecuted = function( args ) {
            that.onExecutedHandler( args );

            if( typeof callback === 'function' ) {
                callback( args );
            }
        };
        var onSuccess = function( args ) {
            that.onSuccessHandler( args );
        };
        var onError = function( args ) {
            that.onErrorHandler( args );
        };

        this.contentTypeStrategy.run( this.provider, this._getRequestData(), onExecuted, onSuccess, onError );
    },

    /**
     *
     * @param name
     * @param value
     */
    setParam: function( name, value ) {
        this.setProperty( 'params.' + name, value );
    },

    /**
     *
     * @param name
     * @returns {*}
     */
    getParam: function( name ) {
        return this.getProperty( 'params.' + name );
    },

    /**
     *
     * @returns {object}
     * @private
     */
    _getRequestData: function() {
        var origin = this._replaceParamsInStr( this.getProperty( 'origin' ) );
        var path = this._replaceParamsInStr( this.getProperty( 'path' ) );
        var method = this.getProperty( 'method' ).toUpperCase();
        var contentType = this.getProperty( 'contentType' );
        var data = this._replaceParamsInObject( this.getProperty( 'data' ) );
        var result = {};

        result.requestUrl = origin + path;
        result.method = method;
        result.contentType = contentType;

        if( !_.isEmpty( data ) ) {
            if( method == 'GET' ) {
                result.requestUrl = result.requestUrl + '?' + stringUtils.joinDataForQuery( data );
            } else {
                result.args = ( typeof contentType === 'string' && contentType.includes( 'application/json' ) ) ? JSON.stringify( data ) : data;
            }
        }

        return result;
    },

    /**
     *
     * @param str
     * @param escape
     * @returns {*}
     * @private
     */
    _replaceParamsInStr: function( str, escape ) {
        if( !str || typeof str !== 'string' ) {
            return str;
        }

        var that = this;
        var matched = str.match( /^<%([\s\S]+?)%>$/ );

        if( matched ) {
            return this.getParam( matched[ 1 ] );
        }

        return str.replace( /<%([\s\S]+?)%>/g, function( p1, p2 ) {
            var val = that.getParam( p2 );

            if( escape && typeof val === 'string' ) {
                val = val.replace( /"/g, '\\"' );
            }
            return val;
        } );
    },

    /**
     *
     * @param data
     * @returns {*}
     * @private
     */
    _compileData: function( data ) {
        var res;

        if( Array.isArray( data ) ) {
            res = Array.map( function( item ) {
                if( typeof item === 'object' || Array.isArray( item ) ) {
                    this._compileData( item );
                }
            }, this );
        } else if( typeof data === 'object' ) {
            res = {};

            for( var key in Object.keys( data ) ) {
                var name = Object.keys( data )[ key ];
                var parsedName = this._replaceParamsInStr( name );

                res[ parsedName ] = this._compileData( data[ name ] );
            }
        } else {
            res = this._replaceParamsInStr( data, true );
        }

        return res;
    },

    /**
     *
     * @param obj
     * @returns {*}
     * @private
     */
    _replaceParamsInObject: function( obj ) {
        if( _.isEmpty( obj ) ) {
            return obj;
        }

        return this._compileData( obj );
    }

} );

InfinniUI.ServerAction = ServerAction;

//####app/actions/serverAction/serverActionBuilder.js
/**
 *
 * @constructor
 */
function ServerActionBuilder() {
}

_.extend( ServerActionBuilder.prototype, baseActionBuilderMixin, baseFallibleActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {ServerAction}
     */
    build: function( context, args ) {
        var builder = args.builder;
        var metadata = args.metadata;
        var parentView = args.parentView;
        var action = new ServerAction( parentView );

        this.applyBaseActionMetadata( action, args );
        this.applyBaseFallibleActionMetadata( action, args );

        action.setProperty( 'origin', metadata.Origin || InfinniUI.config.serverUrl.replace( /\/$/, '' ) );
        action.setProperty( 'path', metadata.Path );

        if( metadata.Data ) {
            action.setProperty( 'data', metadata.Data );
        }

        if( metadata.Method ) {
            action.setProperty( 'method', metadata.Method );
        }

        if( metadata.ContentType || metadata.ContentType === false ) {
            action.setProperty( 'contentType', metadata.ContentType );
        }

        if( metadata.Params ) {
            for( var name in metadata.Params ) {
                var value = metadata.Params[ name ];

                if( Array.isArray( value ) || value === null || typeof value !== 'object' ) {
                    if( value !== undefined ) {
                        action.setParam( name, value );
                    }
                } else {
                    var buildParams = {
                        parent: parentView,
                        parentView: parentView,
                        basePathOfProperty: args.basePathOfProperty
                    };

                    this._initBinding( name, value, action, buildParams, builder );
                }
            }
        }

        return action;
    },

    /**
     *
     * @param paramName
     * @param paramValue
     * @param action
     * @param buildParams
     * @param builder
     * @private
     */
    _initBinding: function( paramName, paramValue, action, buildParams, builder ) {
        var dataBinding = builder.buildBinding( paramValue, buildParams );

        dataBinding.setMode( InfinniUI.BindingModes.toElement );
        dataBinding.bindElement( {
            setProperty: function( name, value ) {
                action.setParam( name, value );
            },

            onPropertyChanged: function() {
            }
        }, paramName );
    }

} );

InfinniUI.ServerActionBuilder = ServerActionBuilder;

//####app/actions/serverAction/serverActionContentTypeStrategy.js
/**
 *
 * @mixin
 */
var serverActionContentTypeStrategy = {

    'File': {
        /**
         *
         * @param provider
         * @param params
         * @param callback
         * @param onSuccess
         * @param onError
         */
        run: function( provider, params, callback, onSuccess, onError ) {
            provider.download( params, callback, onSuccess, onError );
        }
    },
    'Object': {
        /**
         *
         * @param provider
         * @param params
         * @param callback
         * @param onSuccess
         * @param onError
         */
        run: function( provider, params, callback, onSuccess, onError ) {
            provider.request( params, callback, onSuccess, onError );
        }
    }

};

InfinniUI.serverActionContentTypeStrategy = serverActionContentTypeStrategy;

//####app/actions/updateAction/updateAction.js
/**
 *
 * @param parentView
 * @constructor
 */
function UpdateAction( parentView ) {
    _.superClass( UpdateAction, this, parentView );
}

_.inherit( UpdateAction, BaseAction );

_.extend( UpdateAction.prototype, baseFallibleActionMixin, {

    /**
     *
     * @param callback
     */
    execute: function( callback ) {
        var that = this;
        var dataSource = this.getProperty( 'dataSource' );
        var onSuccessUpdate = function( context, args ) {
            that.onExecutedHandler( args );
            that.onSuccessHandler( args );

            if( typeof callback === 'function' ) {
                callback( context, args );
            }
        };
        var onErrorUpdate = function( context, args ) {
            that.onExecutedHandler( args );
            that.onErrorHandler( args );

            if( typeof callback === 'function' ) {
                callback( context, args );
            }
        };

        dataSource.updateItems( onSuccessUpdate, onErrorUpdate );
    }

} );

InfinniUI.UpdateAction = UpdateAction;

//####app/actions/updateAction/updateActionBuilder.js
/**
 *
 * @constructor
 */
function UpdateActionBuilder() {
}

_.extend( UpdateActionBuilder.prototype, baseActionBuilderMixin, baseFallibleActionBuilderMixin, {

    /**
     *
     * @param context
     * @param args
     * @returns {UpdateAction}
     */
    build: function( context, args ) {
        var dataSource = args.parentView.getContext().dataSources[ args.metadata.DestinationValue.Source ];
        var action = new UpdateAction( args.parentView );

        this.applyBaseActionMetadata( action, args );
        this.applyBaseFallibleActionMetadata( action, args );

        action.setProperty( 'dataSource', dataSource );

        return action;
    }

} );

InfinniUI.UpdateActionBuilder = UpdateActionBuilder;

//####app/builders/applicationBuilder.js
/**
 *
 * @constructor
 */
function ApplicationBuilder() {
    if( !this.builder ) {
        this.builder = new Builder();
        this.registerElementBuilders();
    }

    InfinniUI.global.factory = this;
}

_.extend( ApplicationBuilder.prototype, {

    builder: null,

    /**
     * Registration for all builders
     */
    registerElementBuilders: function() {
        var builder = this.builder;

        builder.register( 'View', new ViewBuilder() );
        builder.register( 'InlineView', new InlineViewBuilder() );
        builder.register( 'AutoView', new MetadataViewBuilder() );

        builder.register( 'StackPanel', new StackPanelBuilder() );
        builder.register( 'GridPanel', new GridPanelBuilder() );
        builder.register( 'ScrollPanel', new ScrollPanelBuilder() );
        builder.register( 'Panel', new PanelBuilder() );
        builder.register( 'ScrollPanel', new ScrollPanelBuilder() );
        builder.register( 'ViewPanel', new ViewPanelBuilder() );
        builder.register( 'TabPanel', new TabPanelBuilder() );
        builder.register( 'TabPage', new TabPageBuilder() );

        builder.register( 'TablePanel', new TablePanelBuilder() );
        builder.register( 'Cell', new CellBuilder() );
        builder.register( 'Row', new RowBuilder() );

        builder.register( 'MenuBar', new MenuBarBuilder() );

        builder.register( 'DataGrid', new DataGridBuilder() );
        // служебный элемент, в документировании не нуждается
        builder.register( 'DataGridRow', new DataGridRowBuilder() );

        builder.register( 'DataGridColumn', new DataGridColumnBuilder() );
        builder.register( 'ListBox', new ListBoxBuilder() );

        builder.register( 'TextBox', new TextBoxBuilder() );
        builder.register( 'PasswordBox', new PasswordBoxBuilder() );
        builder.register( 'CheckBox', new CheckBoxBuilder() );
        builder.register( 'IndeterminateCheckBox', new IndeterminateCheckBoxBuilder() );
        builder.register( 'ImageBox', new ImageBoxBuilder() );
        builder.register( 'FileBox', new FileBoxBuilder() );
        builder.register( 'Label', new LabelBuilder() );
        builder.register( 'Link', new LinkBuilder() );
        builder.register( 'Form', new FormBuilder() );
        builder.register( 'Icon', new IconBuilder() );
        builder.register( 'DateTimePicker', new DateTimePickerBuilder() );
        builder.register( 'DatePicker', new DatePickerBuilder() );
        builder.register( 'TimePicker', new TimePickerBuilder() );
        builder.register( 'ToggleButton', new ToggleButtonBuilder() );
        builder.register( 'NumericBox', new NumericBoxBuilder() );
        builder.register( 'Button', new ButtonBuilder() );
        builder.register( 'ToolBar', new ToolBarBuilder() );
        builder.register( 'ToolBarButton', new ButtonBuilder() );
        builder.register( 'ComboBox', new ComboBoxBuilder() );
        builder.register( 'RadioGroup', new RadioGroupBuilder() );
        builder.register( 'ExtensionPanel', new ExtensionPanelBuilder() );
        builder.register( 'PopupButton', new PopupButtonBuilder() );
        builder.register( 'DataNavigation', new DataNavigationBuilder() );
        builder.register( 'TreeView', new TreeViewBuilder() );
        builder.register( 'Frame', new FrameBuilder() );
        builder.register( 'ButtonEdit', new ButtonEditBuilder() );

        builder.register( 'RestDataSource', new RestDataSourceBuilder() );
        builder.register( 'DocumentDataSource', new DocumentDataSourceBuilder() );
        builder.register( 'PropertyBinding', new DataBindingBuilder() );
        builder.register( 'ObjectDataSource', new ObjectDataSourceBuilder() );
        builder.register( 'Parameter', new ParameterBuilder() );

        builder.register( 'AcceptAction', new AcceptActionBuilder() );
        builder.register( 'AddAction', new AddActionBuilder() );
        builder.register( 'CreateItemAction', new CreateItemActionBuilder() );
        builder.register( 'CancelAction', new CancelActionBuilder() );
        builder.register( 'DeleteAction', new DeleteActionBuilder() );
        builder.register( 'EditAction', new EditActionBuilder() );
        builder.register( 'OpenAction', new OpenActionBuilder() );
        builder.register( 'SaveAction', new SaveActionBuilder() );
        builder.register( 'SelectAction', new SelectActionBuilder() );
        builder.register( 'UpdateAction', new UpdateActionBuilder() );
        builder.register( 'ServerAction', new ServerActionBuilder() );

        builder.register( 'RouteToAction', new RouteToActionBuilder() );

        builder.register( 'BooleanFormat', new BooleanFormatBuilder() );
        builder.register( 'DateTimeFormat', new DateTimeFormatBuilder() );
        builder.register( 'NumberFormat', new NumberFormatBuilder() );
        builder.register( 'ObjectFormat', new ObjectFormatBuilder() );

        builder.register( 'Script', new ScriptBuilder() );

        builder.register( 'Divider', new DividerBuilder() );
        builder.register( 'ContextMenu', new ContextMenuBuilder() );

        // служебный элемент, в документировании не нуждается
        builder.register( 'ToolTip', new InfinniUI.TooltipBuilder() );

        var registerQueue = ApplicationBuilder.registerQueue;

        for( var i = 0, ii = registerQueue.length; i < ii; i++ ) {
            builder.register( registerQueue[ i ].name, registerQueue[ i ].builder );
        }
    },

    /**
     *
     * @param metadataValue
     * @param args
     * @returns {*}
     */
    build: function( metadataValue, args ) {
        return this.builder.build( metadataValue, args );
    },

    /**
     *
     * @param metadataType
     * @param metadataValue
     * @param args
     * @returns {*}
     */
    buildType: function( metadataType, metadataValue, args ) {
        return this.builder.buildType( metadataType, metadataValue, args );
    },

    /**
     *
     * @param metadataValue
     * @param args
     * @returns {*}
     */
    buildMany: function( metadataValue, args ) {
        return this.builder.buildMany( metadataValue, args );
    }
} );

ApplicationBuilder.registerQueue = [];

/**
 *
 * @param name
 * @param builder
 */
ApplicationBuilder.addToRegisterQueue = function( name, builder ) {
    ApplicationBuilder.registerQueue.push( {
        name: name,
        builder: builder
    } );
};

InfinniUI.ApplicationBuilder = ApplicationBuilder;

//####app/builders/builder.js
/**
 *
 * @constructor
 */
function Builder() {
    var objectBuilders = [];

    this.appView = null;

    /**
     *
     * @param metadataType
     * @param objectBuilder
     */
    this.register = function( metadataType, objectBuilder ) {
        objectBuilders[ metadataType ] = objectBuilder;
    };

    /**
     *
     * @param metadataType
     * @param metadataValue
     * @param args
     * @returns {*|null}
     */
    this.buildType = function( metadataType, metadataValue, args ) {
        args = args || {};
        if( typeof objectBuilders[ metadataType ] === 'undefined' ) {
            return null;
        }

        var resultArgs = _.extend( {
            builder: this,
            metadata: metadataValue
        }, args );
        var context = args.parentView ? args.parentView.getContext() : {};

        return objectBuilders[ metadataType ].build( context, resultArgs );
    };

    /**
     *
     * @param metadataValue
     * @param args
     * @returns {*}
     */
    this.build = function( metadataValue, args ) {
        var key;
        var value;
        var result = null;

        args = args || {};

        for( var p in metadataValue ) {
            key = p;
            break; // берем первое найденное свойство в объекте! Остальное игнорируем
        }

        if( typeof key === 'undefined' || key === null ) {
            console.error( 'Builder: Не переданы метаданные' );
        } else {
            value = metadataValue[ key ];
            result = this.buildType( key, value, args );
        }
        return result;
    };

    /**
     *
     * @param metadataValue
     * @param args
     * @returns {Array}
     */
    this.buildMany = function( metadataValue, args ) {
        var items = [];

        if( metadataValue ) {
            for( var i = 0; i < metadataValue.length; i++ ) {
                var item = this.build( metadataValue[ i ], args );

                if( item !== null ) {
                    items.push( item );
                }
            }
        }

        return items;
    };

    /**
     *
     * @param bindingMetadata
     * @param args
     * @returns {*|null}
     */
    this.buildBinding = function( bindingMetadata, args ) {
        var dataBinding = this.buildType( 'PropertyBinding', bindingMetadata, args );

        return dataBinding;
    };
}

InfinniUI.Builder = Builder;

//####app/data/dataBinding/dataBinding.js
InfinniUI.BindingModes = {
    twoWay: 'TwoWay',
    toSource: 'ToSource',
    toElement: 'ToElement'
};

/**
 * @constructor
 * @augments Backbone.Model
 */
var DataBinding = Backbone.Model.extend( {

    defaults: {
        mode: InfinniUI.BindingModes.twoWay,
        converter: null,
        source: null,
        sourceProperty: null,
        element: null,
        elementProperty: null,
        defaultValue: null
    },

    /**
     * @returns {*}
     */
    getDefaultValue: function() {
        return this.get( 'defaultValue' );
    },

    /**
     *
     * @param value
     */
    setDefaultValue: function( value ) {
        this.set( 'defaultValue', value );
    },

    /**
     *
     * @param mode
     */
    setMode: function( mode ) {
        this.set( 'mode', mode );
    },

    /**
     * @returns {*}
     */
    getMode: function() {
        return this.get( 'mode' );
    },

    /**
     *
     * @param converter
     */
    setConverter: function( converter ) {
        this.set( 'converter', converter );
    },

    /**
     * @returns {*}
     */
    getConverter: function() {
        return this.get( 'converter' );
    },

    /**
     *
     * @param source
     * @param property
     */
    bindSource: function( source, property ) {
        var logger = InfinniUI.global.logger;
        var element = this.getElement();

        if( this.get( 'source' ) !== null && typeof this.get( 'source' ) !== 'undefined' ) {
            var message = stringUtils.format( 'DataBinding. bindSource: повторная инициализация. {0} заменен на {1}', [ this.get( 'source' ).getName(), source.getName() ] );

            logger.warn( message );
        }

        this.set( 'source', source );
        this.set( 'sourceProperty', property );

        var that = this;

        if( element ) {
            this._initPropertyOnElement();
        }

        var bindId = source.onPropertyChanged( property, function( context, argument ) {
            that._onSourcePropertyChangedHandler( context, argument );
        } );

        this.set( 'bindId', bindId );

        if( this._isWorkingWithSelectedItems( source ) ) {
            this._initBehaviorWithSelectedItem();
        }
    },

    /**
     *
     * @param source
     * @returns {boolean}
     * @private
     */
    _isWorkingWithSelectedItems: function( source ) {
        return typeof source.onSelectedItemChanged === 'function';
    },

    /**
     *
     * @private
     */
    _initBehaviorWithSelectedItem: function() {
        var sourceProperty = this.get( 'sourceProperty' );
        var source = this.get( 'source' );
        var that = this;

        if( this._isRelativeProperty( sourceProperty ) ) {
            source.onSelectedItemChanged( function( context, argument ) {
                var args = {
                    property: sourceProperty,
                    newValue: source.getProperty( sourceProperty )
                };
                that._onSourcePropertyChangedHandler( context, args );
            } );
        }
    },

    /**
     *
     * @param property
     * @returns {boolean}
     * @private
     */
    _isRelativeProperty: function( property ) {
        return !/^\d/.test( property ) && property != '';
    },

    /**
     * @returns {*}
     */
    getSource: function() {
        return this.get( 'source' );
    },

    /**
     * @returns {*}
     */
    getSourceProperty: function() {
        return this.get( 'sourceProperty' );
    },

    /**
     *
     * @param element
     * @param property
     */
    bindElement: function( element, property ) {
        var that = this;
        var logger = InfinniUI.global.logger;

        if( this.get( 'element' ) !== null && typeof this.get( 'element' ) !== 'undefined' ) {
            var message = stringUtils.format( 'DataBinding. bindElement: повторная инициализация. {0} заменен на {1}', [ this.get( 'element' ).getName(), element.getName() ] );

            logger.warn( message );
        }

        this.set( 'element', element );
        this.set( 'elementProperty', property );

        element.onPropertyChanged( property, function( context, argument ) {
            that._onElementPropertyChangedHandler( context, argument );
        } );

        if( element.onRemove ) {
            element.onRemove( function( context, args ) {
                var source = that.get( 'source' );
                var bindId = that.get( 'bindId' );
                var propertyName = that.get( 'sourceProperty' );

                if( source && source.offPropertyChanged ) {
                    source.offPropertyChanged( propertyName, bindId );
                }
                that.remove();
            } );
        }

        this._initPropertyOnElement();
    },

    /**
     * @description Делает полную отписку от всех событий
     */
    remove: function() {
        this.off();
        this.clear();
    },

    /**
     *
     * @private
     */
    _initPropertyOnElement: function() {
        var sourceProperty = this.get( 'sourceProperty' );
        var source = this.get( 'source' );
        var value;

        if( this._shouldRefreshElement() && source ) {
            if( typeof source.isDataReady === 'function' && !source.isDataReady() ) {
                if( typeof source.tryInitData === 'function' ) {
                    if( this.getDefaultValue() !== null && typeof this.getDefaultValue() !== 'undefined' ) {
                        this._setValueToElement( this.getDefaultValue(), true );
                    }
                    source.tryInitData();
                }
                return;
            } else {
                value = source.getProperty( sourceProperty );
                this._setValueToElement( value );
            }
        }
    },

    /**
     * @returns {*}
     */
    getElement: function() {
        return this.get( 'element' );
    },

    /**
     * @returns {*}
     */
    getElementProperty: function() {
        return this.get( 'elementProperty' );
    },

    /**
     * @description Обработчик события изменения значения элемента
     * @private
     */
    _onElementPropertyChangedHandler: function( context, argument ) {
        if( this._shouldRefreshSource() ) {
            this._setValueToSource( argument.newValue, context );
        }
    },

    /**
     *
     * @param value
     * @param context
     * @private
     */
    _setValueToSource: function( value, context ) {
        var element = this.get( 'element' );
        var source = this.get( 'source' );
        var sourceProperty = this.get( 'sourceProperty' );
        var converter = this.get( 'converter' );

        if( converter !== null &&
            typeof converter !== 'undefined' &&
            converter.hasOwnProperty( 'toSource' ) //Mozilla's Object.prototype has method "toSource"!!
        ) {
            value = converter.toSource( context, { value: value, binding: this, source: element } );
        }

        source.setProperty( sourceProperty, value );
    },


    /**
     * @description Обработчик события изменения значения источника
     * @private
     */
    _onSourcePropertyChangedHandler: function( context, argument ) {
        if( this._shouldRefreshElement() ) {
            this._setValueToElement( argument.newValue );
        }
    },

    /**
     *
     * @param value
     * @param notConverting
     * @private
     */
    _setValueToElement: function( value, notConverting ) {
        var source = this.get( 'source' );
        var element = this.get( 'element' );
        var elementProperty = this.get( 'elementProperty' );
        var converter = this.get( 'converter' );
        var context = this._getContext();

        if( converter !== null && typeof converter !== 'undefined' &&
            converter.toElement !== null && typeof converter.toElement !== 'undefined' &&
            !notConverting ) {
            value = converter.toElement( context, { value: value, binding: this, source: source } );
        }

        element.setProperty( elementProperty, value );
    },

    /**
     *
     * @returns {*}
     * @private
     */
    _getContext: function() {
        var source = this.getSource();
        var context;

        if( source.getView && source.getView() ) {
            context = source.getView().getContext();
        }

        return context;
    },

    /**
     *
     * @returns {boolean}
     * @private
     */
    _shouldRefreshSource: function() {
        var mode = this.get( 'mode' );
        return mode == InfinniUI.BindingModes.twoWay || mode == InfinniUI.BindingModes.toSource;
    },

    /**
     *
     * @returns {boolean}
     * @private
     */
    _shouldRefreshElement: function() {
        var mode = this.get( 'mode' );
        return mode == InfinniUI.BindingModes.twoWay || mode == InfinniUI.BindingModes.toElement;
    }

} );

InfinniUI.DataBinding = DataBinding;

//####app/data/dataBinding/dataBindingBuilder.js
/**
 *
 * @constructor
 */
var DataBindingBuilder = function() {};

InfinniUI.DataBindingBuilder = DataBindingBuilder;

/**
 *
 * @param context
 * @param args
 */
DataBindingBuilder.prototype.build = function( context, args ) {
    var result = new DataBinding();
    var metadata = args.metadata;
    var logger = InfinniUI.global.logger;
    var converter = {};
    var that = this;
    var property;
    var scriptName;


    if( metadata.Source === null || typeof metadata.Source === 'undefined' ) {
        logger.error( 'DataBindingBuilder: не указан источник.' );
        throw new Error( 'DataBindingBuilder: not declared source in DataBinding metadata.' );
    }

    if( 'DefaultValue' in metadata ) {
        result.setDefaultValue( metadata[ 'DefaultValue' ] );
    }

    var sourceDeferred = args.parentView.getDeferredOfMember( metadata.Source );
    sourceDeferred.done( function( source ) {
        var metadataProperty = typeof metadata.Property === 'undefined' || metadata.Property === null ? '' : metadata.Property;

        if( args.basePathOfProperty ) {
            property = args.basePathOfProperty.resolveProperty( metadataProperty );
        }else{
            property = metadataProperty;
        }

        if( metadata.Mode ) {
            result.setMode( metadata.Mode );
        }

        if( metadata.Converter ) {
            if( metadata[ 'Converter' ][ 'ToSource' ] ) {
                scriptName = metadata[ 'Converter' ][ 'ToSource' ];
                converter.toSource = that.scriptByNameOrBody( scriptName, context );
            }
            if( metadata[ 'Converter' ][ 'ToElement' ] ) {
                scriptName = metadata[ 'Converter' ][ 'ToElement' ];
                converter.toElement = that.scriptByNameOrBody( scriptName, context );
            }
            result.setConverter( converter );
        }

        result.bindSource( source, property );
    } );

    return result;
};

/**
 *
 * @param value
 * @returns {boolean}
 */
DataBindingBuilder.prototype.isScriptBody = function( value ) {
    return value && value.substr( 0, 1 ) == '{';
};

/**
 *
 * @param nameOrBody
 * @param context
 * @returns {*}
 */
DataBindingBuilder.prototype.scriptByNameOrBody = function( nameOrBody, context ) {
    if( this.isScriptBody( nameOrBody ) ) {
        var scriptExecutor = new ScriptExecutor( context.view );
        return scriptExecutor.buildScriptByBody( nameOrBody );
    }else{
        return context.scripts[ nameOrBody ];
    }
};

//####app/data/dataProviders/REST/metadataProviderREST.js
/**
 *
 * @param metadataUrlConstructor
 * @param successCallback
 * @param failCallback
 * @constructor
 */
function MetadataProviderREST( metadataUrlConstructor, successCallback, failCallback ) {
    this.getMetadata = function( resultCallback ) {
        var data = metadataUrlConstructor.constructMetadataRequest();
        new RequestExecutor( resultCallback, successCallback, failCallback, this.cache ).makeRequest( data );
    };
}

InfinniUI.Providers.MetadataProviderREST = MetadataProviderREST;

//####app/data/dataProviders/REST/queryConstructorMetadata.js
/**
 *
 * @param host
 * @param metadata
 * @constructor
 */
function QueryConstructorMetadata( host, metadata ) {

    /**
     *
     * @returns {{requestUrl: string, method: string}}
     */
    this.constructMetadataRequest = function() {
        return {
            'requestUrl': host + '/' + metadata.Path,
            'method': 'GET'
        };
    };

}

InfinniUI.Providers.QueryConstructorMetadata = QueryConstructorMetadata;

//####app/data/dataProviders/REST/requestExecutor.js
/**
 *
 * @param type
 * @constructor
 */
var RequestExecutorDataStrategy = function( type ) {
    if( typeof this.strategies[ type ] === 'undefined' ) {
        this.strategy = this.strategies.json;
    } else {
        this.strategy = this.strategies[ type ];
    }
};

InfinniUI.RequestExecutorDataStrategy = RequestExecutorDataStrategy;

/**
 *
 * @param requestData
 * @param successCallbackHandler
 * @param failCallbackHandler
 * @returns {*}
 */
RequestExecutorDataStrategy.prototype.request = function( requestData, successCallbackHandler, failCallbackHandler ) {
    return this.strategy.apply( this, Array.prototype.slice.call( arguments ) );
};

/**
 *
 * @type {{json: RequestExecutorDataStrategy.strategies.json, raw: RequestExecutorDataStrategy.strategies.raw}}
 */
RequestExecutorDataStrategy.prototype.strategies = {

    /**
     *
     * @param requestData
     * @param onSuccess
     * @param onFail
     * @returns {*}
     */
    json: function( requestData, onSuccess, onFail ) {
        return $.ajax( {
            type: requestData.method || 'post',
            url: requestData.requestUrl,
            xhrFields: {
                withCredentials: true
            },
            beforeSend: this.onBeforeRequest(),
            success: this.onSuccessRequest( onSuccess ),
            error: function( err ) {
                if( err.status === 200 ) {
                    //@TODO Убрать этот костыль. Нужен т.к. запрос на загрузку файла возвращает 200 и пустой ответ!
                    this.onSuccessRequest( onSuccess )();
                } else {
                    this.onErrorRequest( onFail )( err );
                }
            }.bind( this ),
            data: JSON.stringify( requestData.args ),
            contentType: 'application/json;charset=UTF-8'
        } );
    },

    /**
     *
     * @param requestData
     * @param onSuccess
     * @param onFail
     * @returns {*}
     */
    raw: function( requestData, onSuccess, onFail ) {
        var method = requestData.method || 'post';
        var processData = method.toUpperCase() === 'GET';

        return $.ajax( {
            type: method,
            url: requestData.requestUrl,
            xhrFields: {
                withCredentials: true
            },
            beforeSend: this.onBeforeRequest(),
            success: this.onSuccessRequest( onSuccess ),
            error: function( err ) {
                if( err.status === 200 ) {
                    //@TODO Убрать этот костыль. Нужен т.к. запрос на загрузку файла возвращает 200 и пустой ответ!
                    this.onSuccessRequest( onSuccess )();
                } else {
                    this.onErrorRequest( onFail )( err );
                }
            }.bind( this ),
            processData: processData,
            contentType: false,
            data: requestData.args
        } );
    }
};

_.extend( RequestExecutorDataStrategy.prototype, ajaxRequestMixin );

/**
 *
 * @param resultCallback
 * @param successCallback
 * @param failCallback
 * @param cache
 * @constructor
 */
function RequestExecutor( resultCallback, successCallback, failCallback, cache ) {

    /**
     *
     * @param data
     */
    var successCallbackHandler = function( data ) {
        if( successCallback ) {
            successCallback( data );
        }
        if( resultCallback ) {
            resultCallback( data );
        }
    };

    /**
     *
     * @param err
     */
    var failCallbackHandler = function( err ) {
        if( failCallback ) {
            failCallback( err );
        }
        if( resultCallback ) {
            resultCallback( err.responseJSON );
        }
    };

    /**
     *
     * @param requestData
     * @param request
     * @returns {*}
     */
    var cacheRequest = function( requestData, request ) {
        if( typeof cache === 'undefined' || cache === null ) {
            return request( requestData );
        } else {
            var data = cache.get( requestData );
            if( data !== false ) {
                console.log( 'Fetch from cache' );
                var defer = $.Deferred();
                successCallbackHandler( data );
                defer.resolve( data );
                return defer.promise();
            }
            return request( requestData ).then( function( data ) {
                cache.set( requestData, data );
            } );
        }
    };

    /**
     *
     * @param type
     * @param requestData
     * @returns {*}
     */
    var request = function( type, requestData ) {
        var strategy = new RequestExecutorDataStrategy( type );

        return strategy.request( requestData, successCallbackHandler, failCallbackHandler );
    };

    /**
     *
     * @param requestData
     * @returns {*}
     */
    this.makeRequest = function( requestData ) {
        return cacheRequest( requestData, request.bind( undefined, 'json' ) );
    };

    /**
     *
     * @param requestData
     * @returns {*}
     */
    this.makeRequestRaw = function( requestData ) {
        return cacheRequest( requestData, request.bind( undefined, 'raw' ) );
    };

}

//####app/data/dataProviders/dataProviderRegister.js
/**
 *
 * @constructor
 */
function DataProviderRegister() {
    var dataProviders = {};

    /**
     *
     * @param metadataType
     * @param dataProviderConstructor
     */
    this.register = function( metadataType, dataProviderConstructor ) {
        dataProviders[ metadataType ] = dataProviderConstructor;
    };

    /**
     *
     * @param metadataType
     * @param props
     * @returns {null}
     */
    this.build = function( metadataType, props ) {
        var dataProvider = dataProviders[ metadataType ];

        if ( typeof dataProvider !== 'undefined' && dataProvider !== null ) {
            return new dataProviders[ metadataType ]( props );
        }
        return null;
    };

}


InfinniUI.providerRegister = new DataProviderRegister();

//####app/data/dataProviders/file/document/documentFileProvider.js
/**
 *
 * @param {DocumentUploadQueryConstructor} urlConstructor
 * @param {Function} [successCallback]
 * @param {Function} [failCallback]
 * @constructor
 */
var DocumentFileProvider = function( urlConstructor, successCallback, failCallback ) {
    this.urlConstructor = urlConstructor;
    this.successCallback = successCallback;
    this.failCallback = failCallback;
};

InfinniUI.Providers.DocumentFileProvider = DocumentFileProvider;

/**
 * Возвращает URL ранее загруженного файла
 * @param {string} fieldName
 * @param {string} instanceId
 * @param {string} contentId
 * @returns {String}
 */
DocumentFileProvider.prototype.getFileUrl = function( fieldName, instanceId, contentId ) {
    return this.urlConstructor.getFileUrl( fieldName, instanceId, contentId );
};

//####app/data/dataProviders/file/document/documentFileQueryConstructor.js
/**
 * @param {string} host
 * @constructor
 */
var DocumentUploadQueryConstructor = function( host ) {
    this.host = host;
};

InfinniUI.DocumentUploadQueryConstructor = DocumentUploadQueryConstructor;

/**
 * @public
 * @description Возвращает ссылку на загруженный ранее файл
 * @param fieldName
 * @param instanceId
 * @param contentId
 * @returns {String}
 */
DocumentUploadQueryConstructor.prototype.getFileUrl = function( fieldName, instanceId, contentId ) {
    return stringUtils.format( '{0}/blob/{1}', [this.host, contentId] );
};


//####app/data/dataProviders/localStorageDataProvider.js
/**
 *
 * @param idProperty
 * @constructor
 */
var LocalStorageDataProvider = function( idProperty ) {
    this.idProperty = idProperty || '_id';
    this.filter = '';
};

_.extend( LocalStorageDataProvider.prototype, {

    /**
     *
     * @param items
     */
    setItems: function( items ) {
        localStorage.clear();
        if( items && items.length > 0 ) {
            this.setLSItems( items );
        }
    },

    /**
     *
     * @param resultCallback
     */
    getItems: function( resultCallback ) {
        var items = this.getLSItems();
        var filter = this.getFilter();

        if( filter ) {
            items = filterItems( items, filter );
        }
        resultCallback( { data: items } );
    },

    /**
     *
     * @returns {*}
     */
    getLSItems: function() {
        return JSON.parse( localStorage.getItem( 'items' ) );
    },

    /**
     *
     * @param items
     */
    setLSItems: function( items ) {
        localStorage.setItem( 'items', JSON.stringify( items ) );
    },

    /**
     *
     * @param filterPattern
     * @param filterParams
     */
    setFilter: function( filterPattern, filterParams ) {
        var param;
        var correctFilter = false;
        var re = /\<\%[a-zA-Z0-9\s]+\%\>/g;

        if( filterPattern.search( re ) === -1 ) {
            correctFilter = true;
        } else {
            while( param = re.exec( filterPattern ) ) {
                var paramName = param[ 0 ].replace( /\s+/, '' ).slice( 2, -2 );
                var paramValue = filterParams[ paramName ] || '';
                if( paramValue.length ) {
                    correctFilter = true;
                }
                filterPattern = filterPattern.slice( 0, param.index ) + '\'' + paramValue + '\'' + filterPattern.slice( param.index + param[ 0 ].length );
                param.lastIndex = param.index + paramValue.length;
            }
        }

        if( correctFilter ) {
            this.filter = filterPattern;
        } else {
            this.filter = '';
        }
    },

    /**
     *
     * @returns {string|*}
     */
    getFilter: function() {
        return this.filter;
    },

    /**
     *
     * @param resultCallback
     */
    createItem: function( resultCallback ) {
        var item = this.createLocalItem( this.idProperty );

        resultCallback( item );
    },

    /**
     *
     * @param item
     */
    addLSItem: function( item ) {
        var items = this.getLSItems();

        items.push( item );
        this.setLSItems( items );
    },

    /**
     *
     * @param itemIndex
     * @param item
     */
    updateLSItem: function( itemIndex, item ) {
        var items = this.getLSItems();

        items[ itemIndex ] = item;
        this.setLSItems( items );
    },

    /**
     *
     * @param itemIndex
     */
    deleteLSItem: function( itemIndex ) {
        var items = this.getLSItems();

        items.splice( itemIndex, 1 );
        this.setLSItems( items );
    },

    /**
     *
     * @param item
     * @param successCallback
     */
    saveItem: function( item, successCallback ) {
        if( !item[ this.idProperty ] ) {
            throw new Error( 'У элемента отсутствует свойство "' + this.idProperty + '"' );
        }
        var items = JSON.parse( localStorage.getItem( 'items' ) );
        var itemIndex = this._getIndexOfItem( item );

        if( itemIndex == -1 ) {
            this.addLSItem( item );
        } else {
            this.updateLSItem( itemIndex, item );
        }

        successCallback( {} );
    },

    /**
     *
     * @param item
     * @param successCallback
     * @param errorCallback
     */
    deleteItem: function( item, successCallback, errorCallback ) {
        var items = this.getLSItems();
        var itemIndex = this._getIndexOfItem( item );
        var validationResult = new ValidationResult();

        if( itemIndex != -1 ) {
            this.deleteLSItem( itemIndex );
            successCallback( {} );
        } else {
            validationResult.error( 'Удаляемый элемент не найден' );
            errorCallback( {
                data: {
                    Result: {
                        ValidationResult: validationResult
                    }
                }
            } );
        }
    },

    /**
     *
     * @param item
     * @returns {number}
     * @private
     */
    _getIndexOfItem: function( item ) {
        var items = this.getLSItems();

        for( var i = 0; i < items.length; i += 1 ) {
            if( items[ i ][ this.idProperty ] === item[ this.idProperty ] ) {
                return i;
            }
        }
        return -1;
    },

    /**
     *
     * @param id
     * @returns {[*]}
     */
    createIdFilter: function( id ) {
        return [ {
            'Property': '_id',
            'Value': id,
            'CriteriaType': 1
        } ];
    },

    /**
     *
     * @param idProperty
     * @returns {*}
     */
    createLocalItem: function( idProperty ) {
        var result = {};

        result[ idProperty ] = this._generateLocalId();
        return result;
    },

    /**
     *
     * @returns {*}
     * @private
     */
    _generateLocalId: function() {
        return guid();
    }

} );

InfinniUI.Providers.LocalStorageDataProvider = LocalStorageDataProvider;

//####app/data/dataProviders/objectDataProvider.js
/**
 *
 * @param items
 * @param idProperty
 * @constructor
 */
var ObjectDataProvider = function( items, idProperty ) {
    this.items = items || [];
    this.idProperty = idProperty || '_id';
    this.filter = '';
};

_.extend( ObjectDataProvider.prototype, {

    /**
     *
     * @param items
     */
    setItems: function( items ) {
        this.items = items;
    },

    /**
     *
     * @param resultCallback
     */
    getItems: function( resultCallback ) {
        var items = this.items.slice();
        var filter = this.getFilter();

        if( filter ) {
            items = filterItems( items, filter );
        }
        resultCallback( { data: items } );
    },

    /**
     *
     * @param filterPattern
     * @param filterParams
     */
    setFilter: function( filterPattern, filterParams ) {
        var param;
        var correctFilter = false;
        var re = /\<\%[a-zA-Z0-9\s]+\%\>/g;

        if( filterPattern.search( re ) === -1 ) {
            correctFilter = true;
        } else {
            while( param = re.exec( filterPattern ) ) {
                var paramName = param[ 0 ].replace( /\s+/, '' ).slice( 2, -2 );
                var paramValue = filterParams[ paramName ] || '';

                if( paramValue.length ) {
                    correctFilter = true;
                }
                filterPattern = filterPattern.slice( 0, param.index ) + '\'' + paramValue + '\'' + filterPattern.slice( param.index + param[ 0 ].length );
                param.lastIndex = param.index + paramValue.length;
            }
        }

        if( correctFilter ) {
            this.filter = filterPattern;
        } else {
            this.filter = '';
        }
    },

    /**
     *
     * @returns {*|string}
     */
    getFilter: function() {
        return this.filter;
    },

    /**
     *
     * @param resultCallback
     */
    createItem: function( resultCallback ) {
        var item = this.createLocalItem( this.idProperty );
        resultCallback( item );
    },

    /**
     *
     * @param item
     * @param successCallback
     */
    saveItem: function( item, successCallback ) {
        var items = this.items;
        var itemIndex = this._getIndexOfItem( item );

        if( itemIndex === -1 ) {
            items.push( item );
        } else {
            items[ itemIndex ] = item;
        }

        successCallback( {} );
    },

    /**
     *
     * @param item
     * @param successCallback
     * @param errorCallback
     */
    deleteItem: function( item, successCallback, errorCallback ) {
        var items = this.items;
        var itemIndex = this._getIndexOfItem( item );
        var validationResult = new ValidationResult();

        if( itemIndex !== -1 ) {
            items.splice( itemIndex, 1 );
            successCallback( {} );
        } else {
            validationResult.error( 'Удаляемый элемент не найден' );
            errorCallback( {
                data: {
                    Result: {
                        ValidationResult: validationResult
                    }
                }
            } );
        }
    },

    /**
     *
     * @param id
     * @returns {[*]}
     */
    createIdFilter: function( id ) {
        return [ {
            'Property': '_id',
            'Value': id,
            'CriteriaType': 1
        } ];
    },

    /**
     *
     * @param item
     * @returns {number}
     * @private
     */
    _getIndexOfItem: function( item ) {
        return _.indexOf( this.items, item );
    },

    /**
     *
     * @param idProperty
     * @returns {*}
     */
    createLocalItem: function( idProperty ) {
        var result = {};

        result[ idProperty ] = this._generateLocalId();

        return result;
    },

    /**
     *
     * @returns {*}
     * @private
     */
    _generateLocalId: function() {
        return guid();
    }

} );

InfinniUI.Providers.ObjectDataProvider = ObjectDataProvider;

//####app/data/dataProviders/restDataProvider.js
/**
 *
 * @constructor
 */
var RestDataProvider = function() {

    this.requestParams = {
        'get': {
            method: 'get',
            origin: null, // http://abs.com
            path: '',
            data: {}
        },

        'set': {
            method: 'post',
            origin: null,
            path: '',
            data: {}
        },

        'delete': {
            method: 'delete',
            origin: null,
            path: '',
            data: {}
        }
    };

};

_.extend( RestDataProvider.prototype, {

    /**
     *
     * @param type
     * @returns {*}
     */
    getOrigin: function( type ) {
        return this.requestParams[ type ].origin;
    },

    /**
     *
     * @param type
     * @param newOrigin
     */
    setOrigin: function( type, newOrigin ) {
        this.requestParams[ type ].origin = newOrigin;
    },

    /**
     *
     * @param type
     * @returns {*}
     */
    getPath: function( type ) {
        return this.requestParams[ type ].path;
    },

    /**
     *
     * @param type
     * @param path
     */
    setPath: function( type, path ) {
        this.requestParams[ type ].path = path;
    },

    /**
     *
     * @param type
     * @returns {*}
     */
    getData: function( type ) {
        return this.requestParams[ type ].data;
    },

    /**
     *
     * @param type
     * @param data
     */
    setData: function( type, data ) {
        this.requestParams[ type ].data = data;
    },

    /**
     *
     * @param type
     * @returns {*}
     */
    getMethod: function( type ) {
        return this.requestParams[ type ].method;
    },

    /**
     *
     * @param type
     * @param queryMethod
     */
    setMethod: function( type, queryMethod ) {
        this.requestParams[ type ].method = queryMethod;
    },

    /**
     *
     * @param type
     * @param successHandler
     * @param errorHandler
     * @returns {number}
     */
    send: function( type, successHandler, errorHandler ) {
        var params = this.requestParams[ type ];
        var urlString = params.origin + params.path;
        var requestId = Math.round( ( Math.random() * 100000 ) );
        var requestParams;
        var filesInData = this.extractFilesFromData( params.data );

        if( _.size( filesInData.files ) == 0 ) {

            requestParams = {
                type: params.method,
                xhrFields: {
                    withCredentials: true
                },
                url: urlString,
                success: function( data ) {
                    successHandler( {
                        requestId: requestId,
                        data: data
                    } );
                },
                error: function( data ) {
                    if( typeof errorHandler !== 'function' ) {
                        //Unhandled error
                        InfinniUI.global.logger.error( data );
                        return;
                    }
                    errorHandler( {
                        requestId: requestId,
                        data: data
                    } );
                }
            };

            if( params.method.toLowerCase() != 'get' ) {
                requestParams.contentType = 'application/json';
                requestParams.data = JSON.stringify( params.data );
            } else {
                if( _.size( params.data ) > 0 ) {
                    requestParams.url = requestParams.url + '?' + stringUtils.joinDataForQuery( params.data );
                }
            }
        } else {

            var formData = new FormData();
            formData.append( 'document', JSON.stringify( filesInData.dataWithoutFiles ) );

            for( var k in filesInData.files ) {
                formData.append( k, filesInData.files[ k ] );
            }

            requestParams = {
                type: params.method,
                url: urlString,
                xhrFields: {
                    withCredentials: true
                },
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function( data ) {
                    successHandler( {
                        requestId: requestId,
                        data: data
                    } );
                },
                error: function( data ) {
                    errorHandler( {
                        requestId: requestId,
                        data: data
                    } );
                }
            };
        }

        $.ajax( requestParams );

        return requestId;
    },

    /**
     *
     * @param successHandler
     * @param errorHandler
     * @returns {*|number}
     */
    getItems: function( successHandler, errorHandler ) {
        return this.send( 'get', successHandler, errorHandler );
    },

    /**
     *
     * @param item
     * @param successHandler
     * @param errorHandler
     * @returns {*|number}
     */
    saveItem: function( item, successHandler, errorHandler ) {
        this.requestParams[ 'set' ].data = item;
        return this.send( 'set', successHandler, errorHandler );
    },

    /**
     *
     * @param item
     * @param successHandler
     * @param errorHandler
     * @returns {*|number}
     */
    deleteItem: function( item, successHandler, errorHandler ) {
        return this.send( 'delete', successHandler, errorHandler );
    },

    /**
     *
     * @param resultCallback
     * @param idProperty
     */
    createItem: function( resultCallback, idProperty ) {
        var that = this;

        setTimeout( function() {
            resultCallback( that.createLocalItem( idProperty ) );
        }, 10 );
    },

    /**
     *
     * @param idProperty
     * @returns {*}
     */
    createLocalItem: function( idProperty ) {
        var result = {};

        result[ idProperty ] = this._generateLocalId();

        return result;
    },

    /**
     *
     * @returns {*}
     * @private
     */
    _generateLocalId: function() {
        return guid();
    },

    /**
     *
     * @param data
     * @returns {{dataWithoutFiles: *, files: Object}}
     */
    extractFilesFromData: function( data ) {
        var files = Object.create( null );
        var dataWithoutFiles = extractFilesFromNode( data, [] );

        return {
            dataWithoutFiles: dataWithoutFiles,
            files: files
        };

        function extractFilesFromNode( node, path ) {
            var value, result = Array.isArray( node ) ? [] : {}, currentPath;

            for( var i in node ) {
                if( !node.hasOwnProperty( i ) ) {
                    continue;
                }

                currentPath = path.slice();
                currentPath.push( i );
                value = node[ i ];
                if( value !== null && typeof ( value ) === 'object' ) {
                    if( value.constructor === Date ) {
                        result[ i ] = value;
                    } else if( value.constructor === Object || value.constructor === Array ) {
                        //Plain object
                        result[ i ] = extractFilesFromNode( value, currentPath );
                    } else {
                        //Object instance
                        result[ i ] = null;
                        files[ currentPath.join( '.' ) ] = value;
                        continue;
                    }
                } else {
                    result[ i ] = value;
                }
            }

            return result;
        }
    }

} );

InfinniUI.Providers.RestDataProvider = RestDataProvider;

//####app/data/dataProviders/serverAction/serverActionProvider.js
/**
 *
 * @constructor
 */
var ServerActionProvider = function() {
};

/**
 *
 * @param requestData
 * @param resultCallback
 * @param onSuccess
 * @param onError
 * @returns {number}
 */
ServerActionProvider.prototype.request = function( requestData, resultCallback, onSuccess, onError ) {
    var requestId = Math.round( ( Math.random() * 100000 ) );

    $.ajax( {
        type: requestData.method,
        url: requestData.requestUrl,
        xhrFields: {
            withCredentials: true
        },
        data: requestData.args,
        contentType: requestData.contentType,
        success: function( data ) {
            var args = {
                requestId: requestId,
                data: data
            };

            if( typeof resultCallback === 'function' ) {
                resultCallback( args );
            }

            if( typeof onSuccess === 'function' ) {
                onSuccess( args );
            }
        },
        error: function( data ) {
            var args = {
                requestId: requestId,
                data: data
            };

            if( typeof resultCallback === 'function' ) {
                resultCallback( args );
            }

            if( typeof onError === 'function' ) {
                onError( args );
            }
        }
    } );

    return requestId;
};

/**
 *
 * @param requestData
 * @param resultCallback
 * @param onSuccess
 * @param onError
 */
ServerActionProvider.prototype.download = function( requestData, resultCallback, onSuccess, onError ) {
    new DownloadExecutor( resultCallback, onSuccess, onError )
        .run( requestData );
};

InfinniUI.Providers.ServerActionProvider = ServerActionProvider;

//####app/data/dataSource/localStorageDataSource.js
/**
 * @constructor
 * @augments ObjectDataSource
 */
var LocalStorageDataSource = ObjectDataSource.extend( {

    /**
     *
     */
    initDataProvider: function() {
        var dataProvider = InfinniUI.providerRegister.build( 'LocalStorageDataSource' );
        this.set( 'dataProvider', dataProvider );
    }

} );

InfinniUI.providerRegister.register( 'LocalStorageDataSource', InfinniUI.Providers.LocalStorageDataProvider );
InfinniUI.LocalStorageDataSource = LocalStorageDataSource;

//####app/data/dataSource/objectDataSourceBuilder.js
/**
 * @augments BaseDataSourceBuilder
 * @constructor
 */
function ObjectDataSourceBuilder() {
}

_.inherit( ObjectDataSourceBuilder, BaseDataSourceBuilder );

_.extend( ObjectDataSourceBuilder.prototype, {

    /**
     * @returns {ObjectDataSource}
     * @param parent
     */
    createDataSource: function( parent ) {
        return new ObjectDataSource( {
            view: parent
        } );
    },

    /**
     *
     * @param builder
     * @param parent
     * @param metadata
     * @param dataSource
     */
    applyMetadata: function( builder, parent, metadata, dataSource ) {
        BaseDataSourceBuilder.prototype.applyMetadata.call( this, builder, parent, metadata, dataSource );

        if( !'IsLazy' in metadata ) {
            dataSource.setIsLazy( false );
        }

        if( metadata.Items ) {
            if( Array.isArray( metadata.Items ) ) {
                dataSource.setItems( metadata.Items );
            }

            if( $.isPlainObject( metadata.Items ) ) {
                if( typeof metadata.Items.Mode === 'undefined' ) {
                    metadata.Items.Mode = InfinniUI.BindingModes.toElement;
                }

                var binding = builder.buildBinding( metadata.Items, {
                    parentView: parent
                } );

                binding.bindElement( dataSource, '' );
            }
        }
    }

} );

InfinniUI.ObjectDataSourceBuilder = ObjectDataSourceBuilder;

//####app/data/parameter/parameter.js
/**
 * @constructor
 * @arguments Backbone.Model
 */
var Parameter = Backbone.Model.extend( {

    defaults: {
        name: null,
        view: null,
        value: undefined
    },

    initialize: function() {
    },

    /**
     *
     * @param property
     * @param handler
     */
    onPropertyChanged: function( property, handler ) {
        if( typeof property === 'function' ) {
            handler = property;
            this.on( 'onPropertyChanged', handler );
        } else {
            this.on( 'onPropertyChanged:' + property, handler );
        }

    },

    /**
     *
     * @returns {*}
     */
    getName: function() {
        return this.get( 'name' );
    },

    /**
     *
     * @param newName
     */
    setName: function( newName ) {
        this.set( 'name', newName );
        this.name = newName;
    },

    /**
     * @returns {*}
     */
    getView: function() {
        return this.get( 'view' );
    },

    /**
     *
     * @returns {*}
     */
    getValue: function() {
        return this.getProperty( '' );
    },

    /**
     *
     * @param value
     */
    setValue: function( value ) {
        this.setProperty( '', value );
    },

    /**
     *
     * @param property
     * @returns {*}
     */
    getProperty: function( property ) {
        var value = this.get( 'value' );

        if( property === '' ) {
            return value;
        } else {
            return this._nullToUndefined( InfinniUI.ObjectUtils.getPropertyValue( value, property ) );
        }
    },

    /**
     *
     * @param property
     * @param value
     */
    setProperty: function( property, value ) {
        var fullParameterValue = this.getValue();
        var oldValue = this.getProperty( property );

        if( value == oldValue ) {
            return;
        }

        if( property === '' ) {
            this.set( 'value', value );

        } else {
            InfinniUI.ObjectUtils.setPropertyValue( fullParameterValue, property, value );
        }

        this._notifyAboutPropertyChanged( property, value, oldValue );
    },

    /**
     *
     * @param property
     * @param newValue
     * @param oldValue
     * @private
     */
    _notifyAboutPropertyChanged: function( property, newValue, oldValue ) {
        var context = this._getContext();
        var argument = {};

        argument.property = property;
        argument.newValue = newValue;
        argument.oldValue = oldValue;

        this.trigger( 'onPropertyChanged', context, argument );
        this.trigger( 'onPropertyChanged:' + property, context, argument );
    },

    /**
     *
     * @returns {*}
     * @private
     */
    _getContext: function() {
        var view = this.getView();

        if( view ) {
            return view.getContext();
        } else {
            return undefined;
        }
    },

    /**
     *
     * @param val
     * @returns {*}
     * @private
     */
    _nullToUndefined: function( val ) {
        if( val === null ) {
            return undefined;
        } else {
            return val;
        }
    },

    /**
     *
     * @param element
     * @param handler
     * @param additionParams
     * @returns {Function}
     */
    createControlEventHandler: function( element, handler, additionParams ) {
        var context;
        var parentView = element.getView();
        additionParams = additionParams || {};

        if( parentView ) {
            context = parentView.context;
        }

        return function( message ) {
            message = message || {};
            _.extend(
                message,
                additionParams
            );
            message.source = element;

            return handler.call( undefined, context, message );
        };
    },

    /**
     *
     * @param handler
     * @returns {*|CollectionEventManager|{name}}
     */
    onRemove: function( handler ) {
        return this.on( messageTypes.onRemove.name, this.createControlEventHandler( this, handler ) );
    },

    /**
     *
     */
    remove: function() {
        this.off();
        this.clear();
    }

} );

InfinniUI.Parameter = Parameter;

//####app/data/parameter/parameterBuilder.js
/**
 *
 * @constructor
 */
function ParameterBuilder() {

    /**
     *
     * @param context
     * @param args
     * @returns {*}
     */
    this.build = function( context, args ) {
        var metadata = args.metadata;
        var builder = args.builder;
        var parentView = args.parentView;
        var basePathOfProperty = args.basePathOfProperty;
        var parameter;

        if( 'Value' in metadata ) {
            parameter = new Parameter( { view: parentView } );
            parameter.setName( metadata[ 'Name' ] );

            if( InfinniUI.Metadata.isBindingMetadata( metadata[ 'Value' ] ) ) {
                var dataBinding = builder.buildBinding( metadata[ 'Value' ], {
                    parentView: parentView,
                    basePathOfProperty: basePathOfProperty
                } );
                dataBinding.bindElement( parameter, '' );
            } else {
                parameter.setValue( metadata[ 'Value' ] );
            }

            if( metadata.OnPropertyChanged ) {
                parameter.onPropertyChanged( '', function( context, args ) {
                    var scriptExecutor = new ScriptExecutor( parentView );
                    return scriptExecutor.executeScript( metadata.OnPropertyChanged, args );
                } );
            }
        }

        return parameter;
    };

}

InfinniUI.ParameterBuilder = ParameterBuilder;

//####app/formats/displayFormat/_common/formatMixin.js
/**
 * @description Методы для форматоирования
 * @mixin
 */
var formatMixin = {
    /**
     * @memberOf formatMixin.prototype
     * @description Разделитель для форматирования коллекций
     */
    separator: ', ',

    /**
     *
     * @param options
     */
    setOptions: function( options ) {
        this.options = _.extend( {}, this.options || {}, options );
    },

    /**
     *
     * @returns {*|{}}
     */
    getOptions: function() {
        return this.options || {};
    },

    /**
     * Форматирование объекта или коллекции объектов.
     * Для форматирования объекта вызывается метод formatValue
     *
     * @param {*} originalValue Форматируемое значение
     * @param {*} culture Культура
     * @param {String} format Строка форматирования
     * @returns {String}
     */
    format: function( originalValue, culture, format ) {
        var result;

        if ( originalValue !== null && typeof originalValue !== 'undefined' && originalValue.constructor === Array ) {
            var values = [];
            for ( var i = 0, ln = originalValue.length; i < ln; i = i + 1 ) {
                values.push( this.formatValue( originalValue[ i ], culture, format ) );
            }
            result = values.join( this.separator );
        } else {
            result = this.formatValue.apply( this, arguments );
        }

        return result;
    },

    /**
     *
     * @returns {*}
     */
    getFormat: function() {
        return this.getPropertyValue( 'formatRule', this.defaultFormat );
    },

    /**
     *
     * @param value
     */
    setFormat: function( value ) {
        this.formatRule = value;
    },

    /**
     * Получение значение свойства.
     * Возвращает установленное значение или defaultValue
     * @param name
     * @param defaultValue
     * @returns {*}
     */
    getPropertyValue: function( name, defaultValue ) {
        var value = this[ name ];

        return ( typeof value === 'undefined' || value === null ) ? defaultValue : value;
    }

};

InfinniUI.formatMixin = formatMixin;

//####app/formats/displayFormat/boolean/booleanFormat.js
/**
 * @description Формат отображения логического значения.
 * @constructor
 * @mixes formatMixin
 */
var BooleanFormat = function() {
};

InfinniUI.BooleanFormat = BooleanFormat;

_.extend( BooleanFormat.prototype, {

    /**
     * @description Текст для отображения истинного значения
     * @memberOf BooleanFormat.prototype
     */
    defaultTrueText: 'True',

    /**
     * @description Текст для отображения ложного значения
     * @memberOf BooleanFormat.prototype
     */
    defaultFalseText: 'False',

    /**
     * @description Возвращает текст для отображения ложного значения.
     * @memberOf BooleanFormat.prototype
     * @returns {String}
     */
    getFalseText: function() {
        return this.getPropertyValue( 'falseText', this.defaultFalseText );
    },

    /**
     * @description Устанавливает текст для отображения ложного значения.
     * @memberOf BooleanFormat.prototype
     * @param {String} value
     */
    setFalseText: function( value ) {
        this.falseText = value;
    },

    /**
     * @description Возвращает текст для отображения истинного значения.
     * @memberOf BooleanFormat.prototype
     * @returns {String}
     */
    getTrueText: function() {
        return this.getPropertyValue( 'trueText', this.defaultTrueText );
    },

    /**
     * @description Устанавливает текст для отображения истинного значения
     * @memberOf BooleanFormat.prototype
     * @param {String} value
     */
    setTrueText: function( value ) {
        this.trueText = value;
    },

    /**
     * @description Форматирует значение
     * @memberOf BooleanFormat.prototype
     * @param {Boolean} originalValue
     * @returns {String}
     */
    formatValue: function( originalValue ) {
        if( originalValue === false || originalValue === null || typeof originalValue === 'undefined' ) {
            return this.getFalseText();
        } else {
            return this.getTrueText();
        }
    }

}, formatMixin );

//####app/formats/displayFormat/boolean/booleanFormatBuilder.js
/**
 * @description Билдер BooleanFormat
 * @constructor
 */
function BooleanFormatBuilder() {
    /**
     * @description Создает и инициализирует экземпляр {@link BooleanFormat}
     * @memberOf BooleanFormatBuilder
     * @instance
     * @param context
     * @param args
     * @returns {BooleanFormat}
     */
    this.build = function( context, args ) {
        var format = new BooleanFormat();

        format.setFalseText( args.metadata.FalseText );
        format.setTrueText( args.metadata.TrueText );

        return format;
    };
}

InfinniUI.BooleanFormatBuilder = BooleanFormatBuilder;

//####app/formats/displayFormat/dateTime/dateTimeFormat.js
/**
 * @description Формат отображения даты/времени.
 * @param format
 * @constructor
 * @mixes formatMixin
 */
function DateTimeFormat( format ) {
    this.setFormat( format );
}

InfinniUI.DateTimeFormat = DateTimeFormat;

_.extend( DateTimeFormat.prototype, {

    /**
     * @description Строка форматирования даты/времени по умолчанию
     * @memberOf DateTimeFormat.prototype
     */
    defaultFormat: 'G',

    /**
     * @description Форматирует дату
     * @memberOf DateTimeFormat.prototype
     * @param {Date} originalDate
     * @param {*} [culture]
     * @param {String} [format]
     * @returns {String}
     */
    formatValue: function( originalDate, culture, format ) {
        var self = this;

        if( typeof originalDate === 'undefined' || originalDate === null ) {
            return '';
        }

        culture = culture || localized;

        var date = this.createDate( originalDate );

        format = format || this.getFormat();

        //if(format.length == 1){
        if( typeof InfinniUI.localizations[ culture.name ].patternDateFormats[ format ] !== 'undefined' ) {
            format = InfinniUI.localizations[ culture.name ].patternDateFormats[ format ];
        }

        return format.replace( this.rg, function( s ) {
            if( s[ 0 ] == '"' || s[ 0 ] == '\'' ) {
                var len = s.length;
                return s.substring( 1, len - 1 );
            } else {
                return self.rules[ s ]( date, culture );
            }
        } );
    },

    /**
     *
     * @param originalDate
     * @returns {*}
     */
    createDate: function( originalDate ) {
        var date;
        var options = this.getOptions();

        date = InfinniUI.DateUtils.createDate( originalDate );

        return InfinniUI.DateUtils.changeTimezoneOffset( date, options.TimeZone );//apply timezoneOffset
    },

    rg: new RegExp(
        '"[\\s\\S]*"|' + '\'[\\s\\S]*\'' +

        '|yyyy|yy|%y|y' +
        '|MMMM|MMM|MM|%M|M' +
        '|dddd|ddd|dd|%d|d' +
        '|HH|%H|H|hh|%h|h' +
        '|mm|%m|m' +
        '|ss|%s|s' +
        '|tt|%t|t' +
        '|zzz|zz|%z|z' +
        '|:|/',

        'g' ),

    rules: {
        'yyyy': function( date ) {
            return date.getFullYear().toString();
        },
        'yy': function( date ) {
            var year = date.getFullYear().toString();
            return year.substring( 2 );
        },
        '%y': function( date ) {
            var year = date.getFullYear().toString();
            year = year.substring( 2 );
            year = parseInt( year );
            return year.toString();
        },
        'y': function( date ) {
            var year = date.getFullYear().toString();
            year = year.substring( 2 );
            year = parseInt( year );
            return year.toString();
        },

        'MMMM': function( date, culture ) {
            var monthIndex = date.getMonth(),
                month = culture.dateTimeFormatInfo.monthNames[ monthIndex ];
            return month;
        },
        'MMM': function( date, culture ) {
            var monthIndex = date.getMonth(),
                month = culture.dateTimeFormatInfo.abbreviatedMonthNames[ monthIndex ];
            return month;
        },
        'MM': function( date ) {
            var monthIndex = date.getMonth() + 1;
            if( monthIndex < 10 ) {
                return '0' + monthIndex.toString();
            } else {
                return monthIndex.toString();
            }
        },
        '%M': function( date ) {
            var monthIndex = date.getMonth() + 1;
            return monthIndex.toString();
        },
        'M': function( date ) {
            var monthIndex = date.getMonth() + 1;
            return monthIndex.toString();
        },

        'dddd': function( date, culture ) {
            var dayIndex = date.getDay(),
                day;

            dayIndex = ( dayIndex == 0 ) ? 6 : dayIndex - 1;
            day = culture.dateTimeFormatInfo.dayNames[ dayIndex ];
            return day;
        },
        'ddd': function( date, culture ) {
            var dayIndex = date.getDay(),
                day;

            dayIndex = ( dayIndex == 0 ) ? 6 : dayIndex - 1;
            day = culture.dateTimeFormatInfo.abbreviatedDayNames[ dayIndex ];
            return day;
        },
        'dd': function( date ) {
            var dayIndex = date.getDate();

            if( dayIndex < 10 ) {
                return '0' + dayIndex.toString();
            } else {
                return dayIndex.toString();
            }
        },
        '%d': function( date ) {
            var dayIndex = date.getDate();
            return dayIndex.toString();
        },
        'd': function( date ) {
            var dayIndex = date.getDate();
            return dayIndex.toString();
        },

        'HH': function( date ) {
            var hoursIndex = date.getHours();

            if( hoursIndex < 10 ) {
                return '0' + hoursIndex.toString();
            } else {
                return hoursIndex.toString();
            }
        },
        '%H': function( date ) {
            var hoursIndex = date.getHours();
            return hoursIndex.toString();
        },
        'H': function( date ) {
            var hoursIndex = date.getHours();
            return hoursIndex.toString();
        },
        'hh': function( date ) {
            var hoursIndex = date.getHours();

            if( hoursIndex > 12 ) {
                hoursIndex -= 12;
            }

            if( hoursIndex < 10 ) {
                return '0' + hoursIndex.toString();
            } else {
                return hoursIndex.toString();
            }
        },
        'h': function( date ) {
            var hoursIndex = date.getHours();
            if( hoursIndex > 12 ) {
                hoursIndex -= 12;
            } else if( hoursIndex === 0 ) {
                hoursIndex = 12;
            }
            return hoursIndex.toString();
        },

        'mm': function( date ) {
            var minuteIndex = date.getMinutes();

            if( minuteIndex < 10 ) {
                return '0' + minuteIndex.toString();
            } else {
                return minuteIndex.toString();
            }
        },
        '%m': function( date ) {
            var minuteIndex = date.getMinutes();
            return minuteIndex.toString();
        },
        'm': function( date ) {
            var minuteIndex = date.getMinutes();
            return minuteIndex.toString();
        },

        'ss': function( date ) {
            var secondsIndex = date.getSeconds();

            if( secondsIndex < 10 ) {
                return '0' + secondsIndex.toString();
            } else {
                return secondsIndex.toString();
            }
        },
        '%s': function( date ) {
            var secondsIndex = date.getSeconds();
            return secondsIndex.toString();
        },
        's': function( date ) {
            var secondsIndex = date.getSeconds();
            return secondsIndex.toString();
        },

        'tt': function( date, culture ) {
            var hoursIndex = date.getHours();

            if( hoursIndex < 12 ) {
                return culture.dateTimeFormatInfo.amDesignator;
            } else {
                return culture.dateTimeFormatInfo.pmDesignator;
            }
        },
        '%t': function( date, culture ) {
            var hoursIndex = date.getHours();

            if( hoursIndex < 12 ) {
                return culture.dateTimeFormatInfo.amDesignator.substr( 0, 1 );
            } else {
                return culture.dateTimeFormatInfo.pmDesignator.substr( 0, 1 );
            }
        },
        't': function( date, culture ) {
            var hoursIndex = date.getHours();

            if( hoursIndex < 12 ) {
                return culture.dateTimeFormatInfo.amDesignator.substr( 0, 1 );
            } else {
                return culture.dateTimeFormatInfo.pmDesignator.substr( 0, 1 );
            }
        },

        'zzz': function( date ) {
            var offset = -date.getTimezoneOffset() / 60;
            var minutes;
            var sign;

            minutes = ( offset - Math.floor( offset ) ) * 100;
            offset = Math.floor( offset );

            if( offset < 0 ) {
                sign = '-';
                offset = -offset;
            } else {
                sign = '+';
            }

            if( minutes < 10 ) {
                minutes = '0' + minutes.toString();
            } else {
                minutes = minutes.toString();
            }

            if( offset < 10 ) {
                return sign + '0' + offset.toString() + ':' + minutes;
            } else {
                return sign + offset.toString() + ':' + minutes;
            }
        },
        'zz': function( date ) {
            var offset = -date.getTimezoneOffset() / 60;
            var sign;

            offset = Math.floor( offset );

            if( offset < 0 ) {
                sign = '-';
                offset = -offset;
            } else {
                sign = '+';
            }

            if( offset < 10 ) {
                return sign + '0' + offset.toString();
            } else {
                return sign + offset.toString();
            }
        },
        'z': function( date, culture ) {
            var offset = -date.getTimezoneOffset() / 60;
            var sign;

            offset = Math.floor( offset );

            if( offset < 0 ) {
                sign = '-';
                offset = -offset;
            } else {
                sign = '+';
            }

            return sign + offset.toString();
        },
        '%z': function( date, culture ) {
            var offset = -date.getTimezoneOffset() / 60;
            var sign;

            offset = Math.floor( offset );

            if( offset < 0 ) {
                sign = '-';
                offset = -offset;
            } else {
                sign = '+';
            }

            return sign + offset.toString();
        },

        ':': function( date, culture ) {
            return culture.dateTimeFormatInfo.timeSeparator;
        },
        '/': function( date, culture ) {
            return culture.dateTimeFormatInfo.dateSeparator;
        }
    }

}, formatMixin );

//####app/formats/displayFormat/dateTime/dateTimeFormatBuilder.js
/**
 * @description Билдер DateTimeFormat
 * @constructor
 */
function DateTimeFormatBuilder() {
    /**
     * @description Создает и инициализирует экземпляр {@link DateTimeFormat}
     * @memberOf DateTimeFormatBuilder
     * @param context
     * @param args
     * @returns {DateTimeFormat}
     */
    this.build = function( context, args ) {
        var format = new DateTimeFormat();

        format.setFormat( args.metadata.Format );

        if( typeof args.metadata.TimeZone === 'number' ) {
            format.setOptions( { TimeZone: args.metadata.TimeZone } );
        }

        return format;
    };
}

InfinniUI.DateTimeFormatBuilder = DateTimeFormatBuilder;

//####app/formats/displayFormat/number/numberFormat.js
/**
 * @description Формат отображения числового значения.
 * @param {String} format Строка форматирования
 * @class NumberFormat
 * @mixes formatMixin
 */
function NumberFormat( format ) {
    this.setFormat( format );
}

InfinniUI.NumberFormat = NumberFormat;

_.extend( NumberFormat.prototype, {

    /**
     * @description Строка форматирования числового значения по умолчанию
     * @memberOf NumberFormat.prototype
     */
    defaultFormat: 'n',

    /**
     * @description Форматирует числовое значение
     * @memberOf NumberFormat.prototype
     * @param {Number} originalValue Форматируемое значение
     * @param {Culture} [culture] Культура
     * @param {String} [format] Строка форматирования
     * @returns {String}
     */
    formatValue: function( originalValue, culture, format ) {
        if ( typeof originalValue === 'undefined' || originalValue === null ) {
            return '';
        }
        var self = this;

        culture = culture || localized;

        format = format || this.getFormat();

        return format.replace( this.rg, function( s, formatName, formatParam ) {
            if( formatParam !== undefined && formatParam != '' ) {
                formatParam = parseInt( formatParam );
            }else{
                formatParam = undefined;
            }
            return self.rules[ formatName ].call( self, originalValue, formatParam, culture );
        } );
    },

    rg: /^([pnc])(\d*)$/ig,

    rules: {
        'P': function( val, param, culture ) {
            param = ( param !== undefined ) ? param : culture.numberFormatInfo.percentDecimalDigits;
            var isPositive = val >= 0,
                formattedNumber = this.formatNumber( Math.abs( val ), param, culture.numberFormatInfo.percentGroupSeparator, culture.numberFormatInfo.percentDecimalSeparator ),
                result;

            if( isPositive ) {
                result = culture.numberFormatInfo.percentPositivePattern.replace( 'p', formattedNumber );
            }else{
                result = culture.numberFormatInfo.percentNegativePattern.replace( 'p', formattedNumber );
            }

            result = result.replace( '%', culture.numberFormatInfo.percentSymbol );

            return result;
        },
        'p': function( val, param, culture ) {
            val *= 100;
            return this.rules.P.call( this, val, param, culture );
        },
        'n': function( val, param, culture ) {
            param = ( param !== undefined ) ? param : culture.numberFormatInfo.numberDecimalDigits;
            var isPositive = val >= 0,
                formattedNumber = this.formatNumber( Math.abs( val ), param, culture.numberFormatInfo.numberGroupSeparator, culture.numberFormatInfo.numberDecimalSeparator ),
                result;

            if( isPositive ) {
                result = culture.numberFormatInfo.numberPositivePattern.replace( 'n', formattedNumber );
            }else{
                result = culture.numberFormatInfo.numberNegativePattern.replace( 'n', formattedNumber );
            }

            return result;
        },
        'N': function() {
            return this.rules.n.apply( this, arguments );
        },
        'c': function( val, param, culture ) {
            param = ( param !== undefined ) ? param : culture.numberFormatInfo.currencyDecimalDigits;
            var isPositive = val >= 0,
                formattedNumber = this.formatNumber( Math.abs( val ), param, culture.numberFormatInfo.currencyGroupSeparator, culture.numberFormatInfo.currencyDecimalSeparator ),
                result;

            if( isPositive ) {
                result = culture.numberFormatInfo.currencyPositivePattern.replace( 'c', formattedNumber );
            }else{
                result = culture.numberFormatInfo.currencyNegativePattern.replace( 'c', formattedNumber );
            }
            result = result.replace( '$', culture.numberFormatInfo.currencySymbol );

            return result;
        },
        'C': function() {
            return this.rules.c.apply( this, arguments );
        }
    },

    /**
     * @protected
     * @description Форматирует числовое значение
     * @memberOf NumberFormat.prototype
     * @param {Number} val Значение
     * @param {Number} capacity Количество знаков в дробной части
     * @param {Number} groupSeparator Разделитель между группами
     * @param {String} decimalSeparator Разделитель между целой и дробной частью
     * @returns {String}
     */
    formatNumber: function( val, capacity, groupSeparator, decimalSeparator ) {
        val = val.toFixed( capacity );

        var stringOfVal = val.toString();
        var splittedVal = stringOfVal.split( '.' );
        var intPath = this.formatIntPath( splittedVal[ 0 ], groupSeparator );
        var fractPath = this.formatFractPath( splittedVal[ 1 ], decimalSeparator, capacity );

        return intPath + fractPath;
    },

    /**
     * @protected
     * @description Форматирует целую часть числа
     * @memberOf NumberFormat.prototype
     * @param {String} intPath Целая часть числа
     * @param {String} splitter Разделитель между группами
     * @returns {String}
     */
    formatIntPath: function( intPath, splitter ) {
        return intPath.replace( /(\d{1,3}(?=(\d{3})+(?:\.\d|\b)))/g, '$1' + splitter );
    },

    /**
     * @protected
     * @description Форматирует дробную часть числа
     * @memberOf NumberFormat.prototype
     * @param {String} fractPath Дробная часть числа
     * @param {String} splitter Разделитель между целой и дробной частью
     * @param {Number} capacity Количество знаков в дробной части
     * @returns {string}
     */
    formatFractPath: function( fractPath, splitter, capacity ) {
        var result = fractPath ? fractPath : '';
        var postfix;

        if( capacity == 0 ) {
            return '';
        }

        if( result.length >= capacity ) {
            return splitter + result.substr( 0, capacity );
        }

        postfix = Math.pow( 10, capacity - result.length );
        postfix = postfix.toString().substr( 1 );
        return splitter + result + postfix;
    }

}, formatMixin );

//####app/formats/displayFormat/number/numberFormatBuilder.js
/**
 * @description Билдер NumberFormat
 * @constructor
 */
function NumberFormatBuilder() {
    /**
     * @description Создает и инициализирует экземпляр {@link NumberFormat}
     * @memberOf NumberFormatBuilder
     * @param context
     * @param args
     * @returns {NumberFormat}
     */
    this.build = function( context, args ) {
        var format = new NumberFormat();

        format.setFormat( args.metadata.Format );

        return format;
    };

}

InfinniUI.NumberFormatBuilder = NumberFormatBuilder;

//####app/formats/displayFormat/object/objectFormat.js
/**
 * @description Формат отображения объекта
 * @param {String} format Строка форматирования
 * @constructor
 * @mixes formatMixin
 */
function ObjectFormat( format ) {
    this.setFormat( format );
    this.formatters = [ DateTimeFormat, NumberFormat ];
}

InfinniUI.ObjectFormat = ObjectFormat;

_.extend( ObjectFormat.prototype, {

    /**
     * @private
     * @description Форматирует объект
     * @memberOf ObjectFormat.prototype
     * @param {*} originalValue Форматируемое значение
     * @param {*} culture Культура
     * @param {String} format Строка форматирования
     * @returns {String}
     */
    formatValue: function( originalValue, culture, format ) {
        culture = culture || localized;
        format = format || this.getFormat();

        var regexp = /\$\{[^}]*}/g;
        var trim = /^\$\{|\}$/g;
        var value = '';

        value = format.replace( regexp, this.formatIterator.bind( this, originalValue, culture ) );

        return value;
    },

    /**
     * @private
     * @description Форматирование каждого простого вхождения формата в строку форматирования объекта
     * @memberOf ObjectFormat.prototype
     * @param {*} originalValue Форматируемое значение
     * @param {*} culture
     * @param {String} match строка форматирования
     * @returns {String}
     */
    formatIterator: function( originalValue, culture, match ) {
        var regexp = /\$\{[^}]*}/g;
        var trim = /^\$\{|\}$/g;
        var result, text, formatter, value, parts;

        result = match;
        text = match.replace( trim, '' );
        parts = text.split( ':' );

        if( typeof originalValue === 'object' ) {
            value = ( parts[ 0 ] === '' ) ? originalValue : InfinniUI.ObjectUtils.getPropertyValue( originalValue, parts[ 0 ] );
        } else {
            value = originalValue;
        }

        if( parts.length === 2 ) {
            // Найдено "[Property]:Format"
            for( var i = 0, ln = this.formatters.length; i < ln; i = i + 1 ) {
                //Пытаемся по очереди отформатировать значение разными форматами
                formatter = new this.formatters[ i ]( parts[ 1 ] );
                formatter.setOptions( this.getOptions() );

                text = formatter.format( value, culture );
                if( text !== parts[ 1 ] ) {
                    //Если формат отформатировал строку - оставляем ее
                    result = text;
                    break;
                }
            }
        } else {
            // Найдено "[Property]"
            result = value;
        }

        return ( typeof result === 'undefined' || result === null ) ? '' : result;
    }

}, formatMixin );

//####app/formats/displayFormat/object/objectFormatBuilder.js
/**
 * @description Билдер ObjectFormat
 * @constructor
 */
function ObjectFormatBuilder() {
    /**
     * @description Создает и инициализирует экземпляр {@link ObjectFormat}
     * @memberOf ObjectFormatBuilder
     * @param context
     * @param args
     * @returns {ObjectFormat}
     */
    this.build = function( context, args ) {
        var format = new ObjectFormat();

        format.setFormat( args.metadata.Format );

        return format;
    };

}

InfinniUI.ObjectFormatBuilder = ObjectFormatBuilder;

//####app/linkView/openMode/strategy/_mixins/openModeAutoFocusMixin.js
/**
 * @mixin
 * @type {{applyAutoFocus: openModeAutoFocusMixin.applyAutoFocus}}
 */
var openModeAutoFocusMixin = {

    /**
     *
     */
    applyAutoFocus: function() {
        var view = this.view;
        var focusOnControl = view && view.getFocusOnControl();

        if( !focusOnControl ) {
            return;
        }

        var focusInterval = setInterval( function() {
            var elements = view.findAllChildrenByName( focusOnControl );
            if( Array.isArray( elements ) && elements.length > 0 ) {
                var element = elements[ 0 ];
                if( !jQuery.contains( document, element.control.controlView.el ) ) {
                    return;
                }

                element.setFocus && element.setFocus();
                clearFocusInterval();
            }
        }, 1000 / 3 );

        setTimeout( clearFocusInterval, 3000 );

        function clearFocusInterval() {
            clearInterval( focusInterval );
        }
    }

};

InfinniUI.openModeAutoFocusMixin = openModeAutoFocusMixin;

//####app/linkView/linkViewBuilderBase.js
/**
 *
 * @constructor
 */
function LinkViewBuilderBase() {
}

_.extend( LinkViewBuilderBase.prototype, {

    /**
     *
     * @param context
     * @param args
     * @returns {LinkView}
     */
    build: function( context, args ) {
        var metadata = args.metadata;
        var parentView = this.getParentViewByOpenMode( args, metadata.OpenMode );
        var linkView = new LinkView( parentView );
        var viewTemplate = this.getViewTemplate( args, parentView );

        linkView.setViewTemplate( viewTemplate );

        if( 'OpenMode' in metadata ) {
            linkView.setOpenMode( metadata.OpenMode );
        }

        if( 'Container' in metadata ) {
            linkView.setContainer( metadata.Container );
        }

        if( 'DialogWidth' in metadata ) {
            linkView.setDialogWidth( metadata.DialogWidth );
        }

        return linkView;
    },

    /**
     *
     */
    getViewTemplate: function() {
        throw new Error( 'LinkViewBuilderBase.getViewTemplate: В потомке LinkViewBuilderBase не переопределен метод getViewTemplate.' );
    },

    /**
     *
     * @param params
     * @param viewMetadata
     * @param parentView
     * @param onViewReadyHandler
     */
    buildViewByMetadata: function( params, viewMetadata, parentView, onViewReadyHandler ) {
        var builder = params.builder;
        var parameters = this.buildParameters( params );

        if( viewMetadata !== null && typeof viewMetadata !== 'undefined' ) {
            var view = builder.buildType( 'View', viewMetadata, {
                parentView: parentView,
                parent: parentView,
                params: parameters,
                suspended: params.suspended
            } );

            onViewReadyHandler( view );

        } else {
            InfinniUI.global.logger.error( 'LinkViewBuilderBase.buildViewByMetadata: view metadata for ' + params.metadata + ' not found.' );
        }
    },

    /**
     *
     * @param params
     * @returns {*}
     */
    buildParameters: function( params ) {
        var parametersMetadata = params.metadata[ 'Parameters' ];
        var builder = params.builder;
        var parentView = params.parentView;
        var result = {};
        var parameter;

        if( typeof parametersMetadata !== 'undefined' && parametersMetadata !== null ) {
            for( var i = 0; i < parametersMetadata.length; i++ ) {
                if( typeof parametersMetadata[ i ].Value !== 'undefined' ) {
                    parameter = builder.buildType( 'Parameter', parametersMetadata[ i ], {
                        parentView: parentView,
                        basePathOfProperty: params.basePathOfProperty
                    } );
                    result[ parameter.getName() ] = parameter;
                }
            }
        }
        return result;
    },

    /**
     *
     * @param params
     * @param mode
     * @returns {*}
     */
    getParentViewByOpenMode: function( params, mode ) {
        if( mode === null || typeof mode === 'undefined' || mode == 'Default' ) {
            return params.parentView.getApplicationView();
        }

        if( mode == 'Container' ) {
            var containerName = params.metadata.Container;
            var container = InfinniUI.global.containers[ containerName ];

            if( container ) {
                return container.getView();
            } else {
                return params.parentView;
            }
        }

        return params.parentView;
    }

} );

InfinniUI.LinkViewBuilderBase = LinkViewBuilderBase;

//####app/linkView/inlineViewBuilder.js
/**
 * @augments LinkViewBuilderBase
 * @constructor
 */
function InlineViewBuilder() {
    _.superClass( InlineViewBuilder, this );
}

_.inherit( InlineViewBuilder, LinkViewBuilderBase );

InfinniUI.InlineViewBuilder = InlineViewBuilder;

_.extend( InlineViewBuilder.prototype, {

    /**
     *
     * @param args
     * @param parentView
     * @returns {Function}
     */
    getViewTemplate: function( args, parentView ) {
        var that = this;

        return function( onViewReadyHandler ) {
            that.buildViewByMetadata( args, args.metadata[ 'View' ], parentView, function( view ) {
                return onViewReadyHandler.call( null, view );
            } );
        };
    }

} );

//####app/linkView/linkView.js
/**
 *
 * @param parent
 * @constructor
 */
function LinkView( parent ) {
    this.openMode = 'Default';
    this.parent = parent;

    this.viewTemplate = function() {
        return '';
    };
}

InfinniUI.LinkView = LinkView;

_.extend( LinkView.prototype, {

    /**
     *
     * @param mode
     */
    setOpenMode: function( mode ) {
        if( _.isEmpty( mode ) ) return;
        this.openMode = mode;
    },

    /**
     *
     * @returns {string|*}
     */
    getOpenMode: function() {
        return this.openMode;
    },

    /**
     *
     * @param containerName
     */
    setContainer: function( containerName ) {
        this.containerName = containerName;
    },

    /**
     *
     * @param viewTemplate
     */
    setViewTemplate: function( viewTemplate ) {
        this.viewTemplate = viewTemplate;
    },

    /**
     *
     * @param dialogWidth
     */
    setDialogWidth: function( dialogWidth ) {
        dialogWidth = dialogWidth.toLowerCase();
        if( dialogWidth == 'extralarge' ) {
            dialogWidth = '100%';
        }
        this.dialogWidth = dialogWidth;
    },

    /**
     *
     * @param resultCallback
     */
    createView: function( resultCallback ) {
        var that = this;

        this.viewTemplate( onViewReady );

        function onViewReady( createdView ) {
            that.view = createdView;
            that._initViewHandler( createdView );

            resultCallback( createdView );
        }
    },

    /**
     *
     * @param view
     * @private
     */
    _initViewHandler: function( view ) {
        var that = this;
        var openMode = that.openMode;
        var openStrategy;
        var container;

        if( view.setParent ) {
            view.setParent( this.parent );
        }

        InfinniUI.global.messageBus.send( 'onViewCreated', { openMode: openMode, view: view } );

        switch( openMode ) {
            case 'Container':
                container = InfinniUI.global.containers[ this.containerName ];

                openStrategy = new OpenModeContainerStrategy();
                openStrategy.setView( view );
                openStrategy.setContainer( container );
                view.setOpenStrategy( openStrategy );
                break;

            case 'Dialog':
                openStrategy = new OpenModeDialogStrategy();
                openStrategy.setView( view );
                if( this.dialogWidth ) {
                    openStrategy.setDialogWidth( this.dialogWidth );
                }
                openStrategy.setView( view );
                view.setOpenStrategy( openStrategy );
                break;
            default:
                break;
        }
    }

} );

//####app/linkView/metadataViewBuilder.js
/**
 * @augments LinkViewBuilderBase
 * @constructor
 */
function MetadataViewBuilder() {
    _.superClass( MetadataViewBuilder, this );
}

_.inherit( MetadataViewBuilder, LinkViewBuilderBase );

InfinniUI.MetadataViewBuilder = MetadataViewBuilder;

_.extend( MetadataViewBuilder.prototype, {

    /**
     *
     * @param params
     * @param parentView
     * @returns {Function}
     */
    getViewTemplate: function( params, parentView ) {
        var that = this;
        var metadataDataSourceBuildProps = {
            metadata: params.metadata,
            applicationView: parentView && parentView.getApplicationView()
        };

        return function( onViewReadyHandler ) {
            var metadataProvider = InfinniUI.providerRegister.build( 'MetadataDataSource', metadataDataSourceBuildProps );

            metadataProvider.getMetadata( function( viewMetadata ) {
                if( viewMetadata === null || typeof viewMetadata === 'undefined' ) {
                    InfinniUI.global.logger.error( 'view metadata not found' );
                    InfinniUI.global.messageBus.send( messageTypes.onViewBuildError, {
                        error: 'metadata not found',
                        metadata: metadata
                    } );
                    return;
                }

                var onReady = function() {
                    var args = Array.prototype.slice.call( arguments );
                    onViewReadyHandler.apply( null, args );
                };

                that.buildViewByMetadata( params, viewMetadata, parentView, onReady );
            } );
        };
    }

} );

//####app/linkView/openMode/strategy/openModeContainerStrategy.js
/**
 *
 * @constructor
 */
var OpenModeContainerStrategy = function() {
};

_.extend( OpenModeContainerStrategy.prototype, {

    /**
     *
     * @param view
     */
    setView: function( view ) {
        this.view = view;
    },

    /**
     *
     * @param container
     */
    setContainer: function( container ) {
        this.container = container;
    },

    /**
     *
     */
    open: function() {
        var logger = InfinniUI.global.logger;
        if( !this.container ) {
            logger.error( 'OpenModeContainerStrategy.open: не задан контейнер, в который должо быть помещено приложение' );
        }

        this.container.setLayout( this.view );
    },

    /**
     *
     */
    close: function() {
        this.container.setLayout( null );
        this.view.remove();
    }

} );

InfinniUI.OpenModeContainerStrategy = OpenModeContainerStrategy;

//####app/linkView/openMode/strategy/openModeDefaultStrategy.js
/**
 * @mixes openModeAutoFocusMixin
 * @constructor
 */
var OpenModeDefaultStrategy = function() {
};

_.extend( OpenModeDefaultStrategy.prototype, {

    /**
     *
     * @param view
     */
    setView: function( view ) {
        this.view = view;
    },

    /**
     *
     */
    open: function() {
        var $container = InfinniUI.config.$rootContainer || $( 'body' );
        var oldView = $container.data( 'view' );

        if( oldView ) {
            oldView.close();
        }

        $container
            .append( this.view.render() )
            .data( 'view', this.view );

        this.applyAutoFocus();
    },

    /**
     *
     */
    close: function() {
        this.view.remove();
    }

}, openModeAutoFocusMixin );

InfinniUI.OpenModeDefaultStrategy = OpenModeDefaultStrategy;

//####app/linkView/openMode/strategy/openModeDialogStrategy.js
/**
 *
 * @constructor
 */
var OpenModeDialogStrategy = function() {
    this.dialogWidth = 'default';
};

InfinniUI.OpenModeDialogStrategy = OpenModeDialogStrategy;

_.extend( OpenModeDialogStrategy.prototype, {

    template: InfinniUI.Template[ 'linkView/template/dialog.tpl.html' ],

    /**
     *
     * @param view
     */
    setView: function( view ) {
        this.view = view;
    },

    /**
     *
     * @param dialogWidth
     */
    setDialogWidth: function( dialogWidth ) {
        this.dialogWidth = dialogWidth;
    },

    /**
     *
     */
    open: function() {
        // чтобы пользователь случайно не обратился к элементу в фокусе,
        // пока диалоговое окно создается и ещё не перехватило фокус,
        // необходимо старую фокусировку снять
        $( document.activeElement ).blur();

        var modalParams = { dialogWidth: this.dialogWidth };
        var $template = $( this.template( modalParams ) );
        var $closeButton = $( 'button', $template );
        var $header = $( 'h4', $template );
        var view = this.view;
        var $modal = $template.appendTo( $( 'body' ) );

        this.$modal = $modal;

        $modal.on( 'shown.bs.modal', function( e ) {
            $( e.target ).find( '.first-focus-element-in-modal' ).focus();
        } );

        $modal.on( 'hidden.bs.modal', this.cleanup.bind( this ) );

        var $modalBody = $modal.find( '.modal-body' );

        $modalBody.append( this.view.render() );

        $modal.modal( {
            show: true,
            backdrop: 'static',
            modalOverflow: true,
            keyboard: view.getCloseButtonVisibility(),
            focus: this
        } );

        this._initBehaviorFocusingInModal( $modal, $modalBody );

        var updateCloseButtonVisibility = function() {
            $closeButton.toggleClass( 'hidden', !view.getCloseButtonVisibility() );
        };

        updateCloseButtonVisibility();

        view.control.controlView.listenTo( view.control.controlModel, 'change:closeButtonVisibility', updateCloseButtonVisibility );

        var headerTemplate = view.getHeaderTemplate();

        $header.append( headerTemplate().render() );

        $modal.find( '.pl-close-modal' ).on( 'click', function() {
            view.close();
        } );

        InfinniUI.ModalWindowService.modalWasOpened( {
            modal: this.$modal,
            background: $( '.modal-backdrop' ).last()
        } );
    },

    /**
     *
     * @param $modal
     * @param $modalBody
     * @private
     */
    _initBehaviorFocusingInModal: function( $modal, $modalBody ) {
        $modalBody.append( '<div class="lastfocuselementinmodal" tabindex="0">' );
        $modal.find( '.lastfocuselementinmodal' ).on( 'focusin', function() {
            $modal.find( '.firstfocuselementinmodal' ).focus();
        } );
        $modal.keydown( function( e ) {
            if( $( document.activeElement ).hasClass( 'lastfocuselementinmodal' ) && ( e.which || e.keyCode ) == 9 ) {
                e.preventDefault();
                $modal.find( '.firstfocuselementinmodal' ).focus();
            }

            if( $( document.activeElement ).hasClass( 'firstfocuselementinmodal' ) && ( e.which || e.keyCode ) == 9 && e.shiftKey ) {
                e.preventDefault();
                $modal.find( '.lastfocuselementinmodal' ).focus();
            }
        } );
    },

    /**
     *
     */
    close: function() {
        if( this.$modal ) {
            this.$modal.modal( 'hide' );
        }
    },

    /**
     *
     */
    cleanup: function() {
        this.view.remove();
        this.$modal.remove();
        InfinniUI.ModalWindowService.modalWasClosed( this.$modal );
    }

} );

//####app/launching/autoHeightService.js
InfinniUI.AutoHeightService = {
    windowHeight: 0,
    clientHeight: 0,
    exchange: null,
    times: [],
    adaptableByHeightSelector: '.pl-adaptable-by-height:not(:hidden)',

    /**
     *
     * @param $el
     * @param height
     * @param fix
     * @returns {number}
     */
    setOuterHeight: function( $el, height, fix ) {
        var delta = 0;
        [ 'border-top-width', 'border-bottom-width', 'padding-top', 'padding-bottom', 'margin-top', 'margin-bottom' ]
            .forEach( function( name ) {
                delta += parseInt( $el.css( name ) );
            } );
        var contentHeight = height - delta;
        if( fix ) {
            contentHeight += fix;
        }

        $el.height( contentHeight );

        return contentHeight;
    },

    /**
     *
     * @returns {string}
     */
    getModalSelector: function() {
        return '.modal-scrollable';
    },

    buildTree: function( items, parentEl, $parentEl, elements, list ) {
        var manager = this;
        items = _.where( list, { parent: parentEl } );

        return {
            isElement: _.indexOf( elements, parentEl ) !== -1,
            element: parentEl,
            $element: $parentEl,
            child: _.map( items, function( item ) {
                return manager.buildTree( items, item.element, item.$element, elements, list );
            } )
        };
    },

    /**
     *
     * @param elements
     * @param el
     * @param $el
     * @returns {*|{isElement: boolean, element: *, $element: *, child}}
     */
    formTree: function( elements, el, $el ) {
        var $parent;
        var list = [];
        var $element;
        var element;

        //Строим дерево элементов: от концевых элементов поднимается к корневому элементу
        for( var i = 0, ln = elements.length; i < ln; i = i + 1 ) {
            element = elements[ i ];
            $element = $( element );
            do {
                $parent = $element.parent();

                var a = _.findWhere( list, { element: element } );
                if( typeof a !== 'undefined' ) {
                    //Элемент уже занесен в список
                    break;
                }
                list.push( {
                    element: element,
                    $element: $element,
                    parent: $parent.get( 0 ),
                    $parent: $parent
                } );

                $element = $parent;
                element = $parent.get( 0 );
            } while( element !== el );
        }

        return this.buildTree( list, el, $el, elements, list );
    },

    /**
     *
     * @param node
     * @param height
     * @returns {*|number}
     */
    setHeight: function( node, height ) {
        var originalHeight = node.$element.attr( 'data-height-original' );
        if( originalHeight === '' ) {
            node.$element.attr( 'data-height-original', node.element.style.height );
        }
        return this.setOuterHeight( node.$element, height );
    },

    /**
     * Если внутри child один элемент:
     *   - устанавливаем высоту в 100% (под 100% здесь и далее понимается height)
     * Если внутри child несколько элементов
     *   - offsetTop совпадают - устанавливаем высоту в 100%
     *   - offsetTop не совпадают - устанавливаем высоту в (100% / child.length)
     */
    defineWay: function( node, height ) {
        var nodeHeight = this.setHeight( node, height ),
            manager = this;

        if( node.$element.hasClass( 'pl-scroll-panel' ) || node.$element.hasClass( 'modal-scrollable' ) ) {
            //Т.к. скроллпанель бесконечная по высоте, контролы внутри нее по высоте не растягиваем
            return;
        } else if( node.$element.hasClass( 'tab-content' ) ) {
            _.each( node.child, function( node ) {
                manager.defineWay( node, nodeHeight );
            } );
        } else if( node.child.length > 0 ) {
            this.goThroughTree( node, nodeHeight );
        }
    },

    /**
     *
     * @param node
     * @param height
     */
    goThroughTree: function( node, height ) {
        var manager = this;
        if( node.$element.parentsUntil( '.modal' ).length ) {
            node.$element.attr( 'data-height-original', node.element.style.height );
        }

        var children = node.$element
            .children( ':not(:hidden):not(.modal-scrollable):not(.modal-backdrop):not(.pl-dropdown-container)' );
        var grid = _.chain( children )
            .filter( function( el ) {
                var position = $( el ).css( 'position' );
                return [ 'absolute', 'fixed' ].indexOf( position ) === -1;
            } )
            .groupBy( 'offsetTop' )
            .value();
        var heights = [];
        var row;

        _.each( grid, function( row, i ) {
            var nodes = [];
            _.each( row, function( e ) {
                var n = _.find( node.child, function( c ) {
                    return c.element === e;
                } );
                if( n ) nodes.push( n );
            } );

            heights.push( nodes.length ? 0 : _.reduce( row, function( height, e ) {
                return Math.max( height, $( e ).outerHeight( true ) );
            }, 0 ) );

            grid[ i ] = nodes;
        } );

        var fixedHeight = heights.reduce( function( total, height ) {
                return total + height;
            }, 0 ),
            count = _.reduce( grid, function( count, row ) {
                return row.length ? count + 1 : count;
            }, 0 ),

            heightForNode = Math.floor( ( height - fixedHeight ) / count );

        _.each( grid, function( row ) {
            if( row.length === 0 ) return;
            _.each( row, function( node ) {
                manager.defineWay( node, heightForNode );
            }, this );
        } );
    },

    /**
     *
     * @param el
     * @param pageHeight
     */
    resize: function( el, pageHeight ) {
        var startTime = Date.now(); //start time
        var $el = $( el );
        var elements = $el.find( this.adaptableByHeightSelector );

        if( elements.length === 0 ) {
            return;
        }

        var tree = this.formTree( elements, el, $el );
        this.defineWay( tree, pageHeight );
        var endTime = Date.now(); //end time
        this.timeWatcher( endTime - startTime );
    },

    /**
     *
     * @param time
     */
    timeWatcher: function( time ) {
        if( time >= 20 ) {
            this.times.push( time );
        }
    },

    /**
     *
     * @returns {Array}
     */
    getTimes: function() {
        return this.times;
    },

    /**
     *
     * @param container
     * @param clientHeight
     */
    resizeView: function( container, clientHeight ) {
        var $page = $( container || document );
        var contentHeight = this.setOuterHeight( $page, clientHeight );

        this.resize( $page.get( 0 ), contentHeight );
    },

    /**
     *
     */
    resizeDialog: function() {
        var $currentDialog = $( this.getModalSelector() ).last();

        this._resizeDialog( $currentDialog );
        this.resetDialogHeight( $currentDialog );
    },

    /**
     *
     * @param $modal
     */
    resetDialogHeight: function( $modal ) {
        var space = 10;

        if( $modal.children() ) {
            var $container = $modal.children();
            var $header = $( '.modal-header', $container );
            var $body = $( '.modal-body', $container );
            var $el = $( this.adaptableByHeightSelector, $modal );

            $el.parentsUntil( '.modal', ':not(' + this.adaptableByHeightSelector + ')' ).css( 'height', 'auto' );
            $container
                .css( 'top', ( this.windowHeight - $header.outerHeight( true ) - $body.outerHeight( true ) ) / 2 );

            $modal.children( '.modal:not(.messagebox)' )
                .height( $body.outerHeight( true ) + $header.outerHeight( true ) );
        }
    },

    /**
     *
     * @param $modal
     * @private
     */
    _resizeDialog: function( $modal ) {
        var space = 10;//Высота отступа от вертикальных границ диалога до границ экрана
        var $container = $modal.children();

        $container.css( 'margin-top', 0 );

        var $header = $( '.modal-header', $container );
        var $body = $( '.modal-body', $container );
        var headerHeight = $header.outerHeight( true );
        $body.css( 'max-height', this.windowHeight - headerHeight );

        $container.css( 'margin-top', 0 );

        var el = $( this.adaptableByHeightSelector, $modal );

        if( el.length !== 0 ) {
            // Если диалог содержит элементы которые должны растягиваться по вертикали на 100%
            // пересчитываем высоту

            var containerHeight = this.setOuterHeight( $modal, this.windowHeight - space * 2 );
            //Высота для содержимого окна диалога
            var clientHeight = this.setOuterHeight( $container, containerHeight ) - $header.outerHeight();

            this.resize( $body[ 0 ], clientHeight );
        }
    },

    /**
     *
     * @param container
     */
    recalculation: function( container ) {
        if( InfinniUI.config.enableAutoHeightService ) {
            $( container ).addClass( 'page-content-overflow-hidden' );
            this.windowHeight = $( window ).height();
            this.onChangeLayout( container );
            if( this.exchange === null ) {
                this.exchange = InfinniUI.global.messageBus;
                this.exchange
                    .subscribe( 'OnChangeLayout', _.debounce( this.onChangeLayout.bind( this, container ), 42 ) );
            }
        }
    },

    /**
     *
     * @param container
     */
    slidingRecalculation: function( container ) {
        var that = this;

        for( var i = 3; i >= 0; i-- ) {
            setTimeout( function() {
                that.recalculation( container );
            }, 500 + i * 300 );
        }
    },

    /**
     *
     * @param container
     */
    onChangeLayout: function( container ) {
        var clientHeight = this.windowHeight;
        this.resizeView( container, clientHeight );
        this.resizeDialog();
    }

};

//####app/launching/specialApplicationView.js
/**
 *
 * @constructor
 */
function SpecialApplicationView() {

    this.isView = true;

    /**
     *
     * @returns {*}
     */
    this.getContainer = function() {
        return this.$container;
    };

    /**
     *
     * @param $el
     */
    this.open = function( $el ) {
        this.$container = $el;

        if( $el ) {
            $el.addClass( 'special-application-view' );
        }
    };

    /**
     *
     * @returns {SpecialApplicationView}
     */
    this.getApplicationView = function() {
        return this;
    };

    /**
     *
     * @returns {null}
     */
    this.getContext = function() {
        return null;
    };

}

//####app/launching/openHomePage.js
/**
 *
 * @param $target
 */
InfinniUI.openHomePage = function( $target ) {
    var builder = new ApplicationBuilder();
    var rootView = new SpecialApplicationView();

    InfinniUI.localStorageDataSource = new InfinniUI.LocalStorageDataSource( {
        view: rootView
    } );

    rootView.open( $target );

    InfinniUI.AutoHeightService.slidingRecalculation( $target );
    subscribeRecalculationOnWindowResize( $target );

    getHomePageLinkViewPromise()
        .done( function( viewMetadata ) {
            var action = builder.buildType( 'OpenAction', viewMetadata, { parentView: rootView } );
            action.execute();
        } );
};

/**
 *
 * @param $container
 */
function subscribeRecalculationOnWindowResize( $container ) {
    var TIMEOUT = 40;
    var WAIT = 50;
    var resizeTimeout;

    $( window ).resize( function() {
        clearTimeout( resizeTimeout );
        resizeTimeout = setTimeout( _.debounce( onWindowResize, WAIT ), TIMEOUT );
    } );

    function onWindowResize() {
        InfinniUI.AutoHeightService.recalculation( $container );
    }
}

/**
 * @returns {*}
 */
function getHomePageLinkViewPromise() {
    var defer = $.Deferred();
    var homePageMetadata = InfinniUI.config.homePage;

    if( typeof homePageMetadata === 'string' ) {
        $.ajax( {
            url: homePageMetadata,
            dataType: 'json'
        } )
            .then( function( data ) {
                defer.resolve( {
                    LinkView: {
                        InlineView: {
                            View: data
                        }
                    }
                } );
            }, function( jqXHR, textStatus, errorThrown ) {
                console.error( textStatus );
            } );
    } else {
        defer.resolve( {
            LinkView: {
                AutoView: homePageMetadata
            }
        } );
    }

    return defer.promise();
}

//####app/launching/startSettings.js
if( InfinniUI.config.configName !== null && typeof InfinniUI.config.configName !== 'undefined' ) {
    document.title = InfinniUI.config.configName;
}

if( InfinniUI.config.cacheMetadata === false ) {
    $.ajaxSetup( { cache: false } );
}

moment.locale( InfinniUI.config.lang && InfinniUI.config.lang.substr( 0, 2 ) );

InfinniUI.providerRegister.register( 'ObjectDataSource', InfinniUI.Providers.ObjectDataProvider );
InfinniUI.providerRegister.register( 'LocalStorageDataSource', InfinniUI.Providers.LocalStorageDataProvider );

InfinniUI.providerRegister.register( 'MetadataDataSource', function( args ) {
    var applicationContainer = args.applicationView && args.applicationView.getContainer();
    InfinniUI.AutoHeightService.slidingRecalculation( applicationContainer );

    return new InfinniUI.Providers.MetadataProviderREST( new InfinniUI.Providers.QueryConstructorMetadata( InfinniUI.config.serverUrl, args.metadata ) );
} );


InfinniUI.providerRegister.register( 'DocumentDataSource', InfinniUI.Providers.RestDataProvider );
InfinniUI.providerRegister.register( 'RestDataSource', InfinniUI.Providers.RestDataProvider );

InfinniUI.providerRegister.register( 'ServerActionProvider', function() {
    return new InfinniUI.Providers.ServerActionProvider();
} );

//####app/script/scriptBuilder.js
/**
 *
 * @constructor
 */
function ScriptBuilder() {}

InfinniUI.ScriptBuilder = ScriptBuilder;

/**
 *
 * @param context
 * @param args
 * @returns {Function}
 */
ScriptBuilder.prototype.build = function( context, args ) {
    var metadata = args.metadata;
    var name = metadata.Name;
    var body = metadata.Body;
    var func = new Function( 'context', 'args', body );

    return function( context, args ) {
        var result;

        try {
            result = func.call( undefined, context, args );
        } catch ( err ) {
            console.groupCollapsed( '%2$s: %1$c%3$s', 'color: #ff0000', name, err.message );
            console.error( body );
            console.groupEnd();
        }

        return result;
    };
};


//####app/script/scriptExecutor.js
/**
 *
 * @param parent
 * @constructor
 */
function ScriptExecutor( parent ) {
    this.parent = parent;
}

InfinniUI.ScriptExecutor = ScriptExecutor;

/**
 *
 * @param {string} scriptName
 * @param {Object} args
 * @returns {*}
 */
ScriptExecutor.prototype.executeScript = function( scriptName, args ) {
    var parent = this.parent;
    var context = parent.getContext();
    var result;
    var scriptBody;
    var scriptCompiled;

    // аналогичные действия выполняются в DataBindingBuilder, если будете править, там тоже измените
    if( scriptName.substr( 0, 1 ) == '{' ) {
        scriptBody = scriptName.substr( 1, scriptName.length - 2 );
        scriptCompiled = this.buildScriptByBody( scriptBody );
    } else {
        scriptCompiled = parent.getScripts().getById( scriptName );
        if( scriptCompiled ) {
            scriptCompiled = scriptCompiled.func;
        }
    }

    if( context && scriptCompiled ) {
        result = scriptCompiled.call( undefined, context, args );
    }

    return result;
};

/**
 *
 * @param scriptBody
 * @returns {Function}
 */
ScriptExecutor.prototype.buildScriptByBody = function( scriptBody ) {
    var context = this.parent.getContext();
    var args = {
        metadata: {
            'Body': scriptBody,
            'Name': 'InlineScript'
        }
    };
    var scriptBuilder = new ScriptBuilder();

    return scriptBuilder.build( context, args );
};

//####app/services/modalWindowService.js
/**
 *
 * @type {{modalWasOpened, modalWasClosed}}
 */
InfinniUI.ModalWindowService = ( function() {
    var modalQueue = [];

    return {

        /**
         *
         * @param obj
         */
        modalWasOpened: function( obj ) {
            if( modalQueue.length != 0 ) {
                var previous = modalQueue[ modalQueue.length - 1 ];

                previous.modal.addClass( 'invisible' );
                previous.background.addClass( 'invisible' );
            }

            modalQueue.push( obj );
        },

        /**
         *
         * @param modal
         */
        modalWasClosed: function( modal ) {
            for( var i = 0, length = modalQueue.length; i < length; i++ ) {
                if( modalQueue[ i ].modal == modal ) {
                    // Если последний
                    if( i == length - 1 && i != 0 ) {
                        var previous = modalQueue[ i - 1 ];

                        previous.modal.removeClass( 'invisible' );
                        previous.background.removeClass( 'invisible' );
                        notifyLayoutChange();
                    }

                    modalQueue.splice( i, 1 );
                    break;
                }
            }
        }
    };

    function notifyLayoutChange() {
        var exchange = InfinniUI.global.messageBus;
        exchange.send( 'OnChangeLayout', {} );
    }

} )();

//####app/services/notificationSubscription.js
/**
 *
 * @type {{startConnection, reconnection, subscribe, unsubscribe, stopConnection, on, isDisconnected}}
 */
var notificationSubscription = ( function() {
    var subscription = {};
    var hubProxy;
    var hubName;
    var connection;
    var onSuccessCb;
    var onErrorCb;
    var isConnected = false;
    var serverUrl;

    /**
     *
     * @param newHubName
     * @param onSuccess
     * @param onError
     */
    var setUpConnection = function( newHubName, onSuccess, onError ) {
        onSuccessCb = onSuccess || onSuccessCb;
        onErrorCb = onError || onErrorCb;
        hubName = newHubName || hubName;
        serverUrl = serverUrl || InfinniUI.config.signalRServerUrl || InfinniUI.config.serverUrl;
        connection = $.hubConnection( serverUrl, InfinniUI.config.signalROptions );
        hubProxy = connection.createHubProxy( hubName );

        if( _.size( subscription ) > 0 ) {
            eventSwitcher( 'on' );
            startConnection();
        }
    };

    /**
     *
     * @param routingKey
     * @param callback
     * @param context
     */
    var subscribe = function( routingKey, callback, context ) {
        if( !subscription[ routingKey ] ) {
            subscription[ routingKey ] = [];
            if( hubProxy ) {
                hubProxy.on( routingKey, onReceived( routingKey ) );
            }
        }
        subscription[ routingKey ].push( { context: context, callback: callback } );

        if( !isConnected && hubProxy ) {
            startConnection();
        }
    };

    /**
     *
     * @param state
     */
    var eventSwitcher = function( state ) {
        for( var routingKey in subscription ) {
            if( state === 'on' ) {
                hubProxy.on( routingKey, onReceived( routingKey ) );
            } else {
                hubProxy.off( routingKey );
            }
        }
    };

    /**
     *
     * @param routingKey
     * @param context
     */
    var unsubscribe = function( routingKey, context ) {
        if( context ) {
            var routingKeyArr = subscription[ routingKey ];
            for( var i = 0, ii = routingKeyArr.lenght; i < ii; i += 1 ) {
                if( routingKeyArr[ i ].context == context ) {
                    routingKeyArr.splice( i, 1 );
                }
            }
            if( routingKeyArr.length !== 0 ) {
                return;
            }
        }

        if( subscription[ routingKey ] ) {
            delete subscription[ routingKey ];
            if( hubProxy ) {
                hubProxy.off( routingKey );
            }
        }
        checkHandlers();
    };

    /**
     *
     * @param routingKey
     * @returns {Function}
     */
    var onReceived = function( routingKey ) {
        return function( message ) {
            var routingKeyArr = subscription[ routingKey ];
            if( routingKeyArr ) {
                for( var i = 0, ii = routingKeyArr.length; i < ii; i += 1 ) {
                    routingKeyArr[ i ].callback( routingKeyArr[ i ].context, { message: message } );
                }
            }
        };
    };

    /**
     * @description start signalR connection
     */
    var startConnection = function() {
        isConnected = true;

        connection.start()
            .done( function() {
                console.log( 'signalR: connection is started' );
                if( typeof onSuccessCb === 'function' ) {
                    onSuccessCb();
                }
            } )
            .fail( function() {
                console.log( 'signalR: connection fail' );
                isConnected = false;
                if( typeof onErrorCb === 'function' ) {
                    onErrorCb();
                }
            } );
    };

    /**
     * @description stop signalR connection
     */
    var stopConnection = function() {
        if( hubProxy ) {
            isConnected = false;

            eventSwitcher( 'off' );
            hubProxy = null;
            connection.stop();
        }
    };

    /**
     * @description do reconnection
     */
    var reconnection = function() {
        if( connection && hubProxy ) {
            stopConnection();
        }
        setUpConnection();
    };

    /**
     *
     */
    var checkHandlers = function() {
        if( _.size( subscription ) === 0 ) {
            stopConnection();
        }
    };

    /**
     *
     * @param eventName
     * @param callback
     */
    var on = function( eventName, callback ) {
        if( !connection ) {
            console.error( 'Необходимо сначала установить соединение с сервером' );
        }
        if( connection[ eventName ] ) {
            connection[ eventName ]( callback );
        }
    };

    /**
     *
     * @returns {boolean}
     */
    var isDisconnected = function() {
        return $.connection.isDisconnecting( connection );
    };

    return {
        startConnection: setUpConnection,
        reconnection: reconnection,
        subscribe: subscribe,
        unsubscribe: unsubscribe,
        stopConnection: stopConnection,
        on: on,
        isDisconnected: isDisconnected
    };
} )();

InfinniUI.global.notificationSubscription = notificationSubscription;

//####app/services/notifyService.js
/**
 * @description Отображает всплывающие сообщения на событие onNotifyUser.
 * Используется плдагин http://codeseven.github.io/toastr/
 */
InfinniUI.NotifyService = ( function() {
    var exchange = InfinniUI.global.messageBus;

    exchange.subscribe( messageTypes.onNotifyUser, function( context, args ) {
        var messageText = args.value.messageText;
        var messageType = args.value.messageType || 'info';
        var type;

        switch( messageType ) {
            case 'success':
            case 'error':
            case 'warning':
            case 'info':
                type = messageType;
                break;
            default:
                type = 'info';
        }

        if( typeof toastr !== 'undefined' ) {
            toastr[ type ]( messageText );
        }

    } );

} )();

//####app/theme/default.js
InfinniUI.Theme.default = {
    classes: {
        hidden: 'hidden',
        inputError: 'has-error',
        inputWarning: 'has-warning'
    }
};

//####app/services/ajaxLoaderIndicator/ajaxLoaderIndicator.js
/**
 *
 * @param $target
 * @param config
 * @constructor
 */
var AjaxLoaderIndicator = function( $target, config ) {
    var defaults = {
        delay: 50
    };
    var options = _.defaults( {}, config, defaults );
    var model = new AjaxLoaderIndicatorModel( {}, options );
    var ajaxLoaderIndicator = new AjaxLoaderIndicatorView( { model: model } );
    var $indicator = ajaxLoaderIndicator.render().$el;

    $target.append( $indicator );
};

InfinniUI.AjaxLoaderIndicator = AjaxLoaderIndicator;

//####app/services/ajaxLoaderIndicator/ajaxLoaderIndicatorModel.js
/**
 * @constructor
 * @augments Backbone.Model
 */
var AjaxLoaderIndicatorModel = Backbone.Model.extend( {

    defaults: {
        requests: 0,
        progress: false
    },

    /**
     *
     * @param attributes
     * @param options
     */
    initialize: function( attributes, options ) {
        var exchange = InfinniUI.global.messageBus;

        exchange.subscribe( messageTypes.onDataLoaded, this.onDataLoaded.bind( this ) );
        exchange.subscribe( messageTypes.onDataLoading, this.onDataLoading.bind( this ) );

        var onRequestsChanged = ( options.delay > 0 ) ? _.debounce( this.onRequestsChanged.bind( this ), 50 ) :
            this.onRequestsChanged.bind( this );

        this.on( 'change:requests', onRequestsChanged );
    },

    /**
     *
     */
    onDataLoading: function() {
        var requests = this.get( 'requests' );
        this.set( 'requests', requests + 1 );
    },

    /**
     *
     */
    onDataLoaded: function() {
        var requests = this.get( 'requests' );
        this.set( 'requests', requests - 1 );
    },

    /**
     *
     * @param model
     * @param value
     */
    onRequestsChanged: function( model, value ) {
        this.set( 'progress', value > 0 );
    }

} );

InfinniUI.AjaxLoaderIndicatorModel = AjaxLoaderIndicatorModel;

//####app/services/ajaxLoaderIndicator/ajaxLoaderIndicatorView.js
/**
 * @constructor
 * @augments Backbone.View
 */
var AjaxLoaderIndicatorView = Backbone.View.extend( {

    className: 'pl-ajaxloader',

    template: InfinniUI.Template[ 'services/ajaxLoaderIndicator/template/template.tpl.html' ],

    hiddenClassName: 'hidden',

    /**
     *
     */
    initialize: function() {
        this.listenTo( this.model, 'change:progress', this.updateProgress );
    },

    /**
     *
     * @returns {AjaxLoaderIndicatorView}
     */
    render: function() {
        this.$el.html( this.template() );
        this.updateProgress();
        return this;
    },

    /**
     *
     */
    updateProgress: function() {
        var progress = this.model.get( 'progress' );
        this.$el.toggleClass( this.hiddenClassName, !progress );
    }

} );

InfinniUI.AjaxLoaderIndicatorView = AjaxLoaderIndicatorView;

//####app/services/contextMenuService/contextMenuService.js
/**
 * @constructor
 */
InfinniUI.ContextMenuService = ( function() {
    var exchange = InfinniUI.global.messageBus;

    exchange.subscribe( messageTypes.onContextMenu.name, function( context, args ) {
        var message = args.value;
        initContextMenu( getSourceElement( message.source ), message.content );
    } );

    function getSourceElement( source ) {
        return source.control.controlView.$el;
    }

    function initContextMenu( $element, content ) {
        $element.on( 'contextmenu', function( event ) {
            event.preventDefault();

            exchange.send( messageTypes.onOpenContextMenu.name, { x: event.pageX, y: event.pageY } );
        } );
    }
} )();

//####app/services/messageBox/messageBox.js
/**
 * @constructor
 * @augments Backbone.View
 * @mixes bindUIElementsMixin
 */
var MessageBox = Backbone.View.extend( {

    tagName: 'div',

    className: 'modal fade messagebox',

    UI: {
        firstfocuselementinmodal: '.firstfocuselementinmodal',
        lastfocuselementinmodal: '.lastfocuselementinmodal'
    },

    events: {
        'click .btn': 'onClickButtonHandler',
        'focusin .lastfocuselementinmodal': 'onFocusinLastElement',
        'keydown': 'onKeydownHandler'
    },

    template: InfinniUI.Template[ 'services/messageBox/template/default.tpl.html' ],

    /**
     *
     * @param options
     */
    initialize: function( options ) {
        this.setOptions( options );

        // чтобы пользователь случайно не обратился к элементу в фокусе,
        // пока диалоговое окно создается и ещё не перехватило фокус,
        // необходимо старую фокусировку снять
        $( document.activeElement ).blur();
        this.render();
        this.bindUIElements();
        this.$el
            .modal( { show: true } );
    },

    /**
     *
     * @param config
     */
    setOptions: function( config ) {
        this.options = this.applyDefaultOptions( config );
    },

    /**
     *
     */
    onFocusinLastElement: function() {
        this.ui.firstfocuselementinmodal.focus();
    },

    /**
     *
     * @param event
     */
    onKeydownHandler: function( event ) {
        if( document.activeElement === this.ui.lastfocuselementinmodal[ 0 ] && ( event.which || event.keyCode ) == 9 ) {
            event.preventDefault();
            this.ui.firstfocuselementinmodal.focus();
        }

        if( document.activeElement === this.ui.firstfocuselementinmodal[ 0 ] && ( event.which || event.keyCode ) == 9 && event.shiftKey ) {
            event.preventDefault();
            this.ui.lastfocuselementinmodal.focus();
        }
    },

    /**
     *
     * @returns {MessageBox}
     */
    render: function() {
        var $parent = this.options.$parent || $( 'body' );
        var html = this.template( this.options );

        this.$el.html( html );

        this.subscribeToDialog();
        $parent.append( this.$el );

        return this;
    },

    /**
     *
     */
    subscribeToDialog: function() {
        var view = this;

        this.$el.on( 'shown.bs.modal', function( e ) {
            view.ui.firstfocuselementinmodal.focus();
        } );

        this.$el.on( 'hidden.bs.modal', function() {
            view.remove();
        } );
    },

    /**
     *
     * @param event
     */
    onClickButtonHandler: function( event ) {
        event.preventDefault();

        var $el = $( event.target );
        var i = parseInt( $el.data( 'index' ), 10 );
        var handler = this.options.buttons[ i ].onClick;

        if( handler ) {
            handler.apply( null );
        }

        this.close();
    },

    /**
     *
     */
    close: function() {
        if( typeof this.options.onClose === 'function' ) {
            this.options.onClose.call( null );
        }

        this.$el.modal( 'hide' );
    },

    /**
     *
     * @param config
     */
    applyDefaultOptions: function( config ) {
        var options = _.defaults( {}, config, {
            type: 'default',
            buttons: []
        } );
        this.applyDefaultButtonsOptions( options );

        return options;
    },

    /**
     *
     * @param options
     * @returns {*}
     */
    applyDefaultButtonsOptions: function( options ) {
        options.buttons
            .filter( function( button ) {
                return typeof button.type === 'undefined';
            } )
            .forEach( function( button ) {
                button.type = 'default';
            } );

        return options;
    }
} );

_.extend( MessageBox.prototype, bindUIElementsMixin );

InfinniUI.MessageBox = MessageBox;

//####app/services/router/routerService.js
function RouterService( myRoutes ) {
    /**
     *
     * @param myRoutes
     * @returns {*}
     */
    var parseRouteForBackbone = function( myRoutes ) {
        var routerObj = {};
        routerObj.routes = {};

        for( var i = 0, ii = myRoutes.length; i < ii; i += 1 ) {
            myRoutes[ i ].originalPath = myRoutes[ i ].Path;
            if( myRoutes[ i ].Path.search( '<%' ) !== -1 ) {
                var tmpArr,
                    tmpParam,
                    re = /\<\%[\sa-zA-Z0-9]+\%\>/g;
                while( tmpArr = re.exec( myRoutes[ i ].Path ) ) {
                    tmpParam = tmpArr[ 0 ].replace( /\s+/g, '' ).slice( 2, -2 );
                    myRoutes[ i ].Path = myRoutes[ i ].Path.slice( 0, tmpArr.index ) + ':' + tmpParam + myRoutes[ i ].Path.slice( tmpArr.index + tmpArr[ 0 ].length );
                    re.lastIndex = tmpArr.index + tmpParam.length;
                }
            }
            routerObj.routes[ myRoutes[ i ].Path.slice( 1 ) ] = myRoutes[ i ].Name; // remove first slash from myRoutes[i].Path for backbone
            routerObj[ myRoutes[ i ].Name ] = onRouteSelectHandler( myRoutes[ i ].Name, myRoutes[ i ].Action );
        }

        return routerObj;
    };

    /**
     *
     * @param name
     * @param originalPath
     * @returns {*}
     */
    var getLinkByName = function( name, originalPath ) {
        var original = originalPath || 'yes';

        for( var i = 0, ii = myRoutes.length; i < ii; i += 1 ) {
            if( myRoutes[ i ].Name === name ) {
                if( original === 'yes' ) {
                    return myRoutes[ i ].originalPath;
                } else {
                    return myRoutes[ i ].Path;
                }
            }
        }
    };

    /**
     *
     * @param name
     * @param script
     * @returns {Function}
     */
    var onRouteSelectHandler = function( name, script ) {
        return function() {
            var params = {
                name: name,
                params: Array.prototype.slice.call( arguments ),
                routeParams: routerService._params
            };

            new ScriptExecutor( {
                getContext: function() {
                    return routerService._context || 'No context';
                }
            } ).executeScript( script, params );
        };
    };

    /**
     *
     * @type {*}
     */
    var routerObj = parseRouteForBackbone( myRoutes );

    /**
     *
     */
    var startRouter = function() {
        if( !InfinniUI.AppRouter ) {
            var Router = Backbone.Router.extend( routerObj );
            InfinniUI.AppRouter = new Router();

            Backbone.history = Backbone.history || new Backbone.History( {} );
            Backbone.history.start( InfinniUI.config.historyAPI );
        } else {
            console.log( 'Попытка повторно запустить routerService' );
        }
    };

    /**
     *
     * @param context
     */
    var setContext = function( context ) {
        this._context = context;
    };

    /**
     *
     * @param params
     */
    var setParams = function( params ) {
        this._params = params;
    };

    /**
     *
     * @param params
     */
    var addParams = function( params ) {
        this._params = _.extend( this._params || {}, params );
    };

    var routerService = {
        getLinkByName: getLinkByName,
        startRouter: startRouter,
        setContext: setContext,
        setParams: setParams,
        addParams: addParams
    };

    return routerService;
}

if( InfinniUI.config.routes ) {
    InfinniUI.routerService = new RouterService( InfinniUI.config.routes );
}

//####app/services/toolTipService/toolTipService.js
/**
 *
 */
InfinniUI.ToolTipService = ( function() {

    var TOOLTIP_PLACEMENT = 'auto top';
    var TOOLTIP_CONTAINER = 'body';
    var TOOLTIP_TRIGGER = 'hover';
    var exchange = InfinniUI.global.messageBus;

    exchange.subscribe( messageTypes.onToolTipInit.name, initToolTip );

    exchange.subscribe( messageTypes.onToolTipDestroy.name, destroyToolTip );

    /**
     *
     * @param context
     * @param args
     */
    function destroyToolTip( context, args ) {
        var element = extractElementFromArgs( args );
        var $element = element.control.controlView.$el;

        $element.tooltip( 'destroy' );
    }

    /**
     *
     * @param context
     * @param args
     */
    function initToolTip( context, args ) {
        var element = extractElementFromArgs( args );
        var content = extractContentFromArgs( args );
        var $element = element.control.controlView.$el;
        var options = {
            html: true,
            title: function() {
                return content.render();
            },
            placement: TOOLTIP_PLACEMENT,
            container: TOOLTIP_CONTAINER,
            trigger: TOOLTIP_TRIGGER
        };

        $element.tooltip( options );
    }

    /**
     *
     * @param {Object} args
     * @returns InfinniUI.Element
     */
    function extractContentFromArgs( args ) {
        return args.value.content;
    }

    /**
     *
     * @param {Object} args
     * @returns InfinniUI.Element
     */
    function extractElementFromArgs( args ) {
        return args.value.element;
    }

} )();

//####bootstrap-framework/js/tooltip.js
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.5
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.5'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

//####bootstrap-framework/js/alert.js
/* ========================================================================
 * Bootstrap: alert.js v3.3.5
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.5'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

//####bootstrap-framework/js/button.js
/* ========================================================================
 * Bootstrap: button.js v3.3.5
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.5'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

//####bootstrap-framework/js/collapse.js
/* ========================================================================
 * Bootstrap: collapse.js v3.3.5
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.5'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

//####bootstrap-framework/js/dropdown.js
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.5
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.5'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown', relatedTarget)
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

//####bootstrap-framework/js/modal.js
/* ========================================================================
 * Bootstrap: modal.js v3.3.5
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var _scrollbarWidth = 0;
  var _isMeasureScrollbar = false;

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    //this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  //Классы элементов находящиеся вне диалога и которые могут получать фокус
  Modal.ALLOWED_CONTROL_CLASSES = ['pl-combobox-filter-text'];
  Modal.VERSION  = '3.3.5'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          var $el = $(e.target);
          var allowed = Modal.ALLOWED_CONTROL_CLASSES.some(function (className) {
            return $el.hasClass(className);
          });
          if (!allowed) {
            this.$element.trigger('focus')
          }
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () {
    if (_isMeasureScrollbar === false) {
      _isMeasureScrollbar = true;
      _scrollbarWidth = this._measureScrollbar()
    }

    return _scrollbarWidth;
  }

  Modal.prototype._measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }

  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

//####bootstrap-framework/js/popover.js
/* ========================================================================
 * Bootstrap: popover.js v3.3.5
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.5'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

//####bootstrap-framework/js/scrollspy.js
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.5
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.5'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

//####bootstrap-framework/js/tab.js
/* ========================================================================
 * Bootstrap: tab.js v3.3.5
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.5'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

//####bootstrap-framework/js/transition.js
/* ========================================================================
 * Bootstrap: transition.js v3.3.5
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);
})();